
MPU6050 3D Motion.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005288  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08005438  08005438  00006438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054dc  080054dc  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  080054dc  080054dc  000064dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080054e4  080054e4  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054e4  080054e4  000064e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080054e8  080054e8  000064e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080054ec  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007068  2**0
                  CONTENTS
 10 .bss          000002d8  20000068  20000068  00007068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000340  20000340  00007068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010a73  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022c7  00000000  00000000  00017b0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001028  00000000  00000000  00019dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cb8  00000000  00000000  0001ae00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000257b5  00000000  00000000  0001bab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012f59  00000000  00000000  0004126d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dfe1c  00000000  00000000  000541c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00133fe2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004c3c  00000000  00000000  00134028  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  00138c64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000068 	.word	0x20000068
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005420 	.word	0x08005420

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	08005420 	.word	0x08005420

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <i2c_init>:
#include <stdio.h>
I2C_HandleTypeDef I2C3_HandleStruct;

/*private Function to initialize i2c , can be overwritten for different platform*/
static void i2c_init()
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
	  __HAL_RCC_I2C3_CLK_ENABLE();
 8000586:	2300      	movs	r3, #0
 8000588:	607b      	str	r3, [r7, #4]
 800058a:	4b1b      	ldr	r3, [pc, #108]	@ (80005f8 <i2c_init+0x78>)
 800058c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800058e:	4a1a      	ldr	r2, [pc, #104]	@ (80005f8 <i2c_init+0x78>)
 8000590:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000594:	6413      	str	r3, [r2, #64]	@ 0x40
 8000596:	4b18      	ldr	r3, [pc, #96]	@ (80005f8 <i2c_init+0x78>)
 8000598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800059a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	687b      	ldr	r3, [r7, #4]
	  I2C3_HandleStruct.Instance = I2C3;
 80005a2:	4b16      	ldr	r3, [pc, #88]	@ (80005fc <i2c_init+0x7c>)
 80005a4:	4a16      	ldr	r2, [pc, #88]	@ (8000600 <i2c_init+0x80>)
 80005a6:	601a      	str	r2, [r3, #0]
	  I2C3_HandleStruct.Init.ClockSpeed = 400000;
 80005a8:	4b14      	ldr	r3, [pc, #80]	@ (80005fc <i2c_init+0x7c>)
 80005aa:	4a16      	ldr	r2, [pc, #88]	@ (8000604 <i2c_init+0x84>)
 80005ac:	605a      	str	r2, [r3, #4]
	  I2C3_HandleStruct.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005ae:	4b13      	ldr	r3, [pc, #76]	@ (80005fc <i2c_init+0x7c>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	609a      	str	r2, [r3, #8]
	  I2C3_HandleStruct.Init.OwnAddress1 = 0;
 80005b4:	4b11      	ldr	r3, [pc, #68]	@ (80005fc <i2c_init+0x7c>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	60da      	str	r2, [r3, #12]
	  I2C3_HandleStruct.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005ba:	4b10      	ldr	r3, [pc, #64]	@ (80005fc <i2c_init+0x7c>)
 80005bc:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80005c0:	611a      	str	r2, [r3, #16]
	  I2C3_HandleStruct.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005c2:	4b0e      	ldr	r3, [pc, #56]	@ (80005fc <i2c_init+0x7c>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	615a      	str	r2, [r3, #20]
	  I2C3_HandleStruct.Init.OwnAddress2 = 0;
 80005c8:	4b0c      	ldr	r3, [pc, #48]	@ (80005fc <i2c_init+0x7c>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	619a      	str	r2, [r3, #24]
	  I2C3_HandleStruct.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005ce:	4b0b      	ldr	r3, [pc, #44]	@ (80005fc <i2c_init+0x7c>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	61da      	str	r2, [r3, #28]
	  I2C3_HandleStruct.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005d4:	4b09      	ldr	r3, [pc, #36]	@ (80005fc <i2c_init+0x7c>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	621a      	str	r2, [r3, #32]
	  HAL_I2C_Init(&I2C3_HandleStruct);
 80005da:	4808      	ldr	r0, [pc, #32]	@ (80005fc <i2c_init+0x7c>)
 80005dc:	f001 fbd4 	bl	8001d88 <HAL_I2C_Init>
	  HAL_I2CEx_ConfigAnalogFilter(&I2C3_HandleStruct, I2C_ANALOGFILTER_ENABLE);
 80005e0:	2100      	movs	r1, #0
 80005e2:	4806      	ldr	r0, [pc, #24]	@ (80005fc <i2c_init+0x7c>)
 80005e4:	f002 fbf4 	bl	8002dd0 <HAL_I2CEx_ConfigAnalogFilter>
	  HAL_I2CEx_ConfigDigitalFilter(&I2C3_HandleStruct,0);
 80005e8:	2100      	movs	r1, #0
 80005ea:	4804      	ldr	r0, [pc, #16]	@ (80005fc <i2c_init+0x7c>)
 80005ec:	f002 fc2c 	bl	8002e48 <HAL_I2CEx_ConfigDigitalFilter>
}
 80005f0:	bf00      	nop
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	40023800 	.word	0x40023800
 80005fc:	20000084 	.word	0x20000084
 8000600:	40005c00 	.word	0x40005c00
 8000604:	00061a80 	.word	0x00061a80

08000608 <gpio_init>:
/*GPIO init function for I2C3 module
 * PA8 -> SCL | PC9 -> SDA*/
static void gpio_init()
{
 8000608:	b5b0      	push	{r4, r5, r7, lr}
 800060a:	b088      	sub	sp, #32
 800060c:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800060e:	2300      	movs	r3, #0
 8000610:	60bb      	str	r3, [r7, #8]
 8000612:	4b1a      	ldr	r3, [pc, #104]	@ (800067c <gpio_init+0x74>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000616:	4a19      	ldr	r2, [pc, #100]	@ (800067c <gpio_init+0x74>)
 8000618:	f043 0304 	orr.w	r3, r3, #4
 800061c:	6313      	str	r3, [r2, #48]	@ 0x30
 800061e:	4b17      	ldr	r3, [pc, #92]	@ (800067c <gpio_init+0x74>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000622:	f003 0304 	and.w	r3, r3, #4
 8000626:	60bb      	str	r3, [r7, #8]
 8000628:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800062a:	2300      	movs	r3, #0
 800062c:	607b      	str	r3, [r7, #4]
 800062e:	4b13      	ldr	r3, [pc, #76]	@ (800067c <gpio_init+0x74>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000632:	4a12      	ldr	r2, [pc, #72]	@ (800067c <gpio_init+0x74>)
 8000634:	f043 0301 	orr.w	r3, r3, #1
 8000638:	6313      	str	r3, [r2, #48]	@ 0x30
 800063a:	4b10      	ldr	r3, [pc, #64]	@ (800067c <gpio_init+0x74>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063e:	f003 0301 	and.w	r3, r3, #1
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	687b      	ldr	r3, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {
 8000646:	4b0e      	ldr	r3, [pc, #56]	@ (8000680 <gpio_init+0x78>)
 8000648:	f107 040c 	add.w	r4, r7, #12
 800064c:	461d      	mov	r5, r3
 800064e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000650:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000652:	682b      	ldr	r3, [r5, #0]
 8000654:	6023      	str	r3, [r4, #0]
        .Mode = GPIO_MODE_AF_OD, /* Alternate Function Open Drain Mode */
        .Pull = GPIO_PULLUP,
        .Speed = GPIO_SPEED_FREQ_VERY_HIGH,
        .Alternate = GPIO_AF4_I2C3
    };
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000656:	f107 030c 	add.w	r3, r7, #12
 800065a:	4619      	mov	r1, r3
 800065c:	4809      	ldr	r0, [pc, #36]	@ (8000684 <gpio_init+0x7c>)
 800065e:	f001 f9cd 	bl	80019fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MPU6050_SDA_PIN;
 8000662:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000666:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000668:	f107 030c 	add.w	r3, r7, #12
 800066c:	4619      	mov	r1, r3
 800066e:	4806      	ldr	r0, [pc, #24]	@ (8000688 <gpio_init+0x80>)
 8000670:	f001 f9c4 	bl	80019fc <HAL_GPIO_Init>
}
 8000674:	bf00      	nop
 8000676:	3720      	adds	r7, #32
 8000678:	46bd      	mov	sp, r7
 800067a:	bdb0      	pop	{r4, r5, r7, pc}
 800067c:	40023800 	.word	0x40023800
 8000680:	08005438 	.word	0x08005438
 8000684:	40020000 	.word	0x40020000
 8000688:	40020800 	.word	0x40020800

0800068c <mpu6050_write_reg>:
static HAL_StatusTypeDef mpu6050_write_reg(uint8_t reg_addr , uint8_t *pData , uint16_t size)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b086      	sub	sp, #24
 8000690:	af04      	add	r7, sp, #16
 8000692:	4603      	mov	r3, r0
 8000694:	6039      	str	r1, [r7, #0]
 8000696:	71fb      	strb	r3, [r7, #7]
 8000698:	4613      	mov	r3, r2
 800069a:	80bb      	strh	r3, [r7, #4]
	if (HAL_I2C_Mem_Write(&I2C3_HandleStruct,(MPU6050_I2C_ADDR << 1),reg_addr , I2C_MEMADD_SIZE_8BIT, pData , size , 100) != HAL_OK){
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	b29a      	uxth	r2, r3
 80006a0:	2364      	movs	r3, #100	@ 0x64
 80006a2:	9302      	str	r3, [sp, #8]
 80006a4:	88bb      	ldrh	r3, [r7, #4]
 80006a6:	9301      	str	r3, [sp, #4]
 80006a8:	683b      	ldr	r3, [r7, #0]
 80006aa:	9300      	str	r3, [sp, #0]
 80006ac:	2301      	movs	r3, #1
 80006ae:	21d0      	movs	r1, #208	@ 0xd0
 80006b0:	4806      	ldr	r0, [pc, #24]	@ (80006cc <mpu6050_write_reg+0x40>)
 80006b2:	f001 fcad 	bl	8002010 <HAL_I2C_Mem_Write>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <mpu6050_write_reg+0x34>
		return HAL_ERROR;
 80006bc:	2301      	movs	r3, #1
 80006be:	e000      	b.n	80006c2 <mpu6050_write_reg+0x36>
	}
	return HAL_OK;
 80006c0:	2300      	movs	r3, #0
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	20000084 	.word	0x20000084

080006d0 <mpu6050_read_reg>:
/*Reads a register or multiple registers*/
static MPU6050_Status_e mpu6050_read_reg(uint8_t reg_addr , uint8_t *pData , uint16_t size)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b086      	sub	sp, #24
 80006d4:	af04      	add	r7, sp, #16
 80006d6:	4603      	mov	r3, r0
 80006d8:	6039      	str	r1, [r7, #0]
 80006da:	71fb      	strb	r3, [r7, #7]
 80006dc:	4613      	mov	r3, r2
 80006de:	80bb      	strh	r3, [r7, #4]
	if (HAL_I2C_Mem_Read(&I2C3_HandleStruct,(MPU6050_I2C_ADDR << 1),reg_addr ,I2C_MEMADD_SIZE_8BIT , pData ,size, 100) != HAL_OK){
 80006e0:	79fb      	ldrb	r3, [r7, #7]
 80006e2:	b29a      	uxth	r2, r3
 80006e4:	2364      	movs	r3, #100	@ 0x64
 80006e6:	9302      	str	r3, [sp, #8]
 80006e8:	88bb      	ldrh	r3, [r7, #4]
 80006ea:	9301      	str	r3, [sp, #4]
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	9300      	str	r3, [sp, #0]
 80006f0:	2301      	movs	r3, #1
 80006f2:	21d0      	movs	r1, #208	@ 0xd0
 80006f4:	4806      	ldr	r0, [pc, #24]	@ (8000710 <mpu6050_read_reg+0x40>)
 80006f6:	f001 fd85 	bl	8002204 <HAL_I2C_Mem_Read>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <mpu6050_read_reg+0x34>
			return MPU6050_ERROR;
 8000700:	2301      	movs	r3, #1
 8000702:	e000      	b.n	8000706 <mpu6050_read_reg+0x36>
		}
	return MPU6050_OK;
 8000704:	2300      	movs	r3, #0
}
 8000706:	4618      	mov	r0, r3
 8000708:	3708      	adds	r7, #8
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	20000084 	.word	0x20000084

08000714 <mpu6050_set_sensitivity>:
static void mpu6050_set_sensitivity(mpu6050_config_t *mpu6050_config){
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
	switch (mpu6050_config -> acc_fs_sel)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	78db      	ldrb	r3, [r3, #3]
 8000720:	2b03      	cmp	r3, #3
 8000722:	d81f      	bhi.n	8000764 <mpu6050_set_sensitivity+0x50>
 8000724:	a201      	add	r2, pc, #4	@ (adr r2, 800072c <mpu6050_set_sensitivity+0x18>)
 8000726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800072a:	bf00      	nop
 800072c:	0800073d 	.word	0x0800073d
 8000730:	08000747 	.word	0x08000747
 8000734:	08000751 	.word	0x08000751
 8000738:	0800075b 	.word	0x0800075b
	{
	case(ACC_FS_SEL_2g):
			mpu6050_config -> acc_sensitivity =  16384.f;
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	f04f 428d 	mov.w	r2, #1182793728	@ 0x46800000
 8000742:	609a      	str	r2, [r3, #8]
	        break;
 8000744:	e00e      	b.n	8000764 <mpu6050_set_sensitivity+0x50>
	case(ACC_FS_SEL_4g):
			mpu6050_config -> acc_sensitivity =  8192.f;
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	f04f 428c 	mov.w	r2, #1174405120	@ 0x46000000
 800074c:	609a      	str	r2, [r3, #8]
		    break;
 800074e:	e009      	b.n	8000764 <mpu6050_set_sensitivity+0x50>
	case(ACC_FS_SEL_8g):
			mpu6050_config -> acc_sensitivity =  4096.f;
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	f04f 428b 	mov.w	r2, #1166016512	@ 0x45800000
 8000756:	609a      	str	r2, [r3, #8]
			break;
 8000758:	e004      	b.n	8000764 <mpu6050_set_sensitivity+0x50>
	case(ACC_FS_SEL_16g):
			mpu6050_config -> acc_sensitivity =  2048.f;
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	f04f 428a 	mov.w	r2, #1157627904	@ 0x45000000
 8000760:	609a      	str	r2, [r3, #8]
			break;
 8000762:	bf00      	nop
	}
	switch (mpu6050_config -> gyro_fs_sel)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	789b      	ldrb	r3, [r3, #2]
 8000768:	2b03      	cmp	r3, #3
 800076a:	d81b      	bhi.n	80007a4 <mpu6050_set_sensitivity+0x90>
 800076c:	a201      	add	r2, pc, #4	@ (adr r2, 8000774 <mpu6050_set_sensitivity+0x60>)
 800076e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000772:	bf00      	nop
 8000774:	08000785 	.word	0x08000785
 8000778:	0800078d 	.word	0x0800078d
 800077c:	08000795 	.word	0x08000795
 8000780:	0800079d 	.word	0x0800079d
	{
	case(GYRO_FS_SEL_250DPS):
			mpu6050_config -> gyro_sensitivity =  131.f;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	4a0a      	ldr	r2, [pc, #40]	@ (80007b0 <mpu6050_set_sensitivity+0x9c>)
 8000788:	60da      	str	r2, [r3, #12]
	        break;
 800078a:	e00b      	b.n	80007a4 <mpu6050_set_sensitivity+0x90>
	case(GYRO_FS_SEL_500DPS):
			mpu6050_config -> gyro_sensitivity =  65.5f;
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	4a09      	ldr	r2, [pc, #36]	@ (80007b4 <mpu6050_set_sensitivity+0xa0>)
 8000790:	60da      	str	r2, [r3, #12]
		    break;
 8000792:	e007      	b.n	80007a4 <mpu6050_set_sensitivity+0x90>
	case(GYRO_FS_SEL_1000DPS):
			mpu6050_config -> gyro_sensitivity =  32.8f;
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	4a08      	ldr	r2, [pc, #32]	@ (80007b8 <mpu6050_set_sensitivity+0xa4>)
 8000798:	60da      	str	r2, [r3, #12]
			break;
 800079a:	e003      	b.n	80007a4 <mpu6050_set_sensitivity+0x90>
	case(GYRO_FS_SEL_2000DPS):
			mpu6050_config -> gyro_sensitivity =  16.4f;
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	4a07      	ldr	r2, [pc, #28]	@ (80007bc <mpu6050_set_sensitivity+0xa8>)
 80007a0:	60da      	str	r2, [r3, #12]
			break;
 80007a2:	bf00      	nop
	}
}
 80007a4:	bf00      	nop
 80007a6:	370c      	adds	r7, #12
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr
 80007b0:	43030000 	.word	0x43030000
 80007b4:	42830000 	.word	0x42830000
 80007b8:	42033333 	.word	0x42033333
 80007bc:	41833333 	.word	0x41833333

080007c0 <mpu6050_calibrate>:
static void mpu6050_calibrate(mpu6050_config_t *mpu6050_config)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b08a      	sub	sp, #40	@ 0x28
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	uint16_t i;
	uint16_t samples = 500;
 80007c8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80007cc:	833b      	strh	r3, [r7, #24]
	int16_t acc_x_offset = 0 , acc_y_offset = 0 , acc_z_offset = 0;
 80007ce:	2300      	movs	r3, #0
 80007d0:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80007d2:	2300      	movs	r3, #0
 80007d4:	847b      	strh	r3, [r7, #34]	@ 0x22
 80007d6:	2300      	movs	r3, #0
 80007d8:	843b      	strh	r3, [r7, #32]
	int16_t gyro_x_offset = 0, gyro_y_offset = 0 , gyro_z_offset = 0;
 80007da:	2300      	movs	r3, #0
 80007dc:	83fb      	strh	r3, [r7, #30]
 80007de:	2300      	movs	r3, #0
 80007e0:	83bb      	strh	r3, [r7, #28]
 80007e2:	2300      	movs	r3, #0
 80007e4:	837b      	strh	r3, [r7, #26]
	mpu6050_raw_data_t mpu6050_raw_data;
	for (i = 0 ; i < samples ; i++)
 80007e6:	2300      	movs	r3, #0
 80007e8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80007ea:	e032      	b.n	8000852 <mpu6050_calibrate+0x92>
	{
		mpu6050_get_raw_data(&mpu6050_raw_data, mpu6050_config);
 80007ec:	f107 030c 	add.w	r3, r7, #12
 80007f0:	6879      	ldr	r1, [r7, #4]
 80007f2:	4618      	mov	r0, r3
 80007f4:	f000 f865 	bl	80008c2 <mpu6050_get_raw_data>
		acc_x_offset += mpu6050_raw_data.acc_x_raw;
 80007f8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80007fc:	b29a      	uxth	r2, r3
 80007fe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000800:	4413      	add	r3, r2
 8000802:	b29b      	uxth	r3, r3
 8000804:	84bb      	strh	r3, [r7, #36]	@ 0x24
		acc_y_offset += mpu6050_raw_data.acc_y_raw;
 8000806:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800080a:	b29a      	uxth	r2, r3
 800080c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800080e:	4413      	add	r3, r2
 8000810:	b29b      	uxth	r3, r3
 8000812:	847b      	strh	r3, [r7, #34]	@ 0x22
		acc_z_offset += mpu6050_raw_data.acc_z_raw;
 8000814:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000818:	b29a      	uxth	r2, r3
 800081a:	8c3b      	ldrh	r3, [r7, #32]
 800081c:	4413      	add	r3, r2
 800081e:	b29b      	uxth	r3, r3
 8000820:	843b      	strh	r3, [r7, #32]
		gyro_x_offset += mpu6050_raw_data.gyro_x_raw;
 8000822:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000826:	b29a      	uxth	r2, r3
 8000828:	8bfb      	ldrh	r3, [r7, #30]
 800082a:	4413      	add	r3, r2
 800082c:	b29b      	uxth	r3, r3
 800082e:	83fb      	strh	r3, [r7, #30]
		gyro_y_offset += mpu6050_raw_data.gyro_y_raw;
 8000830:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000834:	b29a      	uxth	r2, r3
 8000836:	8bbb      	ldrh	r3, [r7, #28]
 8000838:	4413      	add	r3, r2
 800083a:	b29b      	uxth	r3, r3
 800083c:	83bb      	strh	r3, [r7, #28]
		gyro_z_offset += mpu6050_raw_data.gyro_z_raw;
 800083e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000842:	b29a      	uxth	r2, r3
 8000844:	8b7b      	ldrh	r3, [r7, #26]
 8000846:	4413      	add	r3, r2
 8000848:	b29b      	uxth	r3, r3
 800084a:	837b      	strh	r3, [r7, #26]
	for (i = 0 ; i < samples ; i++)
 800084c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800084e:	3301      	adds	r3, #1
 8000850:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8000852:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000854:	8b3b      	ldrh	r3, [r7, #24]
 8000856:	429a      	cmp	r2, r3
 8000858:	d3c8      	bcc.n	80007ec <mpu6050_calibrate+0x2c>
	}
	mpu6050_config -> acc_x_offset  = acc_x_offset  / samples;
 800085a:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 800085e:	8b3b      	ldrh	r3, [r7, #24]
 8000860:	fb92 f3f3 	sdiv	r3, r2, r3
 8000864:	b21a      	sxth	r2, r3
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	82da      	strh	r2, [r3, #22]
	mpu6050_config -> acc_y_offset  = acc_y_offset  / samples;
 800086a:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 800086e:	8b3b      	ldrh	r3, [r7, #24]
 8000870:	fb92 f3f3 	sdiv	r3, r2, r3
 8000874:	b21a      	sxth	r2, r3
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	831a      	strh	r2, [r3, #24]
	mpu6050_config -> acc_z_offset  = acc_z_offset  / samples;
 800087a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800087e:	8b3b      	ldrh	r3, [r7, #24]
 8000880:	fb92 f3f3 	sdiv	r3, r2, r3
 8000884:	b21a      	sxth	r2, r3
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	835a      	strh	r2, [r3, #26]

	mpu6050_config -> gyro_x_offset = gyro_x_offset / samples;
 800088a:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800088e:	8b3b      	ldrh	r3, [r7, #24]
 8000890:	fb92 f3f3 	sdiv	r3, r2, r3
 8000894:	b21a      	sxth	r2, r3
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	821a      	strh	r2, [r3, #16]
	mpu6050_config -> gyro_y_offset = gyro_y_offset / samples;
 800089a:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800089e:	8b3b      	ldrh	r3, [r7, #24]
 80008a0:	fb92 f3f3 	sdiv	r3, r2, r3
 80008a4:	b21a      	sxth	r2, r3
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	825a      	strh	r2, [r3, #18]
	mpu6050_config -> gyro_z_offset = gyro_z_offset / samples;
 80008aa:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 80008ae:	8b3b      	ldrh	r3, [r7, #24]
 80008b0:	fb92 f3f3 	sdiv	r3, r2, r3
 80008b4:	b21a      	sxth	r2, r3
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	829a      	strh	r2, [r3, #20]
}
 80008ba:	bf00      	nop
 80008bc:	3728      	adds	r7, #40	@ 0x28
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}

080008c2 <mpu6050_get_raw_data>:
/*Reads raw data from the gyroscope and acclerometer*/
 MPU6050_Status_e mpu6050_get_raw_data(mpu6050_raw_data_t *mpu6050_raw_data , mpu6050_config_t *mpu6050_config)
{
 80008c2:	b580      	push	{r7, lr}
 80008c4:	b086      	sub	sp, #24
 80008c6:	af00      	add	r7, sp, #0
 80008c8:	6078      	str	r0, [r7, #4]
 80008ca:	6039      	str	r1, [r7, #0]
	MPU6050_Status_e status;
	uint8_t raw_data[14];
	status = mpu6050_read_reg(ACCEL_XOUT_H, raw_data,14);/*Reading registers from the base address ACCEL_XOUT_H(0x3B) -> GYRO_ZOUT(0x48)*/
 80008cc:	f107 0308 	add.w	r3, r7, #8
 80008d0:	220e      	movs	r2, #14
 80008d2:	4619      	mov	r1, r3
 80008d4:	203b      	movs	r0, #59	@ 0x3b
 80008d6:	f7ff fefb 	bl	80006d0 <mpu6050_read_reg>
 80008da:	4603      	mov	r3, r0
 80008dc:	75fb      	strb	r3, [r7, #23]
    /*Accelerometer raw data*/
	mpu6050_raw_data -> acc_x_raw = (int16_t)((raw_data[0] << 8) | (raw_data[1])) - mpu6050_config -> acc_x_offset;
 80008de:	7a3b      	ldrb	r3, [r7, #8]
 80008e0:	021b      	lsls	r3, r3, #8
 80008e2:	b21a      	sxth	r2, r3
 80008e4:	7a7b      	ldrb	r3, [r7, #9]
 80008e6:	b21b      	sxth	r3, r3
 80008e8:	4313      	orrs	r3, r2
 80008ea:	b21b      	sxth	r3, r3
 80008ec:	b29a      	uxth	r2, r3
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80008f4:	b29b      	uxth	r3, r3
 80008f6:	1ad3      	subs	r3, r2, r3
 80008f8:	b29b      	uxth	r3, r3
 80008fa:	b21a      	sxth	r2, r3
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	801a      	strh	r2, [r3, #0]
	mpu6050_raw_data -> acc_y_raw = (int16_t)((raw_data[2] << 8) | (raw_data[3])) - mpu6050_config -> acc_y_offset;
 8000900:	7abb      	ldrb	r3, [r7, #10]
 8000902:	021b      	lsls	r3, r3, #8
 8000904:	b21a      	sxth	r2, r3
 8000906:	7afb      	ldrb	r3, [r7, #11]
 8000908:	b21b      	sxth	r3, r3
 800090a:	4313      	orrs	r3, r2
 800090c:	b21b      	sxth	r3, r3
 800090e:	b29a      	uxth	r2, r3
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8000916:	b29b      	uxth	r3, r3
 8000918:	1ad3      	subs	r3, r2, r3
 800091a:	b29b      	uxth	r3, r3
 800091c:	b21a      	sxth	r2, r3
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	805a      	strh	r2, [r3, #2]
	mpu6050_raw_data -> acc_z_raw = (int16_t)((raw_data[4] << 8) | (raw_data[5])) - mpu6050_config -> acc_z_offset;
 8000922:	7b3b      	ldrb	r3, [r7, #12]
 8000924:	021b      	lsls	r3, r3, #8
 8000926:	b21a      	sxth	r2, r3
 8000928:	7b7b      	ldrb	r3, [r7, #13]
 800092a:	b21b      	sxth	r3, r3
 800092c:	4313      	orrs	r3, r2
 800092e:	b21b      	sxth	r3, r3
 8000930:	b29a      	uxth	r2, r3
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8000938:	b29b      	uxth	r3, r3
 800093a:	1ad3      	subs	r3, r2, r3
 800093c:	b29b      	uxth	r3, r3
 800093e:	b21a      	sxth	r2, r3
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	809a      	strh	r2, [r3, #4]
	/*Gyroscope raw data */
	mpu6050_raw_data -> gyro_x_raw = (int16_t)((raw_data[8] << 8)  | (raw_data[9]))  - mpu6050_config -> gyro_x_offset;
 8000944:	7c3b      	ldrb	r3, [r7, #16]
 8000946:	021b      	lsls	r3, r3, #8
 8000948:	b21a      	sxth	r2, r3
 800094a:	7c7b      	ldrb	r3, [r7, #17]
 800094c:	b21b      	sxth	r3, r3
 800094e:	4313      	orrs	r3, r2
 8000950:	b21b      	sxth	r3, r3
 8000952:	b29a      	uxth	r2, r3
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800095a:	b29b      	uxth	r3, r3
 800095c:	1ad3      	subs	r3, r2, r3
 800095e:	b29b      	uxth	r3, r3
 8000960:	b21a      	sxth	r2, r3
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	80da      	strh	r2, [r3, #6]
	mpu6050_raw_data -> gyro_y_raw = (int16_t)((raw_data[10] << 8) | (raw_data[11])) - mpu6050_config -> gyro_y_offset;
 8000966:	7cbb      	ldrb	r3, [r7, #18]
 8000968:	021b      	lsls	r3, r3, #8
 800096a:	b21a      	sxth	r2, r3
 800096c:	7cfb      	ldrb	r3, [r7, #19]
 800096e:	b21b      	sxth	r3, r3
 8000970:	4313      	orrs	r3, r2
 8000972:	b21b      	sxth	r3, r3
 8000974:	b29a      	uxth	r2, r3
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800097c:	b29b      	uxth	r3, r3
 800097e:	1ad3      	subs	r3, r2, r3
 8000980:	b29b      	uxth	r3, r3
 8000982:	b21a      	sxth	r2, r3
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	811a      	strh	r2, [r3, #8]
	mpu6050_raw_data -> gyro_z_raw = (int16_t)((raw_data[12] << 8) | (raw_data[13])) - mpu6050_config -> gyro_z_offset;
 8000988:	7d3b      	ldrb	r3, [r7, #20]
 800098a:	021b      	lsls	r3, r3, #8
 800098c:	b21a      	sxth	r2, r3
 800098e:	7d7b      	ldrb	r3, [r7, #21]
 8000990:	b21b      	sxth	r3, r3
 8000992:	4313      	orrs	r3, r2
 8000994:	b21b      	sxth	r3, r3
 8000996:	b29a      	uxth	r2, r3
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800099e:	b29b      	uxth	r3, r3
 80009a0:	1ad3      	subs	r3, r2, r3
 80009a2:	b29b      	uxth	r3, r3
 80009a4:	b21a      	sxth	r2, r3
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	815a      	strh	r2, [r3, #10]
	return status;
 80009aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	3718      	adds	r7, #24
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <mpu6050_get_raw_data_array>:
 MPU6050_Status_e mpu6050_get_raw_data_array(uint8_t *data){
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
		if( mpu6050_read_reg(ACCEL_XOUT_H, &data[0],6) != MPU6050_OK)/*Reading registers from the base address ACCEL_XOUT_H(0x3B) -> GYRO_ZOUT(0x48)*/
 80009bc:	2206      	movs	r2, #6
 80009be:	6879      	ldr	r1, [r7, #4]
 80009c0:	203b      	movs	r0, #59	@ 0x3b
 80009c2:	f7ff fe85 	bl	80006d0 <mpu6050_read_reg>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <mpu6050_get_raw_data_array+0x1c>
		{
			return MPU6050_ERROR;
 80009cc:	2301      	movs	r3, #1
 80009ce:	e00c      	b.n	80009ea <mpu6050_get_raw_data_array+0x36>
		}
		if (mpu6050_read_reg(GYRO_XOUT_H , &data[6],6) != MPU6050_OK)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	3306      	adds	r3, #6
 80009d4:	2206      	movs	r2, #6
 80009d6:	4619      	mov	r1, r3
 80009d8:	2043      	movs	r0, #67	@ 0x43
 80009da:	f7ff fe79 	bl	80006d0 <mpu6050_read_reg>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <mpu6050_get_raw_data_array+0x34>
		{
			return MPU6050_ERROR;
 80009e4:	2301      	movs	r3, #1
 80009e6:	e000      	b.n	80009ea <mpu6050_get_raw_data_array+0x36>
		}
		return MPU6050_OK;
 80009e8:	2300      	movs	r3, #0
 }
 80009ea:	4618      	mov	r0, r3
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}

080009f2 <mpu6050_setSampleRateDiv>:
void mpu6050_setSampleRateDiv(uint8_t divisor)
{
 80009f2:	b580      	push	{r7, lr}
 80009f4:	b082      	sub	sp, #8
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	4603      	mov	r3, r0
 80009fa:	71fb      	strb	r3, [r7, #7]
	mpu6050_write_reg(SMPRT_DIV ,&divisor , 1);
 80009fc:	1dfb      	adds	r3, r7, #7
 80009fe:	2201      	movs	r2, #1
 8000a00:	4619      	mov	r1, r3
 8000a02:	2019      	movs	r0, #25
 8000a04:	f7ff fe42 	bl	800068c <mpu6050_write_reg>
}
 8000a08:	bf00      	nop
 8000a0a:	3708      	adds	r7, #8
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <mpu6050_setFilterBandWidth>:
void mpu6050_setFilterBandWidth(band_width_e band_width)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	71fb      	strb	r3, [r7, #7]
	mpu6050_write_reg(CONFIG,(uint8_t *)&band_width,1);
 8000a1a:	1dfb      	adds	r3, r7, #7
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	4619      	mov	r1, r3
 8000a20:	201a      	movs	r0, #26
 8000a22:	f7ff fe33 	bl	800068c <mpu6050_write_reg>
}
 8000a26:	bf00      	nop
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}

08000a2e <mpu6050_gyroFSConfig>:
void mpu6050_gyroFSConfig(gyro_fs_sel_e gyro_fs_sel)
{
 8000a2e:	b580      	push	{r7, lr}
 8000a30:	b082      	sub	sp, #8
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	4603      	mov	r3, r0
 8000a36:	71fb      	strb	r3, [r7, #7]
	mpu6050_write_reg(GYRO_CONFIG,(uint8_t *)&gyro_fs_sel,1);
 8000a38:	1dfb      	adds	r3, r7, #7
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	201b      	movs	r0, #27
 8000a40:	f7ff fe24 	bl	800068c <mpu6050_write_reg>
}
 8000a44:	bf00      	nop
 8000a46:	3708      	adds	r7, #8
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <mpu6050_accFSConfig>:
void mpu6050_accFSConfig(acc_fs_sel_e acc_fs_sel)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4603      	mov	r3, r0
 8000a54:	71fb      	strb	r3, [r7, #7]
	mpu6050_write_reg(ACCEL_CONFIG,(uint8_t *)&acc_fs_sel,1);
 8000a56:	1dfb      	adds	r3, r7, #7
 8000a58:	2201      	movs	r2, #1
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	201c      	movs	r0, #28
 8000a5e:	f7ff fe15 	bl	800068c <mpu6050_write_reg>
}
 8000a62:	bf00      	nop
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}

08000a6a <mpu6050_init>:
MPU6050_Status_e mpu6050_init(mpu6050_config_t *mpu6050_config)
{
 8000a6a:	b580      	push	{r7, lr}
 8000a6c:	b084      	sub	sp, #16
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	6078      	str	r0, [r7, #4]
	/*GPIO configuration*/
    gpio_init();
 8000a72:	f7ff fdc9 	bl	8000608 <gpio_init>
	/*I2C Initialization*/
	i2c_init();
 8000a76:	f7ff fd83 	bl	8000580 <i2c_init>
	/*****************************************************
	 *             MPU6050 configuration                 *
	 *****************************************************/
	/*Setting Sample Rate divider*/
	 mpu6050_setSampleRateDiv(mpu6050_config -> sample_rate_divider);
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f7ff ffb7 	bl	80009f2 <mpu6050_setSampleRateDiv>
	/*Setting low pass filter bandwidth*/
	 mpu6050_setFilterBandWidth(mpu6050_config -> band_width);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	785b      	ldrb	r3, [r3, #1]
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f7ff ffc1 	bl	8000a10 <mpu6050_setFilterBandWidth>
    /*Setting accelerometer and gyroscope full scale*/
	 mpu6050_gyroFSConfig(mpu6050_config -> gyro_fs_sel);
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	789b      	ldrb	r3, [r3, #2]
 8000a92:	4618      	mov	r0, r3
 8000a94:	f7ff ffcb 	bl	8000a2e <mpu6050_gyroFSConfig>
	 mpu6050_accFSConfig(mpu6050_config ->  acc_fs_sel);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	78db      	ldrb	r3, [r3, #3]
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff ffd5 	bl	8000a4c <mpu6050_accFSConfig>
	 /*Setting MPU6050 sensitivity based on the full scale values*/
	 mpu6050_set_sensitivity(mpu6050_config);
 8000aa2:	6878      	ldr	r0, [r7, #4]
 8000aa4:	f7ff fe36 	bl	8000714 <mpu6050_set_sensitivity>
    /*Setting MPU6050 Clock Source*/
	 mpu6050_write_reg(PWR_MGMT_1,(uint8_t *)mpu6050_config->mpu6050_clk_sel,1);
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	791b      	ldrb	r3, [r3, #4]
 8000aac:	2201      	movs	r2, #1
 8000aae:	4619      	mov	r1, r3
 8000ab0:	206b      	movs	r0, #107	@ 0x6b
 8000ab2:	f7ff fdeb 	bl	800068c <mpu6050_write_reg>
	 /*MPU6050 Calibration*/
	 /*Ensuring offsets are zero*/
	 mpu6050_config -> acc_x_offset  = 0;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	2200      	movs	r2, #0
 8000aba:	82da      	strh	r2, [r3, #22]
	 mpu6050_config -> acc_y_offset  = 0;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	2200      	movs	r2, #0
 8000ac0:	831a      	strh	r2, [r3, #24]
	 mpu6050_config -> acc_z_offset  = 0;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	835a      	strh	r2, [r3, #26]
	 mpu6050_config -> gyro_x_offset = 0;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	2200      	movs	r2, #0
 8000acc:	821a      	strh	r2, [r3, #16]
	 mpu6050_config -> gyro_y_offset = 0;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	825a      	strh	r2, [r3, #18]
	 mpu6050_config -> gyro_z_offset = 0;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	829a      	strh	r2, [r3, #20]
	 mpu6050_calibrate(mpu6050_config);
 8000ada:	6878      	ldr	r0, [r7, #4]
 8000adc:	f7ff fe70 	bl	80007c0 <mpu6050_calibrate>
	 /*Checking  communication with MPU6050 is correct*/
	 uint8_t dev_id;/*MPU6050 ID*/
	 mpu6050_read_reg(WHO_AM_I,&dev_id,1);
 8000ae0:	f107 030f 	add.w	r3, r7, #15
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	2075      	movs	r0, #117	@ 0x75
 8000aea:	f7ff fdf1 	bl	80006d0 <mpu6050_read_reg>
	 if(dev_id != MPU6050_ID)
 8000aee:	7bfb      	ldrb	r3, [r7, #15]
 8000af0:	2b68      	cmp	r3, #104	@ 0x68
 8000af2:	d001      	beq.n	8000af8 <mpu6050_init+0x8e>
	 {/*MPU6050 is not recognized*/
		 return MPU6050_ERROR;
 8000af4:	2301      	movs	r3, #1
 8000af6:	e000      	b.n	8000afa <mpu6050_init+0x90>
	 }
     return MPU6050_OK;
 8000af8:	2300      	movs	r3, #0
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3710      	adds	r7, #16
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
	...

08000b04 <main>:
static void MX_I2C3_Init(void);
static void MX_TIM1_Init(void);
static void MX_USART1_UART_Init(void);

int main(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  HAL_Init();
 8000b08:	f000 fde0 	bl	80016cc <HAL_Init>
  SystemClock_Config();
 8000b0c:	f000 f83e 	bl	8000b8c <SystemClock_Config>
  MX_GPIO_Init();
 8000b10:	f000 f974 	bl	8000dfc <MX_GPIO_Init>
  MX_CRC_Init();
 8000b14:	f000 f8a4 	bl	8000c60 <MX_CRC_Init>
  MX_I2C3_Init();
 8000b18:	f000 f8b6 	bl	8000c88 <MX_I2C3_Init>
  MX_TIM1_Init();
 8000b1c:	f000 f8f4 	bl	8000d08 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000b20:	f000 f942 	bl	8000da8 <MX_USART1_UART_Init>

  mpu6050_config.sample_rate_divider = 7;
 8000b24:	4b14      	ldr	r3, [pc, #80]	@ (8000b78 <main+0x74>)
 8000b26:	2207      	movs	r2, #7
 8000b28:	701a      	strb	r2, [r3, #0]
  mpu6050_config.band_width = BW_260_HZ ;
 8000b2a:	4b13      	ldr	r3, [pc, #76]	@ (8000b78 <main+0x74>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	705a      	strb	r2, [r3, #1]
  mpu6050_config.gyro_fs_sel = GYRO_FS_SEL_250DPS;
 8000b30:	4b11      	ldr	r3, [pc, #68]	@ (8000b78 <main+0x74>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	709a      	strb	r2, [r3, #2]
  mpu6050_config.acc_fs_sel = ACC_FS_SEL_2g;
 8000b36:	4b10      	ldr	r3, [pc, #64]	@ (8000b78 <main+0x74>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	70da      	strb	r2, [r3, #3]
  mpu6050_config.mpu6050_clk_sel = MPU6050_PLL_GYROX;
 8000b3c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b78 <main+0x74>)
 8000b3e:	2201      	movs	r2, #1
 8000b40:	711a      	strb	r2, [r3, #4]

  if(mpu6050_init(&mpu6050_config) != MPU6050_OK)
 8000b42:	480d      	ldr	r0, [pc, #52]	@ (8000b78 <main+0x74>)
 8000b44:	f7ff ff91 	bl	8000a6a <mpu6050_init>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d003      	beq.n	8000b56 <main+0x52>
  {
	 printf("Successfully initialized MPU6050 ");
 8000b4e:	480b      	ldr	r0, [pc, #44]	@ (8000b7c <main+0x78>)
 8000b50:	f003 fdf8 	bl	8004744 <iprintf>
 8000b54:	e002      	b.n	8000b5c <main+0x58>
  }
  else
  {
	  printf("Failed to  initialize MPU6050 ");
 8000b56:	480a      	ldr	r0, [pc, #40]	@ (8000b80 <main+0x7c>)
 8000b58:	f003 fdf4 	bl	8004744 <iprintf>
  }

  while (1)
  {
	  mpu6050_get_raw_data_array(data);
 8000b5c:	4809      	ldr	r0, [pc, #36]	@ (8000b84 <main+0x80>)
 8000b5e:	f7ff ff29 	bl	80009b4 <mpu6050_get_raw_data_array>
	  HAL_UART_Transmit(&huart1,data,sizeof(data),100);//sending 12 bytes of data to the computer
 8000b62:	2364      	movs	r3, #100	@ 0x64
 8000b64:	220c      	movs	r2, #12
 8000b66:	4907      	ldr	r1, [pc, #28]	@ (8000b84 <main+0x80>)
 8000b68:	4807      	ldr	r0, [pc, #28]	@ (8000b88 <main+0x84>)
 8000b6a:	f003 f96d 	bl	8003e48 <HAL_UART_Transmit>
	  HAL_Delay(100);
 8000b6e:	2064      	movs	r0, #100	@ 0x64
 8000b70:	f000 fe1e 	bl	80017b0 <HAL_Delay>
	  mpu6050_get_raw_data_array(data);
 8000b74:	bf00      	nop
 8000b76:	e7f1      	b.n	8000b5c <main+0x58>
 8000b78:	200001c4 	.word	0x200001c4
 8000b7c:	0800544c 	.word	0x0800544c
 8000b80:	08005470 	.word	0x08005470
 8000b84:	200001e0 	.word	0x200001e0
 8000b88:	2000017c 	.word	0x2000017c

08000b8c <SystemClock_Config>:
  }

}
void SystemClock_Config(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b094      	sub	sp, #80	@ 0x50
 8000b90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b92:	f107 0320 	add.w	r3, r7, #32
 8000b96:	2230      	movs	r2, #48	@ 0x30
 8000b98:	2100      	movs	r1, #0
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f003 fe27 	bl	80047ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ba0:	f107 030c 	add.w	r3, r7, #12
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	60da      	str	r2, [r3, #12]
 8000bae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60bb      	str	r3, [r7, #8]
 8000bb4:	4b28      	ldr	r3, [pc, #160]	@ (8000c58 <SystemClock_Config+0xcc>)
 8000bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bb8:	4a27      	ldr	r2, [pc, #156]	@ (8000c58 <SystemClock_Config+0xcc>)
 8000bba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bbe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bc0:	4b25      	ldr	r3, [pc, #148]	@ (8000c58 <SystemClock_Config+0xcc>)
 8000bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bc8:	60bb      	str	r3, [r7, #8]
 8000bca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000bcc:	2300      	movs	r3, #0
 8000bce:	607b      	str	r3, [r7, #4]
 8000bd0:	4b22      	ldr	r3, [pc, #136]	@ (8000c5c <SystemClock_Config+0xd0>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000bd8:	4a20      	ldr	r2, [pc, #128]	@ (8000c5c <SystemClock_Config+0xd0>)
 8000bda:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bde:	6013      	str	r3, [r2, #0]
 8000be0:	4b1e      	ldr	r3, [pc, #120]	@ (8000c5c <SystemClock_Config+0xd0>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000be8:	607b      	str	r3, [r7, #4]
 8000bea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bec:	2301      	movs	r3, #1
 8000bee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bf0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000bf4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bfa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000bfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c00:	2304      	movs	r3, #4
 8000c02:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000c04:	2348      	movs	r3, #72	@ 0x48
 8000c06:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000c0c:	2303      	movs	r3, #3
 8000c0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c10:	f107 0320 	add.w	r3, r7, #32
 8000c14:	4618      	mov	r0, r3
 8000c16:	f002 f957 	bl	8002ec8 <HAL_RCC_OscConfig>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000c20:	f000 fb22 	bl	8001268 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c24:	230f      	movs	r3, #15
 8000c26:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c30:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c34:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c36:	2300      	movs	r3, #0
 8000c38:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c3a:	f107 030c 	add.w	r3, r7, #12
 8000c3e:	2102      	movs	r1, #2
 8000c40:	4618      	mov	r0, r3
 8000c42:	f002 fbb9 	bl	80033b8 <HAL_RCC_ClockConfig>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000c4c:	f000 fb0c 	bl	8001268 <Error_Handler>
  }
}
 8000c50:	bf00      	nop
 8000c52:	3750      	adds	r7, #80	@ 0x50
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	40023800 	.word	0x40023800
 8000c5c:	40007000 	.word	0x40007000

08000c60 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000c64:	4b06      	ldr	r3, [pc, #24]	@ (8000c80 <MX_CRC_Init+0x20>)
 8000c66:	4a07      	ldr	r2, [pc, #28]	@ (8000c84 <MX_CRC_Init+0x24>)
 8000c68:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000c6a:	4805      	ldr	r0, [pc, #20]	@ (8000c80 <MX_CRC_Init+0x20>)
 8000c6c:	f000 fea9 	bl	80019c2 <HAL_CRC_Init>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000c76:	f000 faf7 	bl	8001268 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	200000d8 	.word	0x200000d8
 8000c84:	40023000 	.word	0x40023000

08000c88 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000c8c:	4b1b      	ldr	r3, [pc, #108]	@ (8000cfc <MX_I2C3_Init+0x74>)
 8000c8e:	4a1c      	ldr	r2, [pc, #112]	@ (8000d00 <MX_I2C3_Init+0x78>)
 8000c90:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000c92:	4b1a      	ldr	r3, [pc, #104]	@ (8000cfc <MX_I2C3_Init+0x74>)
 8000c94:	4a1b      	ldr	r2, [pc, #108]	@ (8000d04 <MX_I2C3_Init+0x7c>)
 8000c96:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c98:	4b18      	ldr	r3, [pc, #96]	@ (8000cfc <MX_I2C3_Init+0x74>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000c9e:	4b17      	ldr	r3, [pc, #92]	@ (8000cfc <MX_I2C3_Init+0x74>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ca4:	4b15      	ldr	r3, [pc, #84]	@ (8000cfc <MX_I2C3_Init+0x74>)
 8000ca6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000caa:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cac:	4b13      	ldr	r3, [pc, #76]	@ (8000cfc <MX_I2C3_Init+0x74>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000cb2:	4b12      	ldr	r3, [pc, #72]	@ (8000cfc <MX_I2C3_Init+0x74>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cb8:	4b10      	ldr	r3, [pc, #64]	@ (8000cfc <MX_I2C3_Init+0x74>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cbe:	4b0f      	ldr	r3, [pc, #60]	@ (8000cfc <MX_I2C3_Init+0x74>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000cc4:	480d      	ldr	r0, [pc, #52]	@ (8000cfc <MX_I2C3_Init+0x74>)
 8000cc6:	f001 f85f 	bl	8001d88 <HAL_I2C_Init>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000cd0:	f000 faca 	bl	8001268 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4809      	ldr	r0, [pc, #36]	@ (8000cfc <MX_I2C3_Init+0x74>)
 8000cd8:	f002 f87a 	bl	8002dd0 <HAL_I2CEx_ConfigAnalogFilter>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000ce2:	f000 fac1 	bl	8001268 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	4804      	ldr	r0, [pc, #16]	@ (8000cfc <MX_I2C3_Init+0x74>)
 8000cea:	f002 f8ad 	bl	8002e48 <HAL_I2CEx_ConfigDigitalFilter>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000cf4:	f000 fab8 	bl	8001268 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000cf8:	bf00      	nop
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	200000e0 	.word	0x200000e0
 8000d00:	40005c00 	.word	0x40005c00
 8000d04:	000186a0 	.word	0x000186a0

08000d08 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b086      	sub	sp, #24
 8000d0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d0e:	f107 0308 	add.w	r3, r7, #8
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
 8000d16:	605a      	str	r2, [r3, #4]
 8000d18:	609a      	str	r2, [r3, #8]
 8000d1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d1c:	463b      	mov	r3, r7
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d24:	4b1e      	ldr	r3, [pc, #120]	@ (8000da0 <MX_TIM1_Init+0x98>)
 8000d26:	4a1f      	ldr	r2, [pc, #124]	@ (8000da4 <MX_TIM1_Init+0x9c>)
 8000d28:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000d2a:	4b1d      	ldr	r3, [pc, #116]	@ (8000da0 <MX_TIM1_Init+0x98>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d30:	4b1b      	ldr	r3, [pc, #108]	@ (8000da0 <MX_TIM1_Init+0x98>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000d36:	4b1a      	ldr	r3, [pc, #104]	@ (8000da0 <MX_TIM1_Init+0x98>)
 8000d38:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d3c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d3e:	4b18      	ldr	r3, [pc, #96]	@ (8000da0 <MX_TIM1_Init+0x98>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d44:	4b16      	ldr	r3, [pc, #88]	@ (8000da0 <MX_TIM1_Init+0x98>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d4a:	4b15      	ldr	r3, [pc, #84]	@ (8000da0 <MX_TIM1_Init+0x98>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d50:	4813      	ldr	r0, [pc, #76]	@ (8000da0 <MX_TIM1_Init+0x98>)
 8000d52:	f002 fd51 	bl	80037f8 <HAL_TIM_Base_Init>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000d5c:	f000 fa84 	bl	8001268 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d60:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d64:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d66:	f107 0308 	add.w	r3, r7, #8
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	480c      	ldr	r0, [pc, #48]	@ (8000da0 <MX_TIM1_Init+0x98>)
 8000d6e:	f002 fd92 	bl	8003896 <HAL_TIM_ConfigClockSource>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000d78:	f000 fa76 	bl	8001268 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d80:	2300      	movs	r3, #0
 8000d82:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d84:	463b      	mov	r3, r7
 8000d86:	4619      	mov	r1, r3
 8000d88:	4805      	ldr	r0, [pc, #20]	@ (8000da0 <MX_TIM1_Init+0x98>)
 8000d8a:	f002 ff91 	bl	8003cb0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000d94:	f000 fa68 	bl	8001268 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000d98:	bf00      	nop
 8000d9a:	3718      	adds	r7, #24
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20000134 	.word	0x20000134
 8000da4:	40010000 	.word	0x40010000

08000da8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000dac:	4b11      	ldr	r3, [pc, #68]	@ (8000df4 <MX_USART1_UART_Init+0x4c>)
 8000dae:	4a12      	ldr	r2, [pc, #72]	@ (8000df8 <MX_USART1_UART_Init+0x50>)
 8000db0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000db2:	4b10      	ldr	r3, [pc, #64]	@ (8000df4 <MX_USART1_UART_Init+0x4c>)
 8000db4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000db8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000dba:	4b0e      	ldr	r3, [pc, #56]	@ (8000df4 <MX_USART1_UART_Init+0x4c>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000dc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000df4 <MX_USART1_UART_Init+0x4c>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000dc6:	4b0b      	ldr	r3, [pc, #44]	@ (8000df4 <MX_USART1_UART_Init+0x4c>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000dcc:	4b09      	ldr	r3, [pc, #36]	@ (8000df4 <MX_USART1_UART_Init+0x4c>)
 8000dce:	220c      	movs	r2, #12
 8000dd0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dd2:	4b08      	ldr	r3, [pc, #32]	@ (8000df4 <MX_USART1_UART_Init+0x4c>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dd8:	4b06      	ldr	r3, [pc, #24]	@ (8000df4 <MX_USART1_UART_Init+0x4c>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000dde:	4805      	ldr	r0, [pc, #20]	@ (8000df4 <MX_USART1_UART_Init+0x4c>)
 8000de0:	f002 ffe2 	bl	8003da8 <HAL_UART_Init>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000dea:	f000 fa3d 	bl	8001268 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	2000017c 	.word	0x2000017c
 8000df8:	40011000 	.word	0x40011000

08000dfc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b08e      	sub	sp, #56	@ 0x38
 8000e00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	605a      	str	r2, [r3, #4]
 8000e0c:	609a      	str	r2, [r3, #8]
 8000e0e:	60da      	str	r2, [r3, #12]
 8000e10:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e12:	2300      	movs	r3, #0
 8000e14:	623b      	str	r3, [r7, #32]
 8000e16:	4bb2      	ldr	r3, [pc, #712]	@ (80010e0 <MX_GPIO_Init+0x2e4>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1a:	4ab1      	ldr	r2, [pc, #708]	@ (80010e0 <MX_GPIO_Init+0x2e4>)
 8000e1c:	f043 0304 	orr.w	r3, r3, #4
 8000e20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e22:	4baf      	ldr	r3, [pc, #700]	@ (80010e0 <MX_GPIO_Init+0x2e4>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e26:	f003 0304 	and.w	r3, r3, #4
 8000e2a:	623b      	str	r3, [r7, #32]
 8000e2c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61fb      	str	r3, [r7, #28]
 8000e32:	4bab      	ldr	r3, [pc, #684]	@ (80010e0 <MX_GPIO_Init+0x2e4>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e36:	4aaa      	ldr	r2, [pc, #680]	@ (80010e0 <MX_GPIO_Init+0x2e4>)
 8000e38:	f043 0320 	orr.w	r3, r3, #32
 8000e3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e3e:	4ba8      	ldr	r3, [pc, #672]	@ (80010e0 <MX_GPIO_Init+0x2e4>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e42:	f003 0320 	and.w	r3, r3, #32
 8000e46:	61fb      	str	r3, [r7, #28]
 8000e48:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	61bb      	str	r3, [r7, #24]
 8000e4e:	4ba4      	ldr	r3, [pc, #656]	@ (80010e0 <MX_GPIO_Init+0x2e4>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e52:	4aa3      	ldr	r2, [pc, #652]	@ (80010e0 <MX_GPIO_Init+0x2e4>)
 8000e54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e5a:	4ba1      	ldr	r3, [pc, #644]	@ (80010e0 <MX_GPIO_Init+0x2e4>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e62:	61bb      	str	r3, [r7, #24]
 8000e64:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	617b      	str	r3, [r7, #20]
 8000e6a:	4b9d      	ldr	r3, [pc, #628]	@ (80010e0 <MX_GPIO_Init+0x2e4>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6e:	4a9c      	ldr	r2, [pc, #624]	@ (80010e0 <MX_GPIO_Init+0x2e4>)
 8000e70:	f043 0301 	orr.w	r3, r3, #1
 8000e74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e76:	4b9a      	ldr	r3, [pc, #616]	@ (80010e0 <MX_GPIO_Init+0x2e4>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7a:	f003 0301 	and.w	r3, r3, #1
 8000e7e:	617b      	str	r3, [r7, #20]
 8000e80:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	613b      	str	r3, [r7, #16]
 8000e86:	4b96      	ldr	r3, [pc, #600]	@ (80010e0 <MX_GPIO_Init+0x2e4>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8a:	4a95      	ldr	r2, [pc, #596]	@ (80010e0 <MX_GPIO_Init+0x2e4>)
 8000e8c:	f043 0302 	orr.w	r3, r3, #2
 8000e90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e92:	4b93      	ldr	r3, [pc, #588]	@ (80010e0 <MX_GPIO_Init+0x2e4>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e96:	f003 0302 	and.w	r3, r3, #2
 8000e9a:	613b      	str	r3, [r7, #16]
 8000e9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	60fb      	str	r3, [r7, #12]
 8000ea2:	4b8f      	ldr	r3, [pc, #572]	@ (80010e0 <MX_GPIO_Init+0x2e4>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea6:	4a8e      	ldr	r2, [pc, #568]	@ (80010e0 <MX_GPIO_Init+0x2e4>)
 8000ea8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000eac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eae:	4b8c      	ldr	r3, [pc, #560]	@ (80010e0 <MX_GPIO_Init+0x2e4>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000eb6:	60fb      	str	r3, [r7, #12]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	60bb      	str	r3, [r7, #8]
 8000ebe:	4b88      	ldr	r3, [pc, #544]	@ (80010e0 <MX_GPIO_Init+0x2e4>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec2:	4a87      	ldr	r2, [pc, #540]	@ (80010e0 <MX_GPIO_Init+0x2e4>)
 8000ec4:	f043 0310 	orr.w	r3, r3, #16
 8000ec8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eca:	4b85      	ldr	r3, [pc, #532]	@ (80010e0 <MX_GPIO_Init+0x2e4>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ece:	f003 0310 	and.w	r3, r3, #16
 8000ed2:	60bb      	str	r3, [r7, #8]
 8000ed4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	607b      	str	r3, [r7, #4]
 8000eda:	4b81      	ldr	r3, [pc, #516]	@ (80010e0 <MX_GPIO_Init+0x2e4>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ede:	4a80      	ldr	r2, [pc, #512]	@ (80010e0 <MX_GPIO_Init+0x2e4>)
 8000ee0:	f043 0308 	orr.w	r3, r3, #8
 8000ee4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ee6:	4b7e      	ldr	r3, [pc, #504]	@ (80010e0 <MX_GPIO_Init+0x2e4>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eea:	f003 0308 	and.w	r3, r3, #8
 8000eee:	607b      	str	r3, [r7, #4]
 8000ef0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	2116      	movs	r1, #22
 8000ef6:	487b      	ldr	r0, [pc, #492]	@ (80010e4 <MX_GPIO_Init+0x2e8>)
 8000ef8:	f000 ff2c 	bl	8001d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000efc:	2200      	movs	r2, #0
 8000efe:	2180      	movs	r1, #128	@ 0x80
 8000f00:	4879      	ldr	r0, [pc, #484]	@ (80010e8 <MX_GPIO_Init+0x2ec>)
 8000f02:	f000 ff27 	bl	8001d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000f06:	2200      	movs	r2, #0
 8000f08:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8000f0c:	4877      	ldr	r0, [pc, #476]	@ (80010ec <MX_GPIO_Init+0x2f0>)
 8000f0e:	f000 ff21 	bl	8001d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000f12:	2200      	movs	r2, #0
 8000f14:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8000f18:	4875      	ldr	r0, [pc, #468]	@ (80010f0 <MX_GPIO_Init+0x2f4>)
 8000f1a:	f000 ff1b 	bl	8001d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8000f1e:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8000f22:	627b      	str	r3, [r7, #36]	@ 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f24:	2302      	movs	r3, #2
 8000f26:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f30:	230c      	movs	r3, #12
 8000f32:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f38:	4619      	mov	r1, r3
 8000f3a:	486e      	ldr	r0, [pc, #440]	@ (80010f4 <MX_GPIO_Init+0x2f8>)
 8000f3c:	f000 fd5e 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI5_SCK_Pin SPI5_MISO_Pin SPI5_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8000f40:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8000f44:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f46:	2302      	movs	r3, #2
 8000f48:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000f52:	2305      	movs	r3, #5
 8000f54:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4865      	ldr	r0, [pc, #404]	@ (80010f4 <MX_GPIO_Init+0x2f8>)
 8000f5e:	f000 fd4d 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 8000f62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f66:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f70:	2300      	movs	r3, #0
 8000f72:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f74:	230e      	movs	r3, #14
 8000f76:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000f78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	485d      	ldr	r0, [pc, #372]	@ (80010f4 <MX_GPIO_Init+0x2f8>)
 8000f80:	f000 fd3c 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8000f84:	2301      	movs	r3, #1
 8000f86:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f90:	2303      	movs	r3, #3
 8000f92:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f94:	230c      	movs	r3, #12
 8000f96:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8000f98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4851      	ldr	r0, [pc, #324]	@ (80010e4 <MX_GPIO_Init+0x2e8>)
 8000fa0:	f000 fd2c 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000fa4:	2316      	movs	r3, #22
 8000fa6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fac:	2300      	movs	r3, #0
 8000fae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fb4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fb8:	4619      	mov	r1, r3
 8000fba:	484a      	ldr	r0, [pc, #296]	@ (80010e4 <MX_GPIO_Init+0x2e8>)
 8000fbc:	f000 fd1e 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000fc0:	f248 0307 	movw	r3, #32775	@ 0x8007
 8000fc4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000fc6:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000fca:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4844      	ldr	r0, [pc, #272]	@ (80010e8 <MX_GPIO_Init+0x2ec>)
 8000fd8:	f000 fd10 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin R4_Pin
                           R5_Pin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8000fdc:	f641 0358 	movw	r3, #6232	@ 0x1858
 8000fe0:	627b      	str	r3, [r7, #36]	@ 0x24
                          |R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fea:	2300      	movs	r3, #0
 8000fec:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000fee:	230e      	movs	r3, #14
 8000ff0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	483b      	ldr	r0, [pc, #236]	@ (80010e8 <MX_GPIO_Init+0x2ec>)
 8000ffa:	f000 fcff 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000ffe:	2380      	movs	r3, #128	@ 0x80
 8001000:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001002:	2301      	movs	r3, #1
 8001004:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100a:	2300      	movs	r3, #0
 800100c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 800100e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001012:	4619      	mov	r1, r3
 8001014:	4834      	ldr	r0, [pc, #208]	@ (80010e8 <MX_GPIO_Init+0x2ec>)
 8001016:	f000 fcf1 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 800101a:	2320      	movs	r3, #32
 800101c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800101e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001022:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8001028:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800102c:	4619      	mov	r1, r3
 800102e:	482d      	ldr	r0, [pc, #180]	@ (80010e4 <MX_GPIO_Init+0x2e8>)
 8001030:	f000 fce4 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001034:	2303      	movs	r3, #3
 8001036:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001038:	2302      	movs	r3, #2
 800103a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001040:	2300      	movs	r3, #0
 8001042:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001044:	2309      	movs	r3, #9
 8001046:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001048:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800104c:	4619      	mov	r1, r3
 800104e:	482a      	ldr	r0, [pc, #168]	@ (80010f8 <MX_GPIO_Init+0x2fc>)
 8001050:	f000 fcd4 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001054:	2304      	movs	r3, #4
 8001056:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001058:	2300      	movs	r3, #0
 800105a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105c:	2300      	movs	r3, #0
 800105e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001060:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001064:	4619      	mov	r1, r3
 8001066:	4824      	ldr	r0, [pc, #144]	@ (80010f8 <MX_GPIO_Init+0x2fc>)
 8001068:	f000 fcc8 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 800106c:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001070:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001072:	2302      	movs	r3, #2
 8001074:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	2300      	movs	r3, #0
 8001078:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800107a:	2303      	movs	r3, #3
 800107c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800107e:	230c      	movs	r3, #12
 8001080:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001082:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001086:	4619      	mov	r1, r3
 8001088:	4819      	ldr	r0, [pc, #100]	@ (80010f0 <MX_GPIO_Init+0x2f4>)
 800108a:	f000 fcb7 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 800108e:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001092:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001094:	2302      	movs	r3, #2
 8001096:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	2300      	movs	r3, #0
 800109a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800109c:	2303      	movs	r3, #3
 800109e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80010a0:	230c      	movs	r3, #12
 80010a2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010a8:	4619      	mov	r1, r3
 80010aa:	4814      	ldr	r0, [pc, #80]	@ (80010fc <MX_GPIO_Init+0x300>)
 80010ac:	f000 fca6 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80010b0:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80010b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b6:	2302      	movs	r3, #2
 80010b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	2300      	movs	r3, #0
 80010bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010be:	2300      	movs	r3, #0
 80010c0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010c2:	230e      	movs	r3, #14
 80010c4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010ca:	4619      	mov	r1, r3
 80010cc:	480a      	ldr	r0, [pc, #40]	@ (80010f8 <MX_GPIO_Init+0x2fc>)
 80010ce:	f000 fc95 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 80010d2:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 80010d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d8:	2302      	movs	r3, #2
 80010da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80010dc:	e010      	b.n	8001100 <MX_GPIO_Init+0x304>
 80010de:	bf00      	nop
 80010e0:	40023800 	.word	0x40023800
 80010e4:	40020800 	.word	0x40020800
 80010e8:	40020000 	.word	0x40020000
 80010ec:	40020c00 	.word	0x40020c00
 80010f0:	40021800 	.word	0x40021800
 80010f4:	40021400 	.word	0x40021400
 80010f8:	40020400 	.word	0x40020400
 80010fc:	40021000 	.word	0x40021000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	2300      	movs	r3, #0
 8001102:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001104:	2300      	movs	r3, #0
 8001106:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8001108:	230c      	movs	r3, #12
 800110a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800110c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001110:	4619      	mov	r1, r3
 8001112:	4851      	ldr	r0, [pc, #324]	@ (8001258 <MX_GPIO_Init+0x45c>)
 8001114:	f000 fc72 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8001118:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800111c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800111e:	2300      	movs	r3, #0
 8001120:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	2300      	movs	r3, #0
 8001124:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8001126:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800112a:	4619      	mov	r1, r3
 800112c:	484a      	ldr	r0, [pc, #296]	@ (8001258 <MX_GPIO_Init+0x45c>)
 800112e:	f000 fc65 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8001132:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8001136:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001138:	2302      	movs	r3, #2
 800113a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113c:	2300      	movs	r3, #0
 800113e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001140:	2303      	movs	r3, #3
 8001142:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001144:	230c      	movs	r3, #12
 8001146:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001148:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800114c:	4619      	mov	r1, r3
 800114e:	4843      	ldr	r0, [pc, #268]	@ (800125c <MX_GPIO_Init+0x460>)
 8001150:	f000 fc54 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8001154:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001158:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800115a:	2300      	movs	r3, #0
 800115c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115e:	2300      	movs	r3, #0
 8001160:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8001162:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001166:	4619      	mov	r1, r3
 8001168:	483c      	ldr	r0, [pc, #240]	@ (800125c <MX_GPIO_Init+0x460>)
 800116a:	f000 fc47 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 800116e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001172:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001174:	2301      	movs	r3, #1
 8001176:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117c:	2300      	movs	r3, #0
 800117e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001180:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001184:	4619      	mov	r1, r3
 8001186:	4835      	ldr	r0, [pc, #212]	@ (800125c <MX_GPIO_Init+0x460>)
 8001188:	f000 fc38 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 800118c:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8001190:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001192:	2302      	movs	r3, #2
 8001194:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	2300      	movs	r3, #0
 8001198:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119a:	2300      	movs	r3, #0
 800119c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800119e:	230e      	movs	r3, #14
 80011a0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011a6:	4619      	mov	r1, r3
 80011a8:	482d      	ldr	r0, [pc, #180]	@ (8001260 <MX_GPIO_Init+0x464>)
 80011aa:	f000 fc27 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pins : HSYNC_Pin G6_Pin R2_Pin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80011ae:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80011b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b4:	2302      	movs	r3, #2
 80011b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011bc:	2300      	movs	r3, #0
 80011be:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011c0:	230e      	movs	r3, #14
 80011c2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011c8:	4619      	mov	r1, r3
 80011ca:	4826      	ldr	r0, [pc, #152]	@ (8001264 <MX_GPIO_Init+0x468>)
 80011cc:	f000 fc16 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pins : G7_Pin B2_Pin */
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 80011d0:	2348      	movs	r3, #72	@ 0x48
 80011d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d4:	2302      	movs	r3, #2
 80011d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d8:	2300      	movs	r3, #0
 80011da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011dc:	2300      	movs	r3, #0
 80011de:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011e0:	230e      	movs	r3, #14
 80011e2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011e8:	4619      	mov	r1, r3
 80011ea:	481c      	ldr	r0, [pc, #112]	@ (800125c <MX_GPIO_Init+0x460>)
 80011ec:	f000 fc06 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pins : G3_Pin B4_Pin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80011f0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80011f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f6:	2302      	movs	r3, #2
 80011f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fa:	2300      	movs	r3, #0
 80011fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fe:	2300      	movs	r3, #0
 8001200:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001202:	2309      	movs	r3, #9
 8001204:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001206:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800120a:	4619      	mov	r1, r3
 800120c:	4814      	ldr	r0, [pc, #80]	@ (8001260 <MX_GPIO_Init+0x464>)
 800120e:	f000 fbf5 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8001212:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001216:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001218:	2301      	movs	r3, #1
 800121a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2300      	movs	r3, #0
 800121e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001220:	2300      	movs	r3, #0
 8001222:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001224:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001228:	4619      	mov	r1, r3
 800122a:	480d      	ldr	r0, [pc, #52]	@ (8001260 <MX_GPIO_Init+0x464>)
 800122c:	f000 fbe6 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001230:	2360      	movs	r3, #96	@ 0x60
 8001232:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001234:	2302      	movs	r3, #2
 8001236:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001238:	2300      	movs	r3, #0
 800123a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800123c:	2303      	movs	r3, #3
 800123e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001240:	230c      	movs	r3, #12
 8001242:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001244:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001248:	4619      	mov	r1, r3
 800124a:	4803      	ldr	r0, [pc, #12]	@ (8001258 <MX_GPIO_Init+0x45c>)
 800124c:	f000 fbd6 	bl	80019fc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001250:	bf00      	nop
 8001252:	3738      	adds	r7, #56	@ 0x38
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	40020400 	.word	0x40020400
 800125c:	40020c00 	.word	0x40020c00
 8001260:	40021800 	.word	0x40021800
 8001264:	40020800 	.word	0x40020800

08001268 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800126c:	b672      	cpsid	i
}
 800126e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001270:	bf00      	nop
 8001272:	e7fd      	b.n	8001270 <Error_Handler+0x8>

08001274 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	607b      	str	r3, [r7, #4]
 800127e:	4b10      	ldr	r3, [pc, #64]	@ (80012c0 <HAL_MspInit+0x4c>)
 8001280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001282:	4a0f      	ldr	r2, [pc, #60]	@ (80012c0 <HAL_MspInit+0x4c>)
 8001284:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001288:	6453      	str	r3, [r2, #68]	@ 0x44
 800128a:	4b0d      	ldr	r3, [pc, #52]	@ (80012c0 <HAL_MspInit+0x4c>)
 800128c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800128e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001292:	607b      	str	r3, [r7, #4]
 8001294:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	603b      	str	r3, [r7, #0]
 800129a:	4b09      	ldr	r3, [pc, #36]	@ (80012c0 <HAL_MspInit+0x4c>)
 800129c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800129e:	4a08      	ldr	r2, [pc, #32]	@ (80012c0 <HAL_MspInit+0x4c>)
 80012a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80012a6:	4b06      	ldr	r3, [pc, #24]	@ (80012c0 <HAL_MspInit+0x4c>)
 80012a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012ae:	603b      	str	r3, [r7, #0]
 80012b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012b2:	bf00      	nop
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	40023800 	.word	0x40023800

080012c4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a0b      	ldr	r2, [pc, #44]	@ (8001300 <HAL_CRC_MspInit+0x3c>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d10d      	bne.n	80012f2 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	60fb      	str	r3, [r7, #12]
 80012da:	4b0a      	ldr	r3, [pc, #40]	@ (8001304 <HAL_CRC_MspInit+0x40>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012de:	4a09      	ldr	r2, [pc, #36]	@ (8001304 <HAL_CRC_MspInit+0x40>)
 80012e0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80012e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012e6:	4b07      	ldr	r3, [pc, #28]	@ (8001304 <HAL_CRC_MspInit+0x40>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 80012f2:	bf00      	nop
 80012f4:	3714      	adds	r7, #20
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	40023000 	.word	0x40023000
 8001304:	40023800 	.word	0x40023800

08001308 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b08a      	sub	sp, #40	@ 0x28
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001310:	f107 0314 	add.w	r3, r7, #20
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a29      	ldr	r2, [pc, #164]	@ (80013cc <HAL_I2C_MspInit+0xc4>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d14b      	bne.n	80013c2 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	613b      	str	r3, [r7, #16]
 800132e:	4b28      	ldr	r3, [pc, #160]	@ (80013d0 <HAL_I2C_MspInit+0xc8>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001332:	4a27      	ldr	r2, [pc, #156]	@ (80013d0 <HAL_I2C_MspInit+0xc8>)
 8001334:	f043 0304 	orr.w	r3, r3, #4
 8001338:	6313      	str	r3, [r2, #48]	@ 0x30
 800133a:	4b25      	ldr	r3, [pc, #148]	@ (80013d0 <HAL_I2C_MspInit+0xc8>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133e:	f003 0304 	and.w	r3, r3, #4
 8001342:	613b      	str	r3, [r7, #16]
 8001344:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	4b21      	ldr	r3, [pc, #132]	@ (80013d0 <HAL_I2C_MspInit+0xc8>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800134e:	4a20      	ldr	r2, [pc, #128]	@ (80013d0 <HAL_I2C_MspInit+0xc8>)
 8001350:	f043 0301 	orr.w	r3, r3, #1
 8001354:	6313      	str	r3, [r2, #48]	@ 0x30
 8001356:	4b1e      	ldr	r3, [pc, #120]	@ (80013d0 <HAL_I2C_MspInit+0xc8>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001362:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001366:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001368:	2312      	movs	r3, #18
 800136a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001370:	2300      	movs	r3, #0
 8001372:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001374:	2304      	movs	r3, #4
 8001376:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001378:	f107 0314 	add.w	r3, r7, #20
 800137c:	4619      	mov	r1, r3
 800137e:	4815      	ldr	r0, [pc, #84]	@ (80013d4 <HAL_I2C_MspInit+0xcc>)
 8001380:	f000 fb3c 	bl	80019fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001384:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001388:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800138a:	2312      	movs	r3, #18
 800138c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001392:	2300      	movs	r3, #0
 8001394:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001396:	2304      	movs	r3, #4
 8001398:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800139a:	f107 0314 	add.w	r3, r7, #20
 800139e:	4619      	mov	r1, r3
 80013a0:	480d      	ldr	r0, [pc, #52]	@ (80013d8 <HAL_I2C_MspInit+0xd0>)
 80013a2:	f000 fb2b 	bl	80019fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	60bb      	str	r3, [r7, #8]
 80013aa:	4b09      	ldr	r3, [pc, #36]	@ (80013d0 <HAL_I2C_MspInit+0xc8>)
 80013ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ae:	4a08      	ldr	r2, [pc, #32]	@ (80013d0 <HAL_I2C_MspInit+0xc8>)
 80013b0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80013b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80013b6:	4b06      	ldr	r3, [pc, #24]	@ (80013d0 <HAL_I2C_MspInit+0xc8>)
 80013b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80013be:	60bb      	str	r3, [r7, #8]
 80013c0:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 80013c2:	bf00      	nop
 80013c4:	3728      	adds	r7, #40	@ 0x28
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40005c00 	.word	0x40005c00
 80013d0:	40023800 	.word	0x40023800
 80013d4:	40020800 	.word	0x40020800
 80013d8:	40020000 	.word	0x40020000

080013dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013dc:	b480      	push	{r7}
 80013de:	b085      	sub	sp, #20
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a0b      	ldr	r2, [pc, #44]	@ (8001418 <HAL_TIM_Base_MspInit+0x3c>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d10d      	bne.n	800140a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	60fb      	str	r3, [r7, #12]
 80013f2:	4b0a      	ldr	r3, [pc, #40]	@ (800141c <HAL_TIM_Base_MspInit+0x40>)
 80013f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013f6:	4a09      	ldr	r2, [pc, #36]	@ (800141c <HAL_TIM_Base_MspInit+0x40>)
 80013f8:	f043 0301 	orr.w	r3, r3, #1
 80013fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80013fe:	4b07      	ldr	r3, [pc, #28]	@ (800141c <HAL_TIM_Base_MspInit+0x40>)
 8001400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 800140a:	bf00      	nop
 800140c:	3714      	adds	r7, #20
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	40010000 	.word	0x40010000
 800141c:	40023800 	.word	0x40023800

08001420 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b08a      	sub	sp, #40	@ 0x28
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001428:	f107 0314 	add.w	r3, r7, #20
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	609a      	str	r2, [r3, #8]
 8001434:	60da      	str	r2, [r3, #12]
 8001436:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a19      	ldr	r2, [pc, #100]	@ (80014a4 <HAL_UART_MspInit+0x84>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d12c      	bne.n	800149c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	613b      	str	r3, [r7, #16]
 8001446:	4b18      	ldr	r3, [pc, #96]	@ (80014a8 <HAL_UART_MspInit+0x88>)
 8001448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800144a:	4a17      	ldr	r2, [pc, #92]	@ (80014a8 <HAL_UART_MspInit+0x88>)
 800144c:	f043 0310 	orr.w	r3, r3, #16
 8001450:	6453      	str	r3, [r2, #68]	@ 0x44
 8001452:	4b15      	ldr	r3, [pc, #84]	@ (80014a8 <HAL_UART_MspInit+0x88>)
 8001454:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001456:	f003 0310 	and.w	r3, r3, #16
 800145a:	613b      	str	r3, [r7, #16]
 800145c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	4b11      	ldr	r3, [pc, #68]	@ (80014a8 <HAL_UART_MspInit+0x88>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001466:	4a10      	ldr	r2, [pc, #64]	@ (80014a8 <HAL_UART_MspInit+0x88>)
 8001468:	f043 0301 	orr.w	r3, r3, #1
 800146c:	6313      	str	r3, [r2, #48]	@ 0x30
 800146e:	4b0e      	ldr	r3, [pc, #56]	@ (80014a8 <HAL_UART_MspInit+0x88>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800147a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800147e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001480:	2302      	movs	r3, #2
 8001482:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001488:	2303      	movs	r3, #3
 800148a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800148c:	2307      	movs	r3, #7
 800148e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001490:	f107 0314 	add.w	r3, r7, #20
 8001494:	4619      	mov	r1, r3
 8001496:	4805      	ldr	r0, [pc, #20]	@ (80014ac <HAL_UART_MspInit+0x8c>)
 8001498:	f000 fab0 	bl	80019fc <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800149c:	bf00      	nop
 800149e:	3728      	adds	r7, #40	@ 0x28
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	40011000 	.word	0x40011000
 80014a8:	40023800 	.word	0x40023800
 80014ac:	40020000 	.word	0x40020000

080014b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014b4:	bf00      	nop
 80014b6:	e7fd      	b.n	80014b4 <NMI_Handler+0x4>

080014b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014bc:	bf00      	nop
 80014be:	e7fd      	b.n	80014bc <HardFault_Handler+0x4>

080014c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014c4:	bf00      	nop
 80014c6:	e7fd      	b.n	80014c4 <MemManage_Handler+0x4>

080014c8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014cc:	bf00      	nop
 80014ce:	e7fd      	b.n	80014cc <BusFault_Handler+0x4>

080014d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014d4:	bf00      	nop
 80014d6:	e7fd      	b.n	80014d4 <UsageFault_Handler+0x4>

080014d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014dc:	bf00      	nop
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr

080014e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014e6:	b480      	push	{r7}
 80014e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014f8:	bf00      	nop
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr

08001502 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001506:	f000 f933 	bl	8001770 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}

0800150e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800150e:	b580      	push	{r7, lr}
 8001510:	b086      	sub	sp, #24
 8001512:	af00      	add	r7, sp, #0
 8001514:	60f8      	str	r0, [r7, #12]
 8001516:	60b9      	str	r1, [r7, #8]
 8001518:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800151a:	2300      	movs	r3, #0
 800151c:	617b      	str	r3, [r7, #20]
 800151e:	e00a      	b.n	8001536 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001520:	f3af 8000 	nop.w
 8001524:	4601      	mov	r1, r0
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	1c5a      	adds	r2, r3, #1
 800152a:	60ba      	str	r2, [r7, #8]
 800152c:	b2ca      	uxtb	r2, r1
 800152e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	3301      	adds	r3, #1
 8001534:	617b      	str	r3, [r7, #20]
 8001536:	697a      	ldr	r2, [r7, #20]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	429a      	cmp	r2, r3
 800153c:	dbf0      	blt.n	8001520 <_read+0x12>
  }

  return len;
 800153e:	687b      	ldr	r3, [r7, #4]
}
 8001540:	4618      	mov	r0, r3
 8001542:	3718      	adds	r7, #24
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}

08001548 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b086      	sub	sp, #24
 800154c:	af00      	add	r7, sp, #0
 800154e:	60f8      	str	r0, [r7, #12]
 8001550:	60b9      	str	r1, [r7, #8]
 8001552:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001554:	2300      	movs	r3, #0
 8001556:	617b      	str	r3, [r7, #20]
 8001558:	e009      	b.n	800156e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	1c5a      	adds	r2, r3, #1
 800155e:	60ba      	str	r2, [r7, #8]
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	4618      	mov	r0, r3
 8001564:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	3301      	adds	r3, #1
 800156c:	617b      	str	r3, [r7, #20]
 800156e:	697a      	ldr	r2, [r7, #20]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	429a      	cmp	r2, r3
 8001574:	dbf1      	blt.n	800155a <_write+0x12>
  }
  return len;
 8001576:	687b      	ldr	r3, [r7, #4]
}
 8001578:	4618      	mov	r0, r3
 800157a:	3718      	adds	r7, #24
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <_close>:

int _close(int file)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001588:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800158c:	4618      	mov	r0, r3
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015a8:	605a      	str	r2, [r3, #4]
  return 0;
 80015aa:	2300      	movs	r3, #0
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <_isatty>:

int _isatty(int file)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015c0:	2301      	movs	r3, #1
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr

080015ce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015ce:	b480      	push	{r7}
 80015d0:	b085      	sub	sp, #20
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	60f8      	str	r0, [r7, #12]
 80015d6:	60b9      	str	r1, [r7, #8]
 80015d8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015da:	2300      	movs	r3, #0
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3714      	adds	r7, #20
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr

080015e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b086      	sub	sp, #24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015f0:	4a14      	ldr	r2, [pc, #80]	@ (8001644 <_sbrk+0x5c>)
 80015f2:	4b15      	ldr	r3, [pc, #84]	@ (8001648 <_sbrk+0x60>)
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015fc:	4b13      	ldr	r3, [pc, #76]	@ (800164c <_sbrk+0x64>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d102      	bne.n	800160a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001604:	4b11      	ldr	r3, [pc, #68]	@ (800164c <_sbrk+0x64>)
 8001606:	4a12      	ldr	r2, [pc, #72]	@ (8001650 <_sbrk+0x68>)
 8001608:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800160a:	4b10      	ldr	r3, [pc, #64]	@ (800164c <_sbrk+0x64>)
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4413      	add	r3, r2
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	429a      	cmp	r2, r3
 8001616:	d207      	bcs.n	8001628 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001618:	f003 f938 	bl	800488c <__errno>
 800161c:	4603      	mov	r3, r0
 800161e:	220c      	movs	r2, #12
 8001620:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001622:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001626:	e009      	b.n	800163c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001628:	4b08      	ldr	r3, [pc, #32]	@ (800164c <_sbrk+0x64>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800162e:	4b07      	ldr	r3, [pc, #28]	@ (800164c <_sbrk+0x64>)
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4413      	add	r3, r2
 8001636:	4a05      	ldr	r2, [pc, #20]	@ (800164c <_sbrk+0x64>)
 8001638:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800163a:	68fb      	ldr	r3, [r7, #12]
}
 800163c:	4618      	mov	r0, r3
 800163e:	3718      	adds	r7, #24
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	20030000 	.word	0x20030000
 8001648:	00000400 	.word	0x00000400
 800164c:	200001ec 	.word	0x200001ec
 8001650:	20000340 	.word	0x20000340

08001654 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001658:	4b06      	ldr	r3, [pc, #24]	@ (8001674 <SystemInit+0x20>)
 800165a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800165e:	4a05      	ldr	r2, [pc, #20]	@ (8001674 <SystemInit+0x20>)
 8001660:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001664:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001668:	bf00      	nop
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	e000ed00 	.word	0xe000ed00

08001678 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001678:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016b0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800167c:	f7ff ffea 	bl	8001654 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001680:	480c      	ldr	r0, [pc, #48]	@ (80016b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001682:	490d      	ldr	r1, [pc, #52]	@ (80016b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001684:	4a0d      	ldr	r2, [pc, #52]	@ (80016bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001686:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001688:	e002      	b.n	8001690 <LoopCopyDataInit>

0800168a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800168a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800168c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800168e:	3304      	adds	r3, #4

08001690 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001690:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001692:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001694:	d3f9      	bcc.n	800168a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001696:	4a0a      	ldr	r2, [pc, #40]	@ (80016c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001698:	4c0a      	ldr	r4, [pc, #40]	@ (80016c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800169a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800169c:	e001      	b.n	80016a2 <LoopFillZerobss>

0800169e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800169e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016a0:	3204      	adds	r2, #4

080016a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016a4:	d3fb      	bcc.n	800169e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80016a6:	f003 f8f7 	bl	8004898 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016aa:	f7ff fa2b 	bl	8000b04 <main>
  bx  lr    
 80016ae:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80016b0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80016b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016b8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80016bc:	080054ec 	.word	0x080054ec
  ldr r2, =_sbss
 80016c0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80016c4:	20000340 	.word	0x20000340

080016c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016c8:	e7fe      	b.n	80016c8 <ADC_IRQHandler>
	...

080016cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016d0:	4b0e      	ldr	r3, [pc, #56]	@ (800170c <HAL_Init+0x40>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a0d      	ldr	r2, [pc, #52]	@ (800170c <HAL_Init+0x40>)
 80016d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016dc:	4b0b      	ldr	r3, [pc, #44]	@ (800170c <HAL_Init+0x40>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a0a      	ldr	r2, [pc, #40]	@ (800170c <HAL_Init+0x40>)
 80016e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80016e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016e8:	4b08      	ldr	r3, [pc, #32]	@ (800170c <HAL_Init+0x40>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a07      	ldr	r2, [pc, #28]	@ (800170c <HAL_Init+0x40>)
 80016ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016f4:	2003      	movs	r0, #3
 80016f6:	f000 f931 	bl	800195c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016fa:	200f      	movs	r0, #15
 80016fc:	f000 f808 	bl	8001710 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001700:	f7ff fdb8 	bl	8001274 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	40023c00 	.word	0x40023c00

08001710 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001718:	4b12      	ldr	r3, [pc, #72]	@ (8001764 <HAL_InitTick+0x54>)
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	4b12      	ldr	r3, [pc, #72]	@ (8001768 <HAL_InitTick+0x58>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	4619      	mov	r1, r3
 8001722:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001726:	fbb3 f3f1 	udiv	r3, r3, r1
 800172a:	fbb2 f3f3 	udiv	r3, r2, r3
 800172e:	4618      	mov	r0, r3
 8001730:	f000 f93b 	bl	80019aa <HAL_SYSTICK_Config>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e00e      	b.n	800175c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2b0f      	cmp	r3, #15
 8001742:	d80a      	bhi.n	800175a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001744:	2200      	movs	r2, #0
 8001746:	6879      	ldr	r1, [r7, #4]
 8001748:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800174c:	f000 f911 	bl	8001972 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001750:	4a06      	ldr	r2, [pc, #24]	@ (800176c <HAL_InitTick+0x5c>)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001756:	2300      	movs	r3, #0
 8001758:	e000      	b.n	800175c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
}
 800175c:	4618      	mov	r0, r3
 800175e:	3708      	adds	r7, #8
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	20000000 	.word	0x20000000
 8001768:	20000008 	.word	0x20000008
 800176c:	20000004 	.word	0x20000004

08001770 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001774:	4b06      	ldr	r3, [pc, #24]	@ (8001790 <HAL_IncTick+0x20>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	461a      	mov	r2, r3
 800177a:	4b06      	ldr	r3, [pc, #24]	@ (8001794 <HAL_IncTick+0x24>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4413      	add	r3, r2
 8001780:	4a04      	ldr	r2, [pc, #16]	@ (8001794 <HAL_IncTick+0x24>)
 8001782:	6013      	str	r3, [r2, #0]
}
 8001784:	bf00      	nop
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	20000008 	.word	0x20000008
 8001794:	200001f0 	.word	0x200001f0

08001798 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  return uwTick;
 800179c:	4b03      	ldr	r3, [pc, #12]	@ (80017ac <HAL_GetTick+0x14>)
 800179e:	681b      	ldr	r3, [r3, #0]
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	200001f0 	.word	0x200001f0

080017b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017b8:	f7ff ffee 	bl	8001798 <HAL_GetTick>
 80017bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80017c8:	d005      	beq.n	80017d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017ca:	4b0a      	ldr	r3, [pc, #40]	@ (80017f4 <HAL_Delay+0x44>)
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	461a      	mov	r2, r3
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	4413      	add	r3, r2
 80017d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017d6:	bf00      	nop
 80017d8:	f7ff ffde 	bl	8001798 <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	68fa      	ldr	r2, [r7, #12]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d8f7      	bhi.n	80017d8 <HAL_Delay+0x28>
  {
  }
}
 80017e8:	bf00      	nop
 80017ea:	bf00      	nop
 80017ec:	3710      	adds	r7, #16
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	20000008 	.word	0x20000008

080017f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b085      	sub	sp, #20
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f003 0307 	and.w	r3, r3, #7
 8001806:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001808:	4b0c      	ldr	r3, [pc, #48]	@ (800183c <__NVIC_SetPriorityGrouping+0x44>)
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800180e:	68ba      	ldr	r2, [r7, #8]
 8001810:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001814:	4013      	ands	r3, r2
 8001816:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001820:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001824:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001828:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800182a:	4a04      	ldr	r2, [pc, #16]	@ (800183c <__NVIC_SetPriorityGrouping+0x44>)
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	60d3      	str	r3, [r2, #12]
}
 8001830:	bf00      	nop
 8001832:	3714      	adds	r7, #20
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr
 800183c:	e000ed00 	.word	0xe000ed00

08001840 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001844:	4b04      	ldr	r3, [pc, #16]	@ (8001858 <__NVIC_GetPriorityGrouping+0x18>)
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	0a1b      	lsrs	r3, r3, #8
 800184a:	f003 0307 	and.w	r3, r3, #7
}
 800184e:	4618      	mov	r0, r3
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr
 8001858:	e000ed00 	.word	0xe000ed00

0800185c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	6039      	str	r1, [r7, #0]
 8001866:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001868:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186c:	2b00      	cmp	r3, #0
 800186e:	db0a      	blt.n	8001886 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	b2da      	uxtb	r2, r3
 8001874:	490c      	ldr	r1, [pc, #48]	@ (80018a8 <__NVIC_SetPriority+0x4c>)
 8001876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187a:	0112      	lsls	r2, r2, #4
 800187c:	b2d2      	uxtb	r2, r2
 800187e:	440b      	add	r3, r1
 8001880:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001884:	e00a      	b.n	800189c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	b2da      	uxtb	r2, r3
 800188a:	4908      	ldr	r1, [pc, #32]	@ (80018ac <__NVIC_SetPriority+0x50>)
 800188c:	79fb      	ldrb	r3, [r7, #7]
 800188e:	f003 030f 	and.w	r3, r3, #15
 8001892:	3b04      	subs	r3, #4
 8001894:	0112      	lsls	r2, r2, #4
 8001896:	b2d2      	uxtb	r2, r2
 8001898:	440b      	add	r3, r1
 800189a:	761a      	strb	r2, [r3, #24]
}
 800189c:	bf00      	nop
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	e000e100 	.word	0xe000e100
 80018ac:	e000ed00 	.word	0xe000ed00

080018b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b089      	sub	sp, #36	@ 0x24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	f003 0307 	and.w	r3, r3, #7
 80018c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	f1c3 0307 	rsb	r3, r3, #7
 80018ca:	2b04      	cmp	r3, #4
 80018cc:	bf28      	it	cs
 80018ce:	2304      	movcs	r3, #4
 80018d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	3304      	adds	r3, #4
 80018d6:	2b06      	cmp	r3, #6
 80018d8:	d902      	bls.n	80018e0 <NVIC_EncodePriority+0x30>
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	3b03      	subs	r3, #3
 80018de:	e000      	b.n	80018e2 <NVIC_EncodePriority+0x32>
 80018e0:	2300      	movs	r3, #0
 80018e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	fa02 f303 	lsl.w	r3, r2, r3
 80018ee:	43da      	mvns	r2, r3
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	401a      	ands	r2, r3
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018f8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001902:	43d9      	mvns	r1, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001908:	4313      	orrs	r3, r2
         );
}
 800190a:	4618      	mov	r0, r3
 800190c:	3724      	adds	r7, #36	@ 0x24
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
	...

08001918 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	3b01      	subs	r3, #1
 8001924:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001928:	d301      	bcc.n	800192e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800192a:	2301      	movs	r3, #1
 800192c:	e00f      	b.n	800194e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800192e:	4a0a      	ldr	r2, [pc, #40]	@ (8001958 <SysTick_Config+0x40>)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	3b01      	subs	r3, #1
 8001934:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001936:	210f      	movs	r1, #15
 8001938:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800193c:	f7ff ff8e 	bl	800185c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001940:	4b05      	ldr	r3, [pc, #20]	@ (8001958 <SysTick_Config+0x40>)
 8001942:	2200      	movs	r2, #0
 8001944:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001946:	4b04      	ldr	r3, [pc, #16]	@ (8001958 <SysTick_Config+0x40>)
 8001948:	2207      	movs	r2, #7
 800194a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800194c:	2300      	movs	r3, #0
}
 800194e:	4618      	mov	r0, r3
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	e000e010 	.word	0xe000e010

0800195c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f7ff ff47 	bl	80017f8 <__NVIC_SetPriorityGrouping>
}
 800196a:	bf00      	nop
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001972:	b580      	push	{r7, lr}
 8001974:	b086      	sub	sp, #24
 8001976:	af00      	add	r7, sp, #0
 8001978:	4603      	mov	r3, r0
 800197a:	60b9      	str	r1, [r7, #8]
 800197c:	607a      	str	r2, [r7, #4]
 800197e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001980:	2300      	movs	r3, #0
 8001982:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001984:	f7ff ff5c 	bl	8001840 <__NVIC_GetPriorityGrouping>
 8001988:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	68b9      	ldr	r1, [r7, #8]
 800198e:	6978      	ldr	r0, [r7, #20]
 8001990:	f7ff ff8e 	bl	80018b0 <NVIC_EncodePriority>
 8001994:	4602      	mov	r2, r0
 8001996:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800199a:	4611      	mov	r1, r2
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff ff5d 	bl	800185c <__NVIC_SetPriority>
}
 80019a2:	bf00      	nop
 80019a4:	3718      	adds	r7, #24
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b082      	sub	sp, #8
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f7ff ffb0 	bl	8001918 <SysTick_Config>
 80019b8:	4603      	mov	r3, r0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b082      	sub	sp, #8
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d101      	bne.n	80019d4 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e00e      	b.n	80019f2 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	795b      	ldrb	r3, [r3, #5]
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d105      	bne.n	80019ea <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2200      	movs	r2, #0
 80019e2:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f7ff fc6d 	bl	80012c4 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2201      	movs	r2, #1
 80019ee:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
	...

080019fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b089      	sub	sp, #36	@ 0x24
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a06:	2300      	movs	r3, #0
 8001a08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a12:	2300      	movs	r3, #0
 8001a14:	61fb      	str	r3, [r7, #28]
 8001a16:	e177      	b.n	8001d08 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a18:	2201      	movs	r2, #1
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	697a      	ldr	r2, [r7, #20]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a2c:	693a      	ldr	r2, [r7, #16]
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	f040 8166 	bne.w	8001d02 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f003 0303 	and.w	r3, r3, #3
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d005      	beq.n	8001a4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d130      	bne.n	8001ab0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	005b      	lsls	r3, r3, #1
 8001a58:	2203      	movs	r2, #3
 8001a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5e:	43db      	mvns	r3, r3
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	4013      	ands	r3, r2
 8001a64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	68da      	ldr	r2, [r3, #12]
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	005b      	lsls	r3, r3, #1
 8001a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	69ba      	ldr	r2, [r7, #24]
 8001a7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a84:	2201      	movs	r2, #1
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	43db      	mvns	r3, r3
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	4013      	ands	r3, r2
 8001a92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	091b      	lsrs	r3, r3, #4
 8001a9a:	f003 0201 	and.w	r2, r3, #1
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f003 0303 	and.w	r3, r3, #3
 8001ab8:	2b03      	cmp	r3, #3
 8001aba:	d017      	beq.n	8001aec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	2203      	movs	r2, #3
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	43db      	mvns	r3, r3
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	689a      	ldr	r2, [r3, #8]
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f003 0303 	and.w	r3, r3, #3
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d123      	bne.n	8001b40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	08da      	lsrs	r2, r3, #3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	3208      	adds	r2, #8
 8001b00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	f003 0307 	and.w	r3, r3, #7
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	220f      	movs	r2, #15
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	43db      	mvns	r3, r3
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	691a      	ldr	r2, [r3, #16]
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	f003 0307 	and.w	r3, r3, #7
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	08da      	lsrs	r2, r3, #3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	3208      	adds	r2, #8
 8001b3a:	69b9      	ldr	r1, [r7, #24]
 8001b3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	2203      	movs	r2, #3
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	43db      	mvns	r3, r3
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	4013      	ands	r3, r2
 8001b56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f003 0203 	and.w	r2, r3, #3
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	f000 80c0 	beq.w	8001d02 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b82:	2300      	movs	r3, #0
 8001b84:	60fb      	str	r3, [r7, #12]
 8001b86:	4b66      	ldr	r3, [pc, #408]	@ (8001d20 <HAL_GPIO_Init+0x324>)
 8001b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b8a:	4a65      	ldr	r2, [pc, #404]	@ (8001d20 <HAL_GPIO_Init+0x324>)
 8001b8c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b90:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b92:	4b63      	ldr	r3, [pc, #396]	@ (8001d20 <HAL_GPIO_Init+0x324>)
 8001b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b9a:	60fb      	str	r3, [r7, #12]
 8001b9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b9e:	4a61      	ldr	r2, [pc, #388]	@ (8001d24 <HAL_GPIO_Init+0x328>)
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	089b      	lsrs	r3, r3, #2
 8001ba4:	3302      	adds	r3, #2
 8001ba6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001baa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	f003 0303 	and.w	r3, r3, #3
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	220f      	movs	r2, #15
 8001bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bba:	43db      	mvns	r3, r3
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4a58      	ldr	r2, [pc, #352]	@ (8001d28 <HAL_GPIO_Init+0x32c>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d037      	beq.n	8001c3a <HAL_GPIO_Init+0x23e>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a57      	ldr	r2, [pc, #348]	@ (8001d2c <HAL_GPIO_Init+0x330>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d031      	beq.n	8001c36 <HAL_GPIO_Init+0x23a>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a56      	ldr	r2, [pc, #344]	@ (8001d30 <HAL_GPIO_Init+0x334>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d02b      	beq.n	8001c32 <HAL_GPIO_Init+0x236>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a55      	ldr	r2, [pc, #340]	@ (8001d34 <HAL_GPIO_Init+0x338>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d025      	beq.n	8001c2e <HAL_GPIO_Init+0x232>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a54      	ldr	r2, [pc, #336]	@ (8001d38 <HAL_GPIO_Init+0x33c>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d01f      	beq.n	8001c2a <HAL_GPIO_Init+0x22e>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a53      	ldr	r2, [pc, #332]	@ (8001d3c <HAL_GPIO_Init+0x340>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d019      	beq.n	8001c26 <HAL_GPIO_Init+0x22a>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a52      	ldr	r2, [pc, #328]	@ (8001d40 <HAL_GPIO_Init+0x344>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d013      	beq.n	8001c22 <HAL_GPIO_Init+0x226>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a51      	ldr	r2, [pc, #324]	@ (8001d44 <HAL_GPIO_Init+0x348>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d00d      	beq.n	8001c1e <HAL_GPIO_Init+0x222>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a50      	ldr	r2, [pc, #320]	@ (8001d48 <HAL_GPIO_Init+0x34c>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d007      	beq.n	8001c1a <HAL_GPIO_Init+0x21e>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a4f      	ldr	r2, [pc, #316]	@ (8001d4c <HAL_GPIO_Init+0x350>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d101      	bne.n	8001c16 <HAL_GPIO_Init+0x21a>
 8001c12:	2309      	movs	r3, #9
 8001c14:	e012      	b.n	8001c3c <HAL_GPIO_Init+0x240>
 8001c16:	230a      	movs	r3, #10
 8001c18:	e010      	b.n	8001c3c <HAL_GPIO_Init+0x240>
 8001c1a:	2308      	movs	r3, #8
 8001c1c:	e00e      	b.n	8001c3c <HAL_GPIO_Init+0x240>
 8001c1e:	2307      	movs	r3, #7
 8001c20:	e00c      	b.n	8001c3c <HAL_GPIO_Init+0x240>
 8001c22:	2306      	movs	r3, #6
 8001c24:	e00a      	b.n	8001c3c <HAL_GPIO_Init+0x240>
 8001c26:	2305      	movs	r3, #5
 8001c28:	e008      	b.n	8001c3c <HAL_GPIO_Init+0x240>
 8001c2a:	2304      	movs	r3, #4
 8001c2c:	e006      	b.n	8001c3c <HAL_GPIO_Init+0x240>
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e004      	b.n	8001c3c <HAL_GPIO_Init+0x240>
 8001c32:	2302      	movs	r3, #2
 8001c34:	e002      	b.n	8001c3c <HAL_GPIO_Init+0x240>
 8001c36:	2301      	movs	r3, #1
 8001c38:	e000      	b.n	8001c3c <HAL_GPIO_Init+0x240>
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	69fa      	ldr	r2, [r7, #28]
 8001c3e:	f002 0203 	and.w	r2, r2, #3
 8001c42:	0092      	lsls	r2, r2, #2
 8001c44:	4093      	lsls	r3, r2
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c4c:	4935      	ldr	r1, [pc, #212]	@ (8001d24 <HAL_GPIO_Init+0x328>)
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	089b      	lsrs	r3, r3, #2
 8001c52:	3302      	adds	r3, #2
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c5a:	4b3d      	ldr	r3, [pc, #244]	@ (8001d50 <HAL_GPIO_Init+0x354>)
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	43db      	mvns	r3, r3
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	4013      	ands	r3, r2
 8001c68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d003      	beq.n	8001c7e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001c76:	69ba      	ldr	r2, [r7, #24]
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c7e:	4a34      	ldr	r2, [pc, #208]	@ (8001d50 <HAL_GPIO_Init+0x354>)
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c84:	4b32      	ldr	r3, [pc, #200]	@ (8001d50 <HAL_GPIO_Init+0x354>)
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	43db      	mvns	r3, r3
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	4013      	ands	r3, r2
 8001c92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d003      	beq.n	8001ca8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ca8:	4a29      	ldr	r2, [pc, #164]	@ (8001d50 <HAL_GPIO_Init+0x354>)
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cae:	4b28      	ldr	r3, [pc, #160]	@ (8001d50 <HAL_GPIO_Init+0x354>)
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	43db      	mvns	r3, r3
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	4013      	ands	r3, r2
 8001cbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d003      	beq.n	8001cd2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001cca:	69ba      	ldr	r2, [r7, #24]
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cd2:	4a1f      	ldr	r2, [pc, #124]	@ (8001d50 <HAL_GPIO_Init+0x354>)
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cd8:	4b1d      	ldr	r3, [pc, #116]	@ (8001d50 <HAL_GPIO_Init+0x354>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d003      	beq.n	8001cfc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cfc:	4a14      	ldr	r2, [pc, #80]	@ (8001d50 <HAL_GPIO_Init+0x354>)
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	3301      	adds	r3, #1
 8001d06:	61fb      	str	r3, [r7, #28]
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	2b0f      	cmp	r3, #15
 8001d0c:	f67f ae84 	bls.w	8001a18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d10:	bf00      	nop
 8001d12:	bf00      	nop
 8001d14:	3724      	adds	r7, #36	@ 0x24
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	40023800 	.word	0x40023800
 8001d24:	40013800 	.word	0x40013800
 8001d28:	40020000 	.word	0x40020000
 8001d2c:	40020400 	.word	0x40020400
 8001d30:	40020800 	.word	0x40020800
 8001d34:	40020c00 	.word	0x40020c00
 8001d38:	40021000 	.word	0x40021000
 8001d3c:	40021400 	.word	0x40021400
 8001d40:	40021800 	.word	0x40021800
 8001d44:	40021c00 	.word	0x40021c00
 8001d48:	40022000 	.word	0x40022000
 8001d4c:	40022400 	.word	0x40022400
 8001d50:	40013c00 	.word	0x40013c00

08001d54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	807b      	strh	r3, [r7, #2]
 8001d60:	4613      	mov	r3, r2
 8001d62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d64:	787b      	ldrb	r3, [r7, #1]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d003      	beq.n	8001d72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d6a:	887a      	ldrh	r2, [r7, #2]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d70:	e003      	b.n	8001d7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d72:	887b      	ldrh	r3, [r7, #2]
 8001d74:	041a      	lsls	r2, r3, #16
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	619a      	str	r2, [r3, #24]
}
 8001d7a:	bf00      	nop
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
	...

08001d88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d101      	bne.n	8001d9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e12b      	b.n	8001ff2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d106      	bne.n	8001db4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f7ff faaa 	bl	8001308 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2224      	movs	r2, #36	@ 0x24
 8001db8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f022 0201 	bic.w	r2, r2, #1
 8001dca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001dda:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001dea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001dec:	f001 fcdc 	bl	80037a8 <HAL_RCC_GetPCLK1Freq>
 8001df0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	4a81      	ldr	r2, [pc, #516]	@ (8001ffc <HAL_I2C_Init+0x274>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d807      	bhi.n	8001e0c <HAL_I2C_Init+0x84>
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	4a80      	ldr	r2, [pc, #512]	@ (8002000 <HAL_I2C_Init+0x278>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	bf94      	ite	ls
 8001e04:	2301      	movls	r3, #1
 8001e06:	2300      	movhi	r3, #0
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	e006      	b.n	8001e1a <HAL_I2C_Init+0x92>
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	4a7d      	ldr	r2, [pc, #500]	@ (8002004 <HAL_I2C_Init+0x27c>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	bf94      	ite	ls
 8001e14:	2301      	movls	r3, #1
 8001e16:	2300      	movhi	r3, #0
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e0e7      	b.n	8001ff2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	4a78      	ldr	r2, [pc, #480]	@ (8002008 <HAL_I2C_Init+0x280>)
 8001e26:	fba2 2303 	umull	r2, r3, r2, r3
 8001e2a:	0c9b      	lsrs	r3, r3, #18
 8001e2c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	68ba      	ldr	r2, [r7, #8]
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	6a1b      	ldr	r3, [r3, #32]
 8001e48:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	4a6a      	ldr	r2, [pc, #424]	@ (8001ffc <HAL_I2C_Init+0x274>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d802      	bhi.n	8001e5c <HAL_I2C_Init+0xd4>
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	3301      	adds	r3, #1
 8001e5a:	e009      	b.n	8001e70 <HAL_I2C_Init+0xe8>
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001e62:	fb02 f303 	mul.w	r3, r2, r3
 8001e66:	4a69      	ldr	r2, [pc, #420]	@ (800200c <HAL_I2C_Init+0x284>)
 8001e68:	fba2 2303 	umull	r2, r3, r2, r3
 8001e6c:	099b      	lsrs	r3, r3, #6
 8001e6e:	3301      	adds	r3, #1
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	6812      	ldr	r2, [r2, #0]
 8001e74:	430b      	orrs	r3, r1
 8001e76:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	69db      	ldr	r3, [r3, #28]
 8001e7e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001e82:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	495c      	ldr	r1, [pc, #368]	@ (8001ffc <HAL_I2C_Init+0x274>)
 8001e8c:	428b      	cmp	r3, r1
 8001e8e:	d819      	bhi.n	8001ec4 <HAL_I2C_Init+0x13c>
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	1e59      	subs	r1, r3, #1
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e9e:	1c59      	adds	r1, r3, #1
 8001ea0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001ea4:	400b      	ands	r3, r1
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d00a      	beq.n	8001ec0 <HAL_I2C_Init+0x138>
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	1e59      	subs	r1, r3, #1
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001eb8:	3301      	adds	r3, #1
 8001eba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ebe:	e051      	b.n	8001f64 <HAL_I2C_Init+0x1dc>
 8001ec0:	2304      	movs	r3, #4
 8001ec2:	e04f      	b.n	8001f64 <HAL_I2C_Init+0x1dc>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d111      	bne.n	8001ef0 <HAL_I2C_Init+0x168>
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	1e58      	subs	r0, r3, #1
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6859      	ldr	r1, [r3, #4]
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	440b      	add	r3, r1
 8001eda:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ede:	3301      	adds	r3, #1
 8001ee0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	bf0c      	ite	eq
 8001ee8:	2301      	moveq	r3, #1
 8001eea:	2300      	movne	r3, #0
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	e012      	b.n	8001f16 <HAL_I2C_Init+0x18e>
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	1e58      	subs	r0, r3, #1
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6859      	ldr	r1, [r3, #4]
 8001ef8:	460b      	mov	r3, r1
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	440b      	add	r3, r1
 8001efe:	0099      	lsls	r1, r3, #2
 8001f00:	440b      	add	r3, r1
 8001f02:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f06:	3301      	adds	r3, #1
 8001f08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	bf0c      	ite	eq
 8001f10:	2301      	moveq	r3, #1
 8001f12:	2300      	movne	r3, #0
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <HAL_I2C_Init+0x196>
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e022      	b.n	8001f64 <HAL_I2C_Init+0x1dc>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d10e      	bne.n	8001f44 <HAL_I2C_Init+0x1bc>
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	1e58      	subs	r0, r3, #1
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6859      	ldr	r1, [r3, #4]
 8001f2e:	460b      	mov	r3, r1
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	440b      	add	r3, r1
 8001f34:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f38:	3301      	adds	r3, #1
 8001f3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f42:	e00f      	b.n	8001f64 <HAL_I2C_Init+0x1dc>
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	1e58      	subs	r0, r3, #1
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6859      	ldr	r1, [r3, #4]
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	440b      	add	r3, r1
 8001f52:	0099      	lsls	r1, r3, #2
 8001f54:	440b      	add	r3, r1
 8001f56:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f60:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001f64:	6879      	ldr	r1, [r7, #4]
 8001f66:	6809      	ldr	r1, [r1, #0]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	69da      	ldr	r2, [r3, #28]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a1b      	ldr	r3, [r3, #32]
 8001f7e:	431a      	orrs	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	430a      	orrs	r2, r1
 8001f86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001f92:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	6911      	ldr	r1, [r2, #16]
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	68d2      	ldr	r2, [r2, #12]
 8001f9e:	4311      	orrs	r1, r2
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	6812      	ldr	r2, [r2, #0]
 8001fa4:	430b      	orrs	r3, r1
 8001fa6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	695a      	ldr	r2, [r3, #20]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	699b      	ldr	r3, [r3, #24]
 8001fba:	431a      	orrs	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	430a      	orrs	r2, r1
 8001fc2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f042 0201 	orr.w	r2, r2, #1
 8001fd2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2220      	movs	r2, #32
 8001fde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2200      	movs	r2, #0
 8001fec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3710      	adds	r7, #16
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	000186a0 	.word	0x000186a0
 8002000:	001e847f 	.word	0x001e847f
 8002004:	003d08ff 	.word	0x003d08ff
 8002008:	431bde83 	.word	0x431bde83
 800200c:	10624dd3 	.word	0x10624dd3

08002010 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b088      	sub	sp, #32
 8002014:	af02      	add	r7, sp, #8
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	4608      	mov	r0, r1
 800201a:	4611      	mov	r1, r2
 800201c:	461a      	mov	r2, r3
 800201e:	4603      	mov	r3, r0
 8002020:	817b      	strh	r3, [r7, #10]
 8002022:	460b      	mov	r3, r1
 8002024:	813b      	strh	r3, [r7, #8]
 8002026:	4613      	mov	r3, r2
 8002028:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800202a:	f7ff fbb5 	bl	8001798 <HAL_GetTick>
 800202e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002036:	b2db      	uxtb	r3, r3
 8002038:	2b20      	cmp	r3, #32
 800203a:	f040 80d9 	bne.w	80021f0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	9300      	str	r3, [sp, #0]
 8002042:	2319      	movs	r3, #25
 8002044:	2201      	movs	r2, #1
 8002046:	496d      	ldr	r1, [pc, #436]	@ (80021fc <HAL_I2C_Mem_Write+0x1ec>)
 8002048:	68f8      	ldr	r0, [r7, #12]
 800204a:	f000 fc8b 	bl	8002964 <I2C_WaitOnFlagUntilTimeout>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002054:	2302      	movs	r3, #2
 8002056:	e0cc      	b.n	80021f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800205e:	2b01      	cmp	r3, #1
 8002060:	d101      	bne.n	8002066 <HAL_I2C_Mem_Write+0x56>
 8002062:	2302      	movs	r3, #2
 8002064:	e0c5      	b.n	80021f2 <HAL_I2C_Mem_Write+0x1e2>
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2201      	movs	r2, #1
 800206a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0301 	and.w	r3, r3, #1
 8002078:	2b01      	cmp	r3, #1
 800207a:	d007      	beq.n	800208c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f042 0201 	orr.w	r2, r2, #1
 800208a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800209a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2221      	movs	r2, #33	@ 0x21
 80020a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2240      	movs	r2, #64	@ 0x40
 80020a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2200      	movs	r2, #0
 80020b0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	6a3a      	ldr	r2, [r7, #32]
 80020b6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80020bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020c2:	b29a      	uxth	r2, r3
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	4a4d      	ldr	r2, [pc, #308]	@ (8002200 <HAL_I2C_Mem_Write+0x1f0>)
 80020cc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80020ce:	88f8      	ldrh	r0, [r7, #6]
 80020d0:	893a      	ldrh	r2, [r7, #8]
 80020d2:	8979      	ldrh	r1, [r7, #10]
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	9301      	str	r3, [sp, #4]
 80020d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020da:	9300      	str	r3, [sp, #0]
 80020dc:	4603      	mov	r3, r0
 80020de:	68f8      	ldr	r0, [r7, #12]
 80020e0:	f000 fac2 	bl	8002668 <I2C_RequestMemoryWrite>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d052      	beq.n	8002190 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e081      	b.n	80021f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020ee:	697a      	ldr	r2, [r7, #20]
 80020f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80020f2:	68f8      	ldr	r0, [r7, #12]
 80020f4:	f000 fd50 	bl	8002b98 <I2C_WaitOnTXEFlagUntilTimeout>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d00d      	beq.n	800211a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002102:	2b04      	cmp	r3, #4
 8002104:	d107      	bne.n	8002116 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002114:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e06b      	b.n	80021f2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800211e:	781a      	ldrb	r2, [r3, #0]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800212a:	1c5a      	adds	r2, r3, #1
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002134:	3b01      	subs	r3, #1
 8002136:	b29a      	uxth	r2, r3
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002140:	b29b      	uxth	r3, r3
 8002142:	3b01      	subs	r3, #1
 8002144:	b29a      	uxth	r2, r3
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	695b      	ldr	r3, [r3, #20]
 8002150:	f003 0304 	and.w	r3, r3, #4
 8002154:	2b04      	cmp	r3, #4
 8002156:	d11b      	bne.n	8002190 <HAL_I2C_Mem_Write+0x180>
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800215c:	2b00      	cmp	r3, #0
 800215e:	d017      	beq.n	8002190 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002164:	781a      	ldrb	r2, [r3, #0]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002170:	1c5a      	adds	r2, r3, #1
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800217a:	3b01      	subs	r3, #1
 800217c:	b29a      	uxth	r2, r3
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002186:	b29b      	uxth	r3, r3
 8002188:	3b01      	subs	r3, #1
 800218a:	b29a      	uxth	r2, r3
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002194:	2b00      	cmp	r3, #0
 8002196:	d1aa      	bne.n	80020ee <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002198:	697a      	ldr	r2, [r7, #20]
 800219a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800219c:	68f8      	ldr	r0, [r7, #12]
 800219e:	f000 fd43 	bl	8002c28 <I2C_WaitOnBTFFlagUntilTimeout>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d00d      	beq.n	80021c4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ac:	2b04      	cmp	r3, #4
 80021ae:	d107      	bne.n	80021c0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021be:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e016      	b.n	80021f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2220      	movs	r2, #32
 80021d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2200      	movs	r2, #0
 80021e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2200      	movs	r2, #0
 80021e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80021ec:	2300      	movs	r3, #0
 80021ee:	e000      	b.n	80021f2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80021f0:	2302      	movs	r3, #2
  }
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3718      	adds	r7, #24
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	00100002 	.word	0x00100002
 8002200:	ffff0000 	.word	0xffff0000

08002204 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b08c      	sub	sp, #48	@ 0x30
 8002208:	af02      	add	r7, sp, #8
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	4608      	mov	r0, r1
 800220e:	4611      	mov	r1, r2
 8002210:	461a      	mov	r2, r3
 8002212:	4603      	mov	r3, r0
 8002214:	817b      	strh	r3, [r7, #10]
 8002216:	460b      	mov	r3, r1
 8002218:	813b      	strh	r3, [r7, #8]
 800221a:	4613      	mov	r3, r2
 800221c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800221e:	f7ff fabb 	bl	8001798 <HAL_GetTick>
 8002222:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800222a:	b2db      	uxtb	r3, r3
 800222c:	2b20      	cmp	r3, #32
 800222e:	f040 8214 	bne.w	800265a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002234:	9300      	str	r3, [sp, #0]
 8002236:	2319      	movs	r3, #25
 8002238:	2201      	movs	r2, #1
 800223a:	497b      	ldr	r1, [pc, #492]	@ (8002428 <HAL_I2C_Mem_Read+0x224>)
 800223c:	68f8      	ldr	r0, [r7, #12]
 800223e:	f000 fb91 	bl	8002964 <I2C_WaitOnFlagUntilTimeout>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d001      	beq.n	800224c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002248:	2302      	movs	r3, #2
 800224a:	e207      	b.n	800265c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002252:	2b01      	cmp	r3, #1
 8002254:	d101      	bne.n	800225a <HAL_I2C_Mem_Read+0x56>
 8002256:	2302      	movs	r3, #2
 8002258:	e200      	b.n	800265c <HAL_I2C_Mem_Read+0x458>
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2201      	movs	r2, #1
 800225e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0301 	and.w	r3, r3, #1
 800226c:	2b01      	cmp	r3, #1
 800226e:	d007      	beq.n	8002280 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f042 0201 	orr.w	r2, r2, #1
 800227e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800228e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2222      	movs	r2, #34	@ 0x22
 8002294:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2240      	movs	r2, #64	@ 0x40
 800229c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2200      	movs	r2, #0
 80022a4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80022aa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80022b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022b6:	b29a      	uxth	r2, r3
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	4a5b      	ldr	r2, [pc, #364]	@ (800242c <HAL_I2C_Mem_Read+0x228>)
 80022c0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80022c2:	88f8      	ldrh	r0, [r7, #6]
 80022c4:	893a      	ldrh	r2, [r7, #8]
 80022c6:	8979      	ldrh	r1, [r7, #10]
 80022c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ca:	9301      	str	r3, [sp, #4]
 80022cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022ce:	9300      	str	r3, [sp, #0]
 80022d0:	4603      	mov	r3, r0
 80022d2:	68f8      	ldr	r0, [r7, #12]
 80022d4:	f000 fa5e 	bl	8002794 <I2C_RequestMemoryRead>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e1bc      	b.n	800265c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d113      	bne.n	8002312 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022ea:	2300      	movs	r3, #0
 80022ec:	623b      	str	r3, [r7, #32]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	695b      	ldr	r3, [r3, #20]
 80022f4:	623b      	str	r3, [r7, #32]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	699b      	ldr	r3, [r3, #24]
 80022fc:	623b      	str	r3, [r7, #32]
 80022fe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800230e:	601a      	str	r2, [r3, #0]
 8002310:	e190      	b.n	8002634 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002316:	2b01      	cmp	r3, #1
 8002318:	d11b      	bne.n	8002352 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002328:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800232a:	2300      	movs	r3, #0
 800232c:	61fb      	str	r3, [r7, #28]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	695b      	ldr	r3, [r3, #20]
 8002334:	61fb      	str	r3, [r7, #28]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	699b      	ldr	r3, [r3, #24]
 800233c:	61fb      	str	r3, [r7, #28]
 800233e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800234e:	601a      	str	r2, [r3, #0]
 8002350:	e170      	b.n	8002634 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002356:	2b02      	cmp	r3, #2
 8002358:	d11b      	bne.n	8002392 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002368:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002378:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800237a:	2300      	movs	r3, #0
 800237c:	61bb      	str	r3, [r7, #24]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	695b      	ldr	r3, [r3, #20]
 8002384:	61bb      	str	r3, [r7, #24]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	699b      	ldr	r3, [r3, #24]
 800238c:	61bb      	str	r3, [r7, #24]
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	e150      	b.n	8002634 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002392:	2300      	movs	r3, #0
 8002394:	617b      	str	r3, [r7, #20]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	695b      	ldr	r3, [r3, #20]
 800239c:	617b      	str	r3, [r7, #20]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	617b      	str	r3, [r7, #20]
 80023a6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80023a8:	e144      	b.n	8002634 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023ae:	2b03      	cmp	r3, #3
 80023b0:	f200 80f1 	bhi.w	8002596 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d123      	bne.n	8002404 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023be:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80023c0:	68f8      	ldr	r0, [r7, #12]
 80023c2:	f000 fc79 	bl	8002cb8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d001      	beq.n	80023d0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e145      	b.n	800265c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	691a      	ldr	r2, [r3, #16]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023da:	b2d2      	uxtb	r2, r2
 80023dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023e2:	1c5a      	adds	r2, r3, #1
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023ec:	3b01      	subs	r3, #1
 80023ee:	b29a      	uxth	r2, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	3b01      	subs	r3, #1
 80023fc:	b29a      	uxth	r2, r3
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002402:	e117      	b.n	8002634 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002408:	2b02      	cmp	r3, #2
 800240a:	d14e      	bne.n	80024aa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800240c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800240e:	9300      	str	r3, [sp, #0]
 8002410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002412:	2200      	movs	r2, #0
 8002414:	4906      	ldr	r1, [pc, #24]	@ (8002430 <HAL_I2C_Mem_Read+0x22c>)
 8002416:	68f8      	ldr	r0, [r7, #12]
 8002418:	f000 faa4 	bl	8002964 <I2C_WaitOnFlagUntilTimeout>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d008      	beq.n	8002434 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e11a      	b.n	800265c <HAL_I2C_Mem_Read+0x458>
 8002426:	bf00      	nop
 8002428:	00100002 	.word	0x00100002
 800242c:	ffff0000 	.word	0xffff0000
 8002430:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002442:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	691a      	ldr	r2, [r3, #16]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800244e:	b2d2      	uxtb	r2, r2
 8002450:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002456:	1c5a      	adds	r2, r3, #1
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002460:	3b01      	subs	r3, #1
 8002462:	b29a      	uxth	r2, r3
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800246c:	b29b      	uxth	r3, r3
 800246e:	3b01      	subs	r3, #1
 8002470:	b29a      	uxth	r2, r3
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	691a      	ldr	r2, [r3, #16]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002480:	b2d2      	uxtb	r2, r2
 8002482:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002488:	1c5a      	adds	r2, r3, #1
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002492:	3b01      	subs	r3, #1
 8002494:	b29a      	uxth	r2, r3
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800249e:	b29b      	uxth	r3, r3
 80024a0:	3b01      	subs	r3, #1
 80024a2:	b29a      	uxth	r2, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80024a8:	e0c4      	b.n	8002634 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ac:	9300      	str	r3, [sp, #0]
 80024ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024b0:	2200      	movs	r2, #0
 80024b2:	496c      	ldr	r1, [pc, #432]	@ (8002664 <HAL_I2C_Mem_Read+0x460>)
 80024b4:	68f8      	ldr	r0, [r7, #12]
 80024b6:	f000 fa55 	bl	8002964 <I2C_WaitOnFlagUntilTimeout>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d001      	beq.n	80024c4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e0cb      	b.n	800265c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	691a      	ldr	r2, [r3, #16]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024de:	b2d2      	uxtb	r2, r2
 80024e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024e6:	1c5a      	adds	r2, r3, #1
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024f0:	3b01      	subs	r3, #1
 80024f2:	b29a      	uxth	r2, r3
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	3b01      	subs	r3, #1
 8002500:	b29a      	uxth	r2, r3
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002508:	9300      	str	r3, [sp, #0]
 800250a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800250c:	2200      	movs	r2, #0
 800250e:	4955      	ldr	r1, [pc, #340]	@ (8002664 <HAL_I2C_Mem_Read+0x460>)
 8002510:	68f8      	ldr	r0, [r7, #12]
 8002512:	f000 fa27 	bl	8002964 <I2C_WaitOnFlagUntilTimeout>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e09d      	b.n	800265c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800252e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	691a      	ldr	r2, [r3, #16]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800253a:	b2d2      	uxtb	r2, r2
 800253c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002542:	1c5a      	adds	r2, r3, #1
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800254c:	3b01      	subs	r3, #1
 800254e:	b29a      	uxth	r2, r3
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002558:	b29b      	uxth	r3, r3
 800255a:	3b01      	subs	r3, #1
 800255c:	b29a      	uxth	r2, r3
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	691a      	ldr	r2, [r3, #16]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800256c:	b2d2      	uxtb	r2, r2
 800256e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002574:	1c5a      	adds	r2, r3, #1
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800257e:	3b01      	subs	r3, #1
 8002580:	b29a      	uxth	r2, r3
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800258a:	b29b      	uxth	r3, r3
 800258c:	3b01      	subs	r3, #1
 800258e:	b29a      	uxth	r2, r3
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002594:	e04e      	b.n	8002634 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002596:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002598:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800259a:	68f8      	ldr	r0, [r7, #12]
 800259c:	f000 fb8c 	bl	8002cb8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e058      	b.n	800265c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	691a      	ldr	r2, [r3, #16]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025b4:	b2d2      	uxtb	r2, r2
 80025b6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025bc:	1c5a      	adds	r2, r3, #1
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025c6:	3b01      	subs	r3, #1
 80025c8:	b29a      	uxth	r2, r3
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	3b01      	subs	r3, #1
 80025d6:	b29a      	uxth	r2, r3
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	695b      	ldr	r3, [r3, #20]
 80025e2:	f003 0304 	and.w	r3, r3, #4
 80025e6:	2b04      	cmp	r3, #4
 80025e8:	d124      	bne.n	8002634 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025ee:	2b03      	cmp	r3, #3
 80025f0:	d107      	bne.n	8002602 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002600:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	691a      	ldr	r2, [r3, #16]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800260c:	b2d2      	uxtb	r2, r2
 800260e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002614:	1c5a      	adds	r2, r3, #1
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800261e:	3b01      	subs	r3, #1
 8002620:	b29a      	uxth	r2, r3
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800262a:	b29b      	uxth	r3, r3
 800262c:	3b01      	subs	r3, #1
 800262e:	b29a      	uxth	r2, r3
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002638:	2b00      	cmp	r3, #0
 800263a:	f47f aeb6 	bne.w	80023aa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2220      	movs	r2, #32
 8002642:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2200      	movs	r2, #0
 800264a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2200      	movs	r2, #0
 8002652:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002656:	2300      	movs	r3, #0
 8002658:	e000      	b.n	800265c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800265a:	2302      	movs	r3, #2
  }
}
 800265c:	4618      	mov	r0, r3
 800265e:	3728      	adds	r7, #40	@ 0x28
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	00010004 	.word	0x00010004

08002668 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b088      	sub	sp, #32
 800266c:	af02      	add	r7, sp, #8
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	4608      	mov	r0, r1
 8002672:	4611      	mov	r1, r2
 8002674:	461a      	mov	r2, r3
 8002676:	4603      	mov	r3, r0
 8002678:	817b      	strh	r3, [r7, #10]
 800267a:	460b      	mov	r3, r1
 800267c:	813b      	strh	r3, [r7, #8]
 800267e:	4613      	mov	r3, r2
 8002680:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002690:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002694:	9300      	str	r3, [sp, #0]
 8002696:	6a3b      	ldr	r3, [r7, #32]
 8002698:	2200      	movs	r2, #0
 800269a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800269e:	68f8      	ldr	r0, [r7, #12]
 80026a0:	f000 f960 	bl	8002964 <I2C_WaitOnFlagUntilTimeout>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d00d      	beq.n	80026c6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80026b8:	d103      	bne.n	80026c2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026c0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e05f      	b.n	8002786 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80026c6:	897b      	ldrh	r3, [r7, #10]
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	461a      	mov	r2, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80026d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d8:	6a3a      	ldr	r2, [r7, #32]
 80026da:	492d      	ldr	r1, [pc, #180]	@ (8002790 <I2C_RequestMemoryWrite+0x128>)
 80026dc:	68f8      	ldr	r0, [r7, #12]
 80026de:	f000 f9bb 	bl	8002a58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d001      	beq.n	80026ec <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e04c      	b.n	8002786 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026ec:	2300      	movs	r3, #0
 80026ee:	617b      	str	r3, [r7, #20]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	695b      	ldr	r3, [r3, #20]
 80026f6:	617b      	str	r3, [r7, #20]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	617b      	str	r3, [r7, #20]
 8002700:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002702:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002704:	6a39      	ldr	r1, [r7, #32]
 8002706:	68f8      	ldr	r0, [r7, #12]
 8002708:	f000 fa46 	bl	8002b98 <I2C_WaitOnTXEFlagUntilTimeout>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d00d      	beq.n	800272e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002716:	2b04      	cmp	r3, #4
 8002718:	d107      	bne.n	800272a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002728:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e02b      	b.n	8002786 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800272e:	88fb      	ldrh	r3, [r7, #6]
 8002730:	2b01      	cmp	r3, #1
 8002732:	d105      	bne.n	8002740 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002734:	893b      	ldrh	r3, [r7, #8]
 8002736:	b2da      	uxtb	r2, r3
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	611a      	str	r2, [r3, #16]
 800273e:	e021      	b.n	8002784 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002740:	893b      	ldrh	r3, [r7, #8]
 8002742:	0a1b      	lsrs	r3, r3, #8
 8002744:	b29b      	uxth	r3, r3
 8002746:	b2da      	uxtb	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800274e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002750:	6a39      	ldr	r1, [r7, #32]
 8002752:	68f8      	ldr	r0, [r7, #12]
 8002754:	f000 fa20 	bl	8002b98 <I2C_WaitOnTXEFlagUntilTimeout>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d00d      	beq.n	800277a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002762:	2b04      	cmp	r3, #4
 8002764:	d107      	bne.n	8002776 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002774:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e005      	b.n	8002786 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800277a:	893b      	ldrh	r3, [r7, #8]
 800277c:	b2da      	uxtb	r2, r3
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3718      	adds	r7, #24
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	00010002 	.word	0x00010002

08002794 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b088      	sub	sp, #32
 8002798:	af02      	add	r7, sp, #8
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	4608      	mov	r0, r1
 800279e:	4611      	mov	r1, r2
 80027a0:	461a      	mov	r2, r3
 80027a2:	4603      	mov	r3, r0
 80027a4:	817b      	strh	r3, [r7, #10]
 80027a6:	460b      	mov	r3, r1
 80027a8:	813b      	strh	r3, [r7, #8]
 80027aa:	4613      	mov	r3, r2
 80027ac:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80027bc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80027cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80027ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d0:	9300      	str	r3, [sp, #0]
 80027d2:	6a3b      	ldr	r3, [r7, #32]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80027da:	68f8      	ldr	r0, [r7, #12]
 80027dc:	f000 f8c2 	bl	8002964 <I2C_WaitOnFlagUntilTimeout>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d00d      	beq.n	8002802 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80027f4:	d103      	bne.n	80027fe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80027fc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e0aa      	b.n	8002958 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002802:	897b      	ldrh	r3, [r7, #10]
 8002804:	b2db      	uxtb	r3, r3
 8002806:	461a      	mov	r2, r3
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002810:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002814:	6a3a      	ldr	r2, [r7, #32]
 8002816:	4952      	ldr	r1, [pc, #328]	@ (8002960 <I2C_RequestMemoryRead+0x1cc>)
 8002818:	68f8      	ldr	r0, [r7, #12]
 800281a:	f000 f91d 	bl	8002a58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e097      	b.n	8002958 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002828:	2300      	movs	r3, #0
 800282a:	617b      	str	r3, [r7, #20]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	695b      	ldr	r3, [r3, #20]
 8002832:	617b      	str	r3, [r7, #20]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	699b      	ldr	r3, [r3, #24]
 800283a:	617b      	str	r3, [r7, #20]
 800283c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800283e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002840:	6a39      	ldr	r1, [r7, #32]
 8002842:	68f8      	ldr	r0, [r7, #12]
 8002844:	f000 f9a8 	bl	8002b98 <I2C_WaitOnTXEFlagUntilTimeout>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d00d      	beq.n	800286a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002852:	2b04      	cmp	r3, #4
 8002854:	d107      	bne.n	8002866 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002864:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e076      	b.n	8002958 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800286a:	88fb      	ldrh	r3, [r7, #6]
 800286c:	2b01      	cmp	r3, #1
 800286e:	d105      	bne.n	800287c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002870:	893b      	ldrh	r3, [r7, #8]
 8002872:	b2da      	uxtb	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	611a      	str	r2, [r3, #16]
 800287a:	e021      	b.n	80028c0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800287c:	893b      	ldrh	r3, [r7, #8]
 800287e:	0a1b      	lsrs	r3, r3, #8
 8002880:	b29b      	uxth	r3, r3
 8002882:	b2da      	uxtb	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800288a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800288c:	6a39      	ldr	r1, [r7, #32]
 800288e:	68f8      	ldr	r0, [r7, #12]
 8002890:	f000 f982 	bl	8002b98 <I2C_WaitOnTXEFlagUntilTimeout>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d00d      	beq.n	80028b6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800289e:	2b04      	cmp	r3, #4
 80028a0:	d107      	bne.n	80028b2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028b0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e050      	b.n	8002958 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80028b6:	893b      	ldrh	r3, [r7, #8]
 80028b8:	b2da      	uxtb	r2, r3
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028c2:	6a39      	ldr	r1, [r7, #32]
 80028c4:	68f8      	ldr	r0, [r7, #12]
 80028c6:	f000 f967 	bl	8002b98 <I2C_WaitOnTXEFlagUntilTimeout>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d00d      	beq.n	80028ec <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d4:	2b04      	cmp	r3, #4
 80028d6:	d107      	bne.n	80028e8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028e6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e035      	b.n	8002958 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80028fa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028fe:	9300      	str	r3, [sp, #0]
 8002900:	6a3b      	ldr	r3, [r7, #32]
 8002902:	2200      	movs	r2, #0
 8002904:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002908:	68f8      	ldr	r0, [r7, #12]
 800290a:	f000 f82b 	bl	8002964 <I2C_WaitOnFlagUntilTimeout>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d00d      	beq.n	8002930 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800291e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002922:	d103      	bne.n	800292c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800292a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800292c:	2303      	movs	r3, #3
 800292e:	e013      	b.n	8002958 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002930:	897b      	ldrh	r3, [r7, #10]
 8002932:	b2db      	uxtb	r3, r3
 8002934:	f043 0301 	orr.w	r3, r3, #1
 8002938:	b2da      	uxtb	r2, r3
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002942:	6a3a      	ldr	r2, [r7, #32]
 8002944:	4906      	ldr	r1, [pc, #24]	@ (8002960 <I2C_RequestMemoryRead+0x1cc>)
 8002946:	68f8      	ldr	r0, [r7, #12]
 8002948:	f000 f886 	bl	8002a58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e000      	b.n	8002958 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002956:	2300      	movs	r3, #0
}
 8002958:	4618      	mov	r0, r3
 800295a:	3718      	adds	r7, #24
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	00010002 	.word	0x00010002

08002964 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	60b9      	str	r1, [r7, #8]
 800296e:	603b      	str	r3, [r7, #0]
 8002970:	4613      	mov	r3, r2
 8002972:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002974:	e048      	b.n	8002a08 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800297c:	d044      	beq.n	8002a08 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800297e:	f7fe ff0b 	bl	8001798 <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	683a      	ldr	r2, [r7, #0]
 800298a:	429a      	cmp	r2, r3
 800298c:	d302      	bcc.n	8002994 <I2C_WaitOnFlagUntilTimeout+0x30>
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d139      	bne.n	8002a08 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	0c1b      	lsrs	r3, r3, #16
 8002998:	b2db      	uxtb	r3, r3
 800299a:	2b01      	cmp	r3, #1
 800299c:	d10d      	bne.n	80029ba <I2C_WaitOnFlagUntilTimeout+0x56>
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	695b      	ldr	r3, [r3, #20]
 80029a4:	43da      	mvns	r2, r3
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	4013      	ands	r3, r2
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	bf0c      	ite	eq
 80029b0:	2301      	moveq	r3, #1
 80029b2:	2300      	movne	r3, #0
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	461a      	mov	r2, r3
 80029b8:	e00c      	b.n	80029d4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	699b      	ldr	r3, [r3, #24]
 80029c0:	43da      	mvns	r2, r3
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	4013      	ands	r3, r2
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	bf0c      	ite	eq
 80029cc:	2301      	moveq	r3, #1
 80029ce:	2300      	movne	r3, #0
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	461a      	mov	r2, r3
 80029d4:	79fb      	ldrb	r3, [r7, #7]
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d116      	bne.n	8002a08 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2200      	movs	r2, #0
 80029de:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2220      	movs	r2, #32
 80029e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f4:	f043 0220 	orr.w	r2, r3, #32
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e023      	b.n	8002a50 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	0c1b      	lsrs	r3, r3, #16
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d10d      	bne.n	8002a2e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	695b      	ldr	r3, [r3, #20]
 8002a18:	43da      	mvns	r2, r3
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	bf0c      	ite	eq
 8002a24:	2301      	moveq	r3, #1
 8002a26:	2300      	movne	r3, #0
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	e00c      	b.n	8002a48 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	699b      	ldr	r3, [r3, #24]
 8002a34:	43da      	mvns	r2, r3
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	4013      	ands	r3, r2
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	bf0c      	ite	eq
 8002a40:	2301      	moveq	r3, #1
 8002a42:	2300      	movne	r3, #0
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	461a      	mov	r2, r3
 8002a48:	79fb      	ldrb	r3, [r7, #7]
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d093      	beq.n	8002976 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3710      	adds	r7, #16
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	607a      	str	r2, [r7, #4]
 8002a64:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a66:	e071      	b.n	8002b4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	695b      	ldr	r3, [r3, #20]
 8002a6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a76:	d123      	bne.n	8002ac0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a86:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002a90:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2200      	movs	r2, #0
 8002a96:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2220      	movs	r2, #32
 8002a9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aac:	f043 0204 	orr.w	r2, r3, #4
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e067      	b.n	8002b90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002ac6:	d041      	beq.n	8002b4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ac8:	f7fe fe66 	bl	8001798 <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d302      	bcc.n	8002ade <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d136      	bne.n	8002b4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	0c1b      	lsrs	r3, r3, #16
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d10c      	bne.n	8002b02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	43da      	mvns	r2, r3
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	4013      	ands	r3, r2
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	bf14      	ite	ne
 8002afa:	2301      	movne	r3, #1
 8002afc:	2300      	moveq	r3, #0
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	e00b      	b.n	8002b1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	699b      	ldr	r3, [r3, #24]
 8002b08:	43da      	mvns	r2, r3
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	bf14      	ite	ne
 8002b14:	2301      	movne	r3, #1
 8002b16:	2300      	moveq	r3, #0
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d016      	beq.n	8002b4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2200      	movs	r2, #0
 8002b22:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2220      	movs	r2, #32
 8002b28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b38:	f043 0220 	orr.w	r2, r3, #32
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e021      	b.n	8002b90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	0c1b      	lsrs	r3, r3, #16
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d10c      	bne.n	8002b70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	695b      	ldr	r3, [r3, #20]
 8002b5c:	43da      	mvns	r2, r3
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	4013      	ands	r3, r2
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	bf14      	ite	ne
 8002b68:	2301      	movne	r3, #1
 8002b6a:	2300      	moveq	r3, #0
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	e00b      	b.n	8002b88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	699b      	ldr	r3, [r3, #24]
 8002b76:	43da      	mvns	r2, r3
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	bf14      	ite	ne
 8002b82:	2301      	movne	r3, #1
 8002b84:	2300      	moveq	r3, #0
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	f47f af6d 	bne.w	8002a68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3710      	adds	r7, #16
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ba4:	e034      	b.n	8002c10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ba6:	68f8      	ldr	r0, [r7, #12]
 8002ba8:	f000 f8e3 	bl	8002d72 <I2C_IsAcknowledgeFailed>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d001      	beq.n	8002bb6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e034      	b.n	8002c20 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002bbc:	d028      	beq.n	8002c10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bbe:	f7fe fdeb 	bl	8001798 <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	68ba      	ldr	r2, [r7, #8]
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d302      	bcc.n	8002bd4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d11d      	bne.n	8002c10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	695b      	ldr	r3, [r3, #20]
 8002bda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bde:	2b80      	cmp	r3, #128	@ 0x80
 8002be0:	d016      	beq.n	8002c10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2200      	movs	r2, #0
 8002be6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2220      	movs	r2, #32
 8002bec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bfc:	f043 0220 	orr.w	r2, r3, #32
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e007      	b.n	8002c20 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	695b      	ldr	r3, [r3, #20]
 8002c16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c1a:	2b80      	cmp	r3, #128	@ 0x80
 8002c1c:	d1c3      	bne.n	8002ba6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002c1e:	2300      	movs	r3, #0
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3710      	adds	r7, #16
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c34:	e034      	b.n	8002ca0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c36:	68f8      	ldr	r0, [r7, #12]
 8002c38:	f000 f89b 	bl	8002d72 <I2C_IsAcknowledgeFailed>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e034      	b.n	8002cb0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002c4c:	d028      	beq.n	8002ca0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c4e:	f7fe fda3 	bl	8001798 <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	68ba      	ldr	r2, [r7, #8]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d302      	bcc.n	8002c64 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d11d      	bne.n	8002ca0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	695b      	ldr	r3, [r3, #20]
 8002c6a:	f003 0304 	and.w	r3, r3, #4
 8002c6e:	2b04      	cmp	r3, #4
 8002c70:	d016      	beq.n	8002ca0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2200      	movs	r2, #0
 8002c76:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2220      	movs	r2, #32
 8002c7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c8c:	f043 0220 	orr.w	r2, r3, #32
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e007      	b.n	8002cb0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	695b      	ldr	r3, [r3, #20]
 8002ca6:	f003 0304 	and.w	r3, r3, #4
 8002caa:	2b04      	cmp	r3, #4
 8002cac:	d1c3      	bne.n	8002c36 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002cae:	2300      	movs	r3, #0
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3710      	adds	r7, #16
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b084      	sub	sp, #16
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	60b9      	str	r1, [r7, #8]
 8002cc2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002cc4:	e049      	b.n	8002d5a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	695b      	ldr	r3, [r3, #20]
 8002ccc:	f003 0310 	and.w	r3, r3, #16
 8002cd0:	2b10      	cmp	r3, #16
 8002cd2:	d119      	bne.n	8002d08 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f06f 0210 	mvn.w	r2, #16
 8002cdc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2220      	movs	r2, #32
 8002ce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e030      	b.n	8002d6a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d08:	f7fe fd46 	bl	8001798 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	68ba      	ldr	r2, [r7, #8]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d302      	bcc.n	8002d1e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d11d      	bne.n	8002d5a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	695b      	ldr	r3, [r3, #20]
 8002d24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d28:	2b40      	cmp	r3, #64	@ 0x40
 8002d2a:	d016      	beq.n	8002d5a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2220      	movs	r2, #32
 8002d36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d46:	f043 0220 	orr.w	r2, r3, #32
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e007      	b.n	8002d6a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	695b      	ldr	r3, [r3, #20]
 8002d60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d64:	2b40      	cmp	r3, #64	@ 0x40
 8002d66:	d1ae      	bne.n	8002cc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3710      	adds	r7, #16
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002d72:	b480      	push	{r7}
 8002d74:	b083      	sub	sp, #12
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	695b      	ldr	r3, [r3, #20]
 8002d80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d88:	d11b      	bne.n	8002dc2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002d92:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2220      	movs	r2, #32
 8002d9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dae:	f043 0204 	orr.w	r2, r3, #4
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e000      	b.n	8002dc4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002dc2:	2300      	movs	r3, #0
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	2b20      	cmp	r3, #32
 8002de4:	d129      	bne.n	8002e3a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2224      	movs	r2, #36	@ 0x24
 8002dea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f022 0201 	bic.w	r2, r2, #1
 8002dfc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f022 0210 	bic.w	r2, r2, #16
 8002e0c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	683a      	ldr	r2, [r7, #0]
 8002e1a:	430a      	orrs	r2, r1
 8002e1c:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f042 0201 	orr.w	r2, r2, #1
 8002e2c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2220      	movs	r2, #32
 8002e32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8002e36:	2300      	movs	r3, #0
 8002e38:	e000      	b.n	8002e3c <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002e3a:	2302      	movs	r3, #2
  }
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b085      	sub	sp, #20
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002e52:	2300      	movs	r3, #0
 8002e54:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	2b20      	cmp	r3, #32
 8002e60:	d12a      	bne.n	8002eb8 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2224      	movs	r2, #36	@ 0x24
 8002e66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f022 0201 	bic.w	r2, r2, #1
 8002e78:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e80:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8002e82:	89fb      	ldrh	r3, [r7, #14]
 8002e84:	f023 030f 	bic.w	r3, r3, #15
 8002e88:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	b29a      	uxth	r2, r3
 8002e8e:	89fb      	ldrh	r3, [r7, #14]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	89fa      	ldrh	r2, [r7, #14]
 8002e9a:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f042 0201 	orr.w	r2, r2, #1
 8002eaa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2220      	movs	r2, #32
 8002eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	e000      	b.n	8002eba <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8002eb8:	2302      	movs	r3, #2
  }
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3714      	adds	r7, #20
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
	...

08002ec8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b086      	sub	sp, #24
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d101      	bne.n	8002eda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e267      	b.n	80033aa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d075      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002ee6:	4b88      	ldr	r3, [pc, #544]	@ (8003108 <HAL_RCC_OscConfig+0x240>)
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	f003 030c 	and.w	r3, r3, #12
 8002eee:	2b04      	cmp	r3, #4
 8002ef0:	d00c      	beq.n	8002f0c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ef2:	4b85      	ldr	r3, [pc, #532]	@ (8003108 <HAL_RCC_OscConfig+0x240>)
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002efa:	2b08      	cmp	r3, #8
 8002efc:	d112      	bne.n	8002f24 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002efe:	4b82      	ldr	r3, [pc, #520]	@ (8003108 <HAL_RCC_OscConfig+0x240>)
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f06:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f0a:	d10b      	bne.n	8002f24 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f0c:	4b7e      	ldr	r3, [pc, #504]	@ (8003108 <HAL_RCC_OscConfig+0x240>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d05b      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x108>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d157      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e242      	b.n	80033aa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f2c:	d106      	bne.n	8002f3c <HAL_RCC_OscConfig+0x74>
 8002f2e:	4b76      	ldr	r3, [pc, #472]	@ (8003108 <HAL_RCC_OscConfig+0x240>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a75      	ldr	r2, [pc, #468]	@ (8003108 <HAL_RCC_OscConfig+0x240>)
 8002f34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f38:	6013      	str	r3, [r2, #0]
 8002f3a:	e01d      	b.n	8002f78 <HAL_RCC_OscConfig+0xb0>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f44:	d10c      	bne.n	8002f60 <HAL_RCC_OscConfig+0x98>
 8002f46:	4b70      	ldr	r3, [pc, #448]	@ (8003108 <HAL_RCC_OscConfig+0x240>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a6f      	ldr	r2, [pc, #444]	@ (8003108 <HAL_RCC_OscConfig+0x240>)
 8002f4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f50:	6013      	str	r3, [r2, #0]
 8002f52:	4b6d      	ldr	r3, [pc, #436]	@ (8003108 <HAL_RCC_OscConfig+0x240>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a6c      	ldr	r2, [pc, #432]	@ (8003108 <HAL_RCC_OscConfig+0x240>)
 8002f58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f5c:	6013      	str	r3, [r2, #0]
 8002f5e:	e00b      	b.n	8002f78 <HAL_RCC_OscConfig+0xb0>
 8002f60:	4b69      	ldr	r3, [pc, #420]	@ (8003108 <HAL_RCC_OscConfig+0x240>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a68      	ldr	r2, [pc, #416]	@ (8003108 <HAL_RCC_OscConfig+0x240>)
 8002f66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f6a:	6013      	str	r3, [r2, #0]
 8002f6c:	4b66      	ldr	r3, [pc, #408]	@ (8003108 <HAL_RCC_OscConfig+0x240>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a65      	ldr	r2, [pc, #404]	@ (8003108 <HAL_RCC_OscConfig+0x240>)
 8002f72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d013      	beq.n	8002fa8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f80:	f7fe fc0a 	bl	8001798 <HAL_GetTick>
 8002f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f86:	e008      	b.n	8002f9a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f88:	f7fe fc06 	bl	8001798 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	2b64      	cmp	r3, #100	@ 0x64
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e207      	b.n	80033aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f9a:	4b5b      	ldr	r3, [pc, #364]	@ (8003108 <HAL_RCC_OscConfig+0x240>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d0f0      	beq.n	8002f88 <HAL_RCC_OscConfig+0xc0>
 8002fa6:	e014      	b.n	8002fd2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa8:	f7fe fbf6 	bl	8001798 <HAL_GetTick>
 8002fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fae:	e008      	b.n	8002fc2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fb0:	f7fe fbf2 	bl	8001798 <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	2b64      	cmp	r3, #100	@ 0x64
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e1f3      	b.n	80033aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fc2:	4b51      	ldr	r3, [pc, #324]	@ (8003108 <HAL_RCC_OscConfig+0x240>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d1f0      	bne.n	8002fb0 <HAL_RCC_OscConfig+0xe8>
 8002fce:	e000      	b.n	8002fd2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0302 	and.w	r3, r3, #2
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d063      	beq.n	80030a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002fde:	4b4a      	ldr	r3, [pc, #296]	@ (8003108 <HAL_RCC_OscConfig+0x240>)
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	f003 030c 	and.w	r3, r3, #12
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d00b      	beq.n	8003002 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fea:	4b47      	ldr	r3, [pc, #284]	@ (8003108 <HAL_RCC_OscConfig+0x240>)
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002ff2:	2b08      	cmp	r3, #8
 8002ff4:	d11c      	bne.n	8003030 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ff6:	4b44      	ldr	r3, [pc, #272]	@ (8003108 <HAL_RCC_OscConfig+0x240>)
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d116      	bne.n	8003030 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003002:	4b41      	ldr	r3, [pc, #260]	@ (8003108 <HAL_RCC_OscConfig+0x240>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	2b00      	cmp	r3, #0
 800300c:	d005      	beq.n	800301a <HAL_RCC_OscConfig+0x152>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	2b01      	cmp	r3, #1
 8003014:	d001      	beq.n	800301a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e1c7      	b.n	80033aa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800301a:	4b3b      	ldr	r3, [pc, #236]	@ (8003108 <HAL_RCC_OscConfig+0x240>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	00db      	lsls	r3, r3, #3
 8003028:	4937      	ldr	r1, [pc, #220]	@ (8003108 <HAL_RCC_OscConfig+0x240>)
 800302a:	4313      	orrs	r3, r2
 800302c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800302e:	e03a      	b.n	80030a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d020      	beq.n	800307a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003038:	4b34      	ldr	r3, [pc, #208]	@ (800310c <HAL_RCC_OscConfig+0x244>)
 800303a:	2201      	movs	r2, #1
 800303c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800303e:	f7fe fbab 	bl	8001798 <HAL_GetTick>
 8003042:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003044:	e008      	b.n	8003058 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003046:	f7fe fba7 	bl	8001798 <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	2b02      	cmp	r3, #2
 8003052:	d901      	bls.n	8003058 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	e1a8      	b.n	80033aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003058:	4b2b      	ldr	r3, [pc, #172]	@ (8003108 <HAL_RCC_OscConfig+0x240>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0302 	and.w	r3, r3, #2
 8003060:	2b00      	cmp	r3, #0
 8003062:	d0f0      	beq.n	8003046 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003064:	4b28      	ldr	r3, [pc, #160]	@ (8003108 <HAL_RCC_OscConfig+0x240>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	691b      	ldr	r3, [r3, #16]
 8003070:	00db      	lsls	r3, r3, #3
 8003072:	4925      	ldr	r1, [pc, #148]	@ (8003108 <HAL_RCC_OscConfig+0x240>)
 8003074:	4313      	orrs	r3, r2
 8003076:	600b      	str	r3, [r1, #0]
 8003078:	e015      	b.n	80030a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800307a:	4b24      	ldr	r3, [pc, #144]	@ (800310c <HAL_RCC_OscConfig+0x244>)
 800307c:	2200      	movs	r2, #0
 800307e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003080:	f7fe fb8a 	bl	8001798 <HAL_GetTick>
 8003084:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003086:	e008      	b.n	800309a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003088:	f7fe fb86 	bl	8001798 <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b02      	cmp	r3, #2
 8003094:	d901      	bls.n	800309a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e187      	b.n	80033aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800309a:	4b1b      	ldr	r3, [pc, #108]	@ (8003108 <HAL_RCC_OscConfig+0x240>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0302 	and.w	r3, r3, #2
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d1f0      	bne.n	8003088 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0308 	and.w	r3, r3, #8
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d036      	beq.n	8003120 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	695b      	ldr	r3, [r3, #20]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d016      	beq.n	80030e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030ba:	4b15      	ldr	r3, [pc, #84]	@ (8003110 <HAL_RCC_OscConfig+0x248>)
 80030bc:	2201      	movs	r2, #1
 80030be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030c0:	f7fe fb6a 	bl	8001798 <HAL_GetTick>
 80030c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030c6:	e008      	b.n	80030da <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030c8:	f7fe fb66 	bl	8001798 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d901      	bls.n	80030da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e167      	b.n	80033aa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030da:	4b0b      	ldr	r3, [pc, #44]	@ (8003108 <HAL_RCC_OscConfig+0x240>)
 80030dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d0f0      	beq.n	80030c8 <HAL_RCC_OscConfig+0x200>
 80030e6:	e01b      	b.n	8003120 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030e8:	4b09      	ldr	r3, [pc, #36]	@ (8003110 <HAL_RCC_OscConfig+0x248>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030ee:	f7fe fb53 	bl	8001798 <HAL_GetTick>
 80030f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030f4:	e00e      	b.n	8003114 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030f6:	f7fe fb4f 	bl	8001798 <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	2b02      	cmp	r3, #2
 8003102:	d907      	bls.n	8003114 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003104:	2303      	movs	r3, #3
 8003106:	e150      	b.n	80033aa <HAL_RCC_OscConfig+0x4e2>
 8003108:	40023800 	.word	0x40023800
 800310c:	42470000 	.word	0x42470000
 8003110:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003114:	4b88      	ldr	r3, [pc, #544]	@ (8003338 <HAL_RCC_OscConfig+0x470>)
 8003116:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003118:	f003 0302 	and.w	r3, r3, #2
 800311c:	2b00      	cmp	r3, #0
 800311e:	d1ea      	bne.n	80030f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0304 	and.w	r3, r3, #4
 8003128:	2b00      	cmp	r3, #0
 800312a:	f000 8097 	beq.w	800325c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800312e:	2300      	movs	r3, #0
 8003130:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003132:	4b81      	ldr	r3, [pc, #516]	@ (8003338 <HAL_RCC_OscConfig+0x470>)
 8003134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003136:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d10f      	bne.n	800315e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800313e:	2300      	movs	r3, #0
 8003140:	60bb      	str	r3, [r7, #8]
 8003142:	4b7d      	ldr	r3, [pc, #500]	@ (8003338 <HAL_RCC_OscConfig+0x470>)
 8003144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003146:	4a7c      	ldr	r2, [pc, #496]	@ (8003338 <HAL_RCC_OscConfig+0x470>)
 8003148:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800314c:	6413      	str	r3, [r2, #64]	@ 0x40
 800314e:	4b7a      	ldr	r3, [pc, #488]	@ (8003338 <HAL_RCC_OscConfig+0x470>)
 8003150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003152:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003156:	60bb      	str	r3, [r7, #8]
 8003158:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800315a:	2301      	movs	r3, #1
 800315c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800315e:	4b77      	ldr	r3, [pc, #476]	@ (800333c <HAL_RCC_OscConfig+0x474>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003166:	2b00      	cmp	r3, #0
 8003168:	d118      	bne.n	800319c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800316a:	4b74      	ldr	r3, [pc, #464]	@ (800333c <HAL_RCC_OscConfig+0x474>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a73      	ldr	r2, [pc, #460]	@ (800333c <HAL_RCC_OscConfig+0x474>)
 8003170:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003174:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003176:	f7fe fb0f 	bl	8001798 <HAL_GetTick>
 800317a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800317c:	e008      	b.n	8003190 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800317e:	f7fe fb0b 	bl	8001798 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	2b02      	cmp	r3, #2
 800318a:	d901      	bls.n	8003190 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e10c      	b.n	80033aa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003190:	4b6a      	ldr	r3, [pc, #424]	@ (800333c <HAL_RCC_OscConfig+0x474>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003198:	2b00      	cmp	r3, #0
 800319a:	d0f0      	beq.n	800317e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d106      	bne.n	80031b2 <HAL_RCC_OscConfig+0x2ea>
 80031a4:	4b64      	ldr	r3, [pc, #400]	@ (8003338 <HAL_RCC_OscConfig+0x470>)
 80031a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031a8:	4a63      	ldr	r2, [pc, #396]	@ (8003338 <HAL_RCC_OscConfig+0x470>)
 80031aa:	f043 0301 	orr.w	r3, r3, #1
 80031ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80031b0:	e01c      	b.n	80031ec <HAL_RCC_OscConfig+0x324>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	2b05      	cmp	r3, #5
 80031b8:	d10c      	bne.n	80031d4 <HAL_RCC_OscConfig+0x30c>
 80031ba:	4b5f      	ldr	r3, [pc, #380]	@ (8003338 <HAL_RCC_OscConfig+0x470>)
 80031bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031be:	4a5e      	ldr	r2, [pc, #376]	@ (8003338 <HAL_RCC_OscConfig+0x470>)
 80031c0:	f043 0304 	orr.w	r3, r3, #4
 80031c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80031c6:	4b5c      	ldr	r3, [pc, #368]	@ (8003338 <HAL_RCC_OscConfig+0x470>)
 80031c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031ca:	4a5b      	ldr	r2, [pc, #364]	@ (8003338 <HAL_RCC_OscConfig+0x470>)
 80031cc:	f043 0301 	orr.w	r3, r3, #1
 80031d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80031d2:	e00b      	b.n	80031ec <HAL_RCC_OscConfig+0x324>
 80031d4:	4b58      	ldr	r3, [pc, #352]	@ (8003338 <HAL_RCC_OscConfig+0x470>)
 80031d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031d8:	4a57      	ldr	r2, [pc, #348]	@ (8003338 <HAL_RCC_OscConfig+0x470>)
 80031da:	f023 0301 	bic.w	r3, r3, #1
 80031de:	6713      	str	r3, [r2, #112]	@ 0x70
 80031e0:	4b55      	ldr	r3, [pc, #340]	@ (8003338 <HAL_RCC_OscConfig+0x470>)
 80031e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031e4:	4a54      	ldr	r2, [pc, #336]	@ (8003338 <HAL_RCC_OscConfig+0x470>)
 80031e6:	f023 0304 	bic.w	r3, r3, #4
 80031ea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d015      	beq.n	8003220 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031f4:	f7fe fad0 	bl	8001798 <HAL_GetTick>
 80031f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031fa:	e00a      	b.n	8003212 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031fc:	f7fe facc 	bl	8001798 <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	f241 3288 	movw	r2, #5000	@ 0x1388
 800320a:	4293      	cmp	r3, r2
 800320c:	d901      	bls.n	8003212 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e0cb      	b.n	80033aa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003212:	4b49      	ldr	r3, [pc, #292]	@ (8003338 <HAL_RCC_OscConfig+0x470>)
 8003214:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	2b00      	cmp	r3, #0
 800321c:	d0ee      	beq.n	80031fc <HAL_RCC_OscConfig+0x334>
 800321e:	e014      	b.n	800324a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003220:	f7fe faba 	bl	8001798 <HAL_GetTick>
 8003224:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003226:	e00a      	b.n	800323e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003228:	f7fe fab6 	bl	8001798 <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003236:	4293      	cmp	r3, r2
 8003238:	d901      	bls.n	800323e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e0b5      	b.n	80033aa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800323e:	4b3e      	ldr	r3, [pc, #248]	@ (8003338 <HAL_RCC_OscConfig+0x470>)
 8003240:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003242:	f003 0302 	and.w	r3, r3, #2
 8003246:	2b00      	cmp	r3, #0
 8003248:	d1ee      	bne.n	8003228 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800324a:	7dfb      	ldrb	r3, [r7, #23]
 800324c:	2b01      	cmp	r3, #1
 800324e:	d105      	bne.n	800325c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003250:	4b39      	ldr	r3, [pc, #228]	@ (8003338 <HAL_RCC_OscConfig+0x470>)
 8003252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003254:	4a38      	ldr	r2, [pc, #224]	@ (8003338 <HAL_RCC_OscConfig+0x470>)
 8003256:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800325a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	699b      	ldr	r3, [r3, #24]
 8003260:	2b00      	cmp	r3, #0
 8003262:	f000 80a1 	beq.w	80033a8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003266:	4b34      	ldr	r3, [pc, #208]	@ (8003338 <HAL_RCC_OscConfig+0x470>)
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f003 030c 	and.w	r3, r3, #12
 800326e:	2b08      	cmp	r3, #8
 8003270:	d05c      	beq.n	800332c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	2b02      	cmp	r3, #2
 8003278:	d141      	bne.n	80032fe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800327a:	4b31      	ldr	r3, [pc, #196]	@ (8003340 <HAL_RCC_OscConfig+0x478>)
 800327c:	2200      	movs	r2, #0
 800327e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003280:	f7fe fa8a 	bl	8001798 <HAL_GetTick>
 8003284:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003286:	e008      	b.n	800329a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003288:	f7fe fa86 	bl	8001798 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b02      	cmp	r3, #2
 8003294:	d901      	bls.n	800329a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e087      	b.n	80033aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800329a:	4b27      	ldr	r3, [pc, #156]	@ (8003338 <HAL_RCC_OscConfig+0x470>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d1f0      	bne.n	8003288 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	69da      	ldr	r2, [r3, #28]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a1b      	ldr	r3, [r3, #32]
 80032ae:	431a      	orrs	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b4:	019b      	lsls	r3, r3, #6
 80032b6:	431a      	orrs	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032bc:	085b      	lsrs	r3, r3, #1
 80032be:	3b01      	subs	r3, #1
 80032c0:	041b      	lsls	r3, r3, #16
 80032c2:	431a      	orrs	r2, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032c8:	061b      	lsls	r3, r3, #24
 80032ca:	491b      	ldr	r1, [pc, #108]	@ (8003338 <HAL_RCC_OscConfig+0x470>)
 80032cc:	4313      	orrs	r3, r2
 80032ce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032d0:	4b1b      	ldr	r3, [pc, #108]	@ (8003340 <HAL_RCC_OscConfig+0x478>)
 80032d2:	2201      	movs	r2, #1
 80032d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032d6:	f7fe fa5f 	bl	8001798 <HAL_GetTick>
 80032da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032dc:	e008      	b.n	80032f0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032de:	f7fe fa5b 	bl	8001798 <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d901      	bls.n	80032f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e05c      	b.n	80033aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032f0:	4b11      	ldr	r3, [pc, #68]	@ (8003338 <HAL_RCC_OscConfig+0x470>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d0f0      	beq.n	80032de <HAL_RCC_OscConfig+0x416>
 80032fc:	e054      	b.n	80033a8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032fe:	4b10      	ldr	r3, [pc, #64]	@ (8003340 <HAL_RCC_OscConfig+0x478>)
 8003300:	2200      	movs	r2, #0
 8003302:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003304:	f7fe fa48 	bl	8001798 <HAL_GetTick>
 8003308:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800330a:	e008      	b.n	800331e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800330c:	f7fe fa44 	bl	8001798 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	2b02      	cmp	r3, #2
 8003318:	d901      	bls.n	800331e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e045      	b.n	80033aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800331e:	4b06      	ldr	r3, [pc, #24]	@ (8003338 <HAL_RCC_OscConfig+0x470>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d1f0      	bne.n	800330c <HAL_RCC_OscConfig+0x444>
 800332a:	e03d      	b.n	80033a8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	699b      	ldr	r3, [r3, #24]
 8003330:	2b01      	cmp	r3, #1
 8003332:	d107      	bne.n	8003344 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e038      	b.n	80033aa <HAL_RCC_OscConfig+0x4e2>
 8003338:	40023800 	.word	0x40023800
 800333c:	40007000 	.word	0x40007000
 8003340:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003344:	4b1b      	ldr	r3, [pc, #108]	@ (80033b4 <HAL_RCC_OscConfig+0x4ec>)
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	699b      	ldr	r3, [r3, #24]
 800334e:	2b01      	cmp	r3, #1
 8003350:	d028      	beq.n	80033a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800335c:	429a      	cmp	r2, r3
 800335e:	d121      	bne.n	80033a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800336a:	429a      	cmp	r2, r3
 800336c:	d11a      	bne.n	80033a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800336e:	68fa      	ldr	r2, [r7, #12]
 8003370:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003374:	4013      	ands	r3, r2
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800337a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800337c:	4293      	cmp	r3, r2
 800337e:	d111      	bne.n	80033a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800338a:	085b      	lsrs	r3, r3, #1
 800338c:	3b01      	subs	r3, #1
 800338e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003390:	429a      	cmp	r2, r3
 8003392:	d107      	bne.n	80033a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800339e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d001      	beq.n	80033a8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e000      	b.n	80033aa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3718      	adds	r7, #24
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	40023800 	.word	0x40023800

080033b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d101      	bne.n	80033cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e0cc      	b.n	8003566 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033cc:	4b68      	ldr	r3, [pc, #416]	@ (8003570 <HAL_RCC_ClockConfig+0x1b8>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 030f 	and.w	r3, r3, #15
 80033d4:	683a      	ldr	r2, [r7, #0]
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d90c      	bls.n	80033f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033da:	4b65      	ldr	r3, [pc, #404]	@ (8003570 <HAL_RCC_ClockConfig+0x1b8>)
 80033dc:	683a      	ldr	r2, [r7, #0]
 80033de:	b2d2      	uxtb	r2, r2
 80033e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033e2:	4b63      	ldr	r3, [pc, #396]	@ (8003570 <HAL_RCC_ClockConfig+0x1b8>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 030f 	and.w	r3, r3, #15
 80033ea:	683a      	ldr	r2, [r7, #0]
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d001      	beq.n	80033f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e0b8      	b.n	8003566 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0302 	and.w	r3, r3, #2
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d020      	beq.n	8003442 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0304 	and.w	r3, r3, #4
 8003408:	2b00      	cmp	r3, #0
 800340a:	d005      	beq.n	8003418 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800340c:	4b59      	ldr	r3, [pc, #356]	@ (8003574 <HAL_RCC_ClockConfig+0x1bc>)
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	4a58      	ldr	r2, [pc, #352]	@ (8003574 <HAL_RCC_ClockConfig+0x1bc>)
 8003412:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003416:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0308 	and.w	r3, r3, #8
 8003420:	2b00      	cmp	r3, #0
 8003422:	d005      	beq.n	8003430 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003424:	4b53      	ldr	r3, [pc, #332]	@ (8003574 <HAL_RCC_ClockConfig+0x1bc>)
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	4a52      	ldr	r2, [pc, #328]	@ (8003574 <HAL_RCC_ClockConfig+0x1bc>)
 800342a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800342e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003430:	4b50      	ldr	r3, [pc, #320]	@ (8003574 <HAL_RCC_ClockConfig+0x1bc>)
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	494d      	ldr	r1, [pc, #308]	@ (8003574 <HAL_RCC_ClockConfig+0x1bc>)
 800343e:	4313      	orrs	r3, r2
 8003440:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0301 	and.w	r3, r3, #1
 800344a:	2b00      	cmp	r3, #0
 800344c:	d044      	beq.n	80034d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d107      	bne.n	8003466 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003456:	4b47      	ldr	r3, [pc, #284]	@ (8003574 <HAL_RCC_ClockConfig+0x1bc>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d119      	bne.n	8003496 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e07f      	b.n	8003566 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	2b02      	cmp	r3, #2
 800346c:	d003      	beq.n	8003476 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003472:	2b03      	cmp	r3, #3
 8003474:	d107      	bne.n	8003486 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003476:	4b3f      	ldr	r3, [pc, #252]	@ (8003574 <HAL_RCC_ClockConfig+0x1bc>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d109      	bne.n	8003496 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e06f      	b.n	8003566 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003486:	4b3b      	ldr	r3, [pc, #236]	@ (8003574 <HAL_RCC_ClockConfig+0x1bc>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0302 	and.w	r3, r3, #2
 800348e:	2b00      	cmp	r3, #0
 8003490:	d101      	bne.n	8003496 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e067      	b.n	8003566 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003496:	4b37      	ldr	r3, [pc, #220]	@ (8003574 <HAL_RCC_ClockConfig+0x1bc>)
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f023 0203 	bic.w	r2, r3, #3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	4934      	ldr	r1, [pc, #208]	@ (8003574 <HAL_RCC_ClockConfig+0x1bc>)
 80034a4:	4313      	orrs	r3, r2
 80034a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034a8:	f7fe f976 	bl	8001798 <HAL_GetTick>
 80034ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ae:	e00a      	b.n	80034c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034b0:	f7fe f972 	bl	8001798 <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034be:	4293      	cmp	r3, r2
 80034c0:	d901      	bls.n	80034c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e04f      	b.n	8003566 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034c6:	4b2b      	ldr	r3, [pc, #172]	@ (8003574 <HAL_RCC_ClockConfig+0x1bc>)
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	f003 020c 	and.w	r2, r3, #12
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d1eb      	bne.n	80034b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034d8:	4b25      	ldr	r3, [pc, #148]	@ (8003570 <HAL_RCC_ClockConfig+0x1b8>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 030f 	and.w	r3, r3, #15
 80034e0:	683a      	ldr	r2, [r7, #0]
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d20c      	bcs.n	8003500 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034e6:	4b22      	ldr	r3, [pc, #136]	@ (8003570 <HAL_RCC_ClockConfig+0x1b8>)
 80034e8:	683a      	ldr	r2, [r7, #0]
 80034ea:	b2d2      	uxtb	r2, r2
 80034ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ee:	4b20      	ldr	r3, [pc, #128]	@ (8003570 <HAL_RCC_ClockConfig+0x1b8>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 030f 	and.w	r3, r3, #15
 80034f6:	683a      	ldr	r2, [r7, #0]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d001      	beq.n	8003500 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e032      	b.n	8003566 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0304 	and.w	r3, r3, #4
 8003508:	2b00      	cmp	r3, #0
 800350a:	d008      	beq.n	800351e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800350c:	4b19      	ldr	r3, [pc, #100]	@ (8003574 <HAL_RCC_ClockConfig+0x1bc>)
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	4916      	ldr	r1, [pc, #88]	@ (8003574 <HAL_RCC_ClockConfig+0x1bc>)
 800351a:	4313      	orrs	r3, r2
 800351c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0308 	and.w	r3, r3, #8
 8003526:	2b00      	cmp	r3, #0
 8003528:	d009      	beq.n	800353e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800352a:	4b12      	ldr	r3, [pc, #72]	@ (8003574 <HAL_RCC_ClockConfig+0x1bc>)
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	00db      	lsls	r3, r3, #3
 8003538:	490e      	ldr	r1, [pc, #56]	@ (8003574 <HAL_RCC_ClockConfig+0x1bc>)
 800353a:	4313      	orrs	r3, r2
 800353c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800353e:	f000 f821 	bl	8003584 <HAL_RCC_GetSysClockFreq>
 8003542:	4602      	mov	r2, r0
 8003544:	4b0b      	ldr	r3, [pc, #44]	@ (8003574 <HAL_RCC_ClockConfig+0x1bc>)
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	091b      	lsrs	r3, r3, #4
 800354a:	f003 030f 	and.w	r3, r3, #15
 800354e:	490a      	ldr	r1, [pc, #40]	@ (8003578 <HAL_RCC_ClockConfig+0x1c0>)
 8003550:	5ccb      	ldrb	r3, [r1, r3]
 8003552:	fa22 f303 	lsr.w	r3, r2, r3
 8003556:	4a09      	ldr	r2, [pc, #36]	@ (800357c <HAL_RCC_ClockConfig+0x1c4>)
 8003558:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800355a:	4b09      	ldr	r3, [pc, #36]	@ (8003580 <HAL_RCC_ClockConfig+0x1c8>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4618      	mov	r0, r3
 8003560:	f7fe f8d6 	bl	8001710 <HAL_InitTick>

  return HAL_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	3710      	adds	r7, #16
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	40023c00 	.word	0x40023c00
 8003574:	40023800 	.word	0x40023800
 8003578:	08005490 	.word	0x08005490
 800357c:	20000000 	.word	0x20000000
 8003580:	20000004 	.word	0x20000004

08003584 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003584:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003588:	b094      	sub	sp, #80	@ 0x50
 800358a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800358c:	2300      	movs	r3, #0
 800358e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003590:	2300      	movs	r3, #0
 8003592:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003594:	2300      	movs	r3, #0
 8003596:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003598:	2300      	movs	r3, #0
 800359a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800359c:	4b79      	ldr	r3, [pc, #484]	@ (8003784 <HAL_RCC_GetSysClockFreq+0x200>)
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	f003 030c 	and.w	r3, r3, #12
 80035a4:	2b08      	cmp	r3, #8
 80035a6:	d00d      	beq.n	80035c4 <HAL_RCC_GetSysClockFreq+0x40>
 80035a8:	2b08      	cmp	r3, #8
 80035aa:	f200 80e1 	bhi.w	8003770 <HAL_RCC_GetSysClockFreq+0x1ec>
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d002      	beq.n	80035b8 <HAL_RCC_GetSysClockFreq+0x34>
 80035b2:	2b04      	cmp	r3, #4
 80035b4:	d003      	beq.n	80035be <HAL_RCC_GetSysClockFreq+0x3a>
 80035b6:	e0db      	b.n	8003770 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035b8:	4b73      	ldr	r3, [pc, #460]	@ (8003788 <HAL_RCC_GetSysClockFreq+0x204>)
 80035ba:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80035bc:	e0db      	b.n	8003776 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035be:	4b73      	ldr	r3, [pc, #460]	@ (800378c <HAL_RCC_GetSysClockFreq+0x208>)
 80035c0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80035c2:	e0d8      	b.n	8003776 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035c4:	4b6f      	ldr	r3, [pc, #444]	@ (8003784 <HAL_RCC_GetSysClockFreq+0x200>)
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80035cc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035ce:	4b6d      	ldr	r3, [pc, #436]	@ (8003784 <HAL_RCC_GetSysClockFreq+0x200>)
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d063      	beq.n	80036a2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035da:	4b6a      	ldr	r3, [pc, #424]	@ (8003784 <HAL_RCC_GetSysClockFreq+0x200>)
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	099b      	lsrs	r3, r3, #6
 80035e0:	2200      	movs	r2, #0
 80035e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80035e4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80035e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80035ee:	2300      	movs	r3, #0
 80035f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80035f2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80035f6:	4622      	mov	r2, r4
 80035f8:	462b      	mov	r3, r5
 80035fa:	f04f 0000 	mov.w	r0, #0
 80035fe:	f04f 0100 	mov.w	r1, #0
 8003602:	0159      	lsls	r1, r3, #5
 8003604:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003608:	0150      	lsls	r0, r2, #5
 800360a:	4602      	mov	r2, r0
 800360c:	460b      	mov	r3, r1
 800360e:	4621      	mov	r1, r4
 8003610:	1a51      	subs	r1, r2, r1
 8003612:	6139      	str	r1, [r7, #16]
 8003614:	4629      	mov	r1, r5
 8003616:	eb63 0301 	sbc.w	r3, r3, r1
 800361a:	617b      	str	r3, [r7, #20]
 800361c:	f04f 0200 	mov.w	r2, #0
 8003620:	f04f 0300 	mov.w	r3, #0
 8003624:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003628:	4659      	mov	r1, fp
 800362a:	018b      	lsls	r3, r1, #6
 800362c:	4651      	mov	r1, sl
 800362e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003632:	4651      	mov	r1, sl
 8003634:	018a      	lsls	r2, r1, #6
 8003636:	4651      	mov	r1, sl
 8003638:	ebb2 0801 	subs.w	r8, r2, r1
 800363c:	4659      	mov	r1, fp
 800363e:	eb63 0901 	sbc.w	r9, r3, r1
 8003642:	f04f 0200 	mov.w	r2, #0
 8003646:	f04f 0300 	mov.w	r3, #0
 800364a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800364e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003652:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003656:	4690      	mov	r8, r2
 8003658:	4699      	mov	r9, r3
 800365a:	4623      	mov	r3, r4
 800365c:	eb18 0303 	adds.w	r3, r8, r3
 8003660:	60bb      	str	r3, [r7, #8]
 8003662:	462b      	mov	r3, r5
 8003664:	eb49 0303 	adc.w	r3, r9, r3
 8003668:	60fb      	str	r3, [r7, #12]
 800366a:	f04f 0200 	mov.w	r2, #0
 800366e:	f04f 0300 	mov.w	r3, #0
 8003672:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003676:	4629      	mov	r1, r5
 8003678:	024b      	lsls	r3, r1, #9
 800367a:	4621      	mov	r1, r4
 800367c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003680:	4621      	mov	r1, r4
 8003682:	024a      	lsls	r2, r1, #9
 8003684:	4610      	mov	r0, r2
 8003686:	4619      	mov	r1, r3
 8003688:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800368a:	2200      	movs	r2, #0
 800368c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800368e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003690:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003694:	f7fc fdfc 	bl	8000290 <__aeabi_uldivmod>
 8003698:	4602      	mov	r2, r0
 800369a:	460b      	mov	r3, r1
 800369c:	4613      	mov	r3, r2
 800369e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036a0:	e058      	b.n	8003754 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036a2:	4b38      	ldr	r3, [pc, #224]	@ (8003784 <HAL_RCC_GetSysClockFreq+0x200>)
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	099b      	lsrs	r3, r3, #6
 80036a8:	2200      	movs	r2, #0
 80036aa:	4618      	mov	r0, r3
 80036ac:	4611      	mov	r1, r2
 80036ae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80036b2:	623b      	str	r3, [r7, #32]
 80036b4:	2300      	movs	r3, #0
 80036b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80036b8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80036bc:	4642      	mov	r2, r8
 80036be:	464b      	mov	r3, r9
 80036c0:	f04f 0000 	mov.w	r0, #0
 80036c4:	f04f 0100 	mov.w	r1, #0
 80036c8:	0159      	lsls	r1, r3, #5
 80036ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036ce:	0150      	lsls	r0, r2, #5
 80036d0:	4602      	mov	r2, r0
 80036d2:	460b      	mov	r3, r1
 80036d4:	4641      	mov	r1, r8
 80036d6:	ebb2 0a01 	subs.w	sl, r2, r1
 80036da:	4649      	mov	r1, r9
 80036dc:	eb63 0b01 	sbc.w	fp, r3, r1
 80036e0:	f04f 0200 	mov.w	r2, #0
 80036e4:	f04f 0300 	mov.w	r3, #0
 80036e8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80036ec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80036f0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80036f4:	ebb2 040a 	subs.w	r4, r2, sl
 80036f8:	eb63 050b 	sbc.w	r5, r3, fp
 80036fc:	f04f 0200 	mov.w	r2, #0
 8003700:	f04f 0300 	mov.w	r3, #0
 8003704:	00eb      	lsls	r3, r5, #3
 8003706:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800370a:	00e2      	lsls	r2, r4, #3
 800370c:	4614      	mov	r4, r2
 800370e:	461d      	mov	r5, r3
 8003710:	4643      	mov	r3, r8
 8003712:	18e3      	adds	r3, r4, r3
 8003714:	603b      	str	r3, [r7, #0]
 8003716:	464b      	mov	r3, r9
 8003718:	eb45 0303 	adc.w	r3, r5, r3
 800371c:	607b      	str	r3, [r7, #4]
 800371e:	f04f 0200 	mov.w	r2, #0
 8003722:	f04f 0300 	mov.w	r3, #0
 8003726:	e9d7 4500 	ldrd	r4, r5, [r7]
 800372a:	4629      	mov	r1, r5
 800372c:	028b      	lsls	r3, r1, #10
 800372e:	4621      	mov	r1, r4
 8003730:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003734:	4621      	mov	r1, r4
 8003736:	028a      	lsls	r2, r1, #10
 8003738:	4610      	mov	r0, r2
 800373a:	4619      	mov	r1, r3
 800373c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800373e:	2200      	movs	r2, #0
 8003740:	61bb      	str	r3, [r7, #24]
 8003742:	61fa      	str	r2, [r7, #28]
 8003744:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003748:	f7fc fda2 	bl	8000290 <__aeabi_uldivmod>
 800374c:	4602      	mov	r2, r0
 800374e:	460b      	mov	r3, r1
 8003750:	4613      	mov	r3, r2
 8003752:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003754:	4b0b      	ldr	r3, [pc, #44]	@ (8003784 <HAL_RCC_GetSysClockFreq+0x200>)
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	0c1b      	lsrs	r3, r3, #16
 800375a:	f003 0303 	and.w	r3, r3, #3
 800375e:	3301      	adds	r3, #1
 8003760:	005b      	lsls	r3, r3, #1
 8003762:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003764:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003766:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003768:	fbb2 f3f3 	udiv	r3, r2, r3
 800376c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800376e:	e002      	b.n	8003776 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003770:	4b05      	ldr	r3, [pc, #20]	@ (8003788 <HAL_RCC_GetSysClockFreq+0x204>)
 8003772:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003774:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003776:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003778:	4618      	mov	r0, r3
 800377a:	3750      	adds	r7, #80	@ 0x50
 800377c:	46bd      	mov	sp, r7
 800377e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003782:	bf00      	nop
 8003784:	40023800 	.word	0x40023800
 8003788:	00f42400 	.word	0x00f42400
 800378c:	007a1200 	.word	0x007a1200

08003790 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003790:	b480      	push	{r7}
 8003792:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003794:	4b03      	ldr	r3, [pc, #12]	@ (80037a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003796:	681b      	ldr	r3, [r3, #0]
}
 8003798:	4618      	mov	r0, r3
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	20000000 	.word	0x20000000

080037a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80037ac:	f7ff fff0 	bl	8003790 <HAL_RCC_GetHCLKFreq>
 80037b0:	4602      	mov	r2, r0
 80037b2:	4b05      	ldr	r3, [pc, #20]	@ (80037c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	0a9b      	lsrs	r3, r3, #10
 80037b8:	f003 0307 	and.w	r3, r3, #7
 80037bc:	4903      	ldr	r1, [pc, #12]	@ (80037cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80037be:	5ccb      	ldrb	r3, [r1, r3]
 80037c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	40023800 	.word	0x40023800
 80037cc:	080054a0 	.word	0x080054a0

080037d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80037d4:	f7ff ffdc 	bl	8003790 <HAL_RCC_GetHCLKFreq>
 80037d8:	4602      	mov	r2, r0
 80037da:	4b05      	ldr	r3, [pc, #20]	@ (80037f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	0b5b      	lsrs	r3, r3, #13
 80037e0:	f003 0307 	and.w	r3, r3, #7
 80037e4:	4903      	ldr	r1, [pc, #12]	@ (80037f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037e6:	5ccb      	ldrb	r3, [r1, r3]
 80037e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	40023800 	.word	0x40023800
 80037f4:	080054a0 	.word	0x080054a0

080037f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b082      	sub	sp, #8
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d101      	bne.n	800380a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e041      	b.n	800388e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003810:	b2db      	uxtb	r3, r3
 8003812:	2b00      	cmp	r3, #0
 8003814:	d106      	bne.n	8003824 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f7fd fddc 	bl	80013dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2202      	movs	r2, #2
 8003828:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	3304      	adds	r3, #4
 8003834:	4619      	mov	r1, r3
 8003836:	4610      	mov	r0, r2
 8003838:	f000 f8f4 	bl	8003a24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800388c:	2300      	movs	r3, #0
}
 800388e:	4618      	mov	r0, r3
 8003890:	3708      	adds	r7, #8
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}

08003896 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003896:	b580      	push	{r7, lr}
 8003898:	b084      	sub	sp, #16
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
 800389e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038a0:	2300      	movs	r3, #0
 80038a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d101      	bne.n	80038b2 <HAL_TIM_ConfigClockSource+0x1c>
 80038ae:	2302      	movs	r3, #2
 80038b0:	e0b4      	b.n	8003a1c <HAL_TIM_ConfigClockSource+0x186>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2201      	movs	r2, #1
 80038b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2202      	movs	r2, #2
 80038be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80038d0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80038d8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	68ba      	ldr	r2, [r7, #8]
 80038e0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038ea:	d03e      	beq.n	800396a <HAL_TIM_ConfigClockSource+0xd4>
 80038ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038f0:	f200 8087 	bhi.w	8003a02 <HAL_TIM_ConfigClockSource+0x16c>
 80038f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038f8:	f000 8086 	beq.w	8003a08 <HAL_TIM_ConfigClockSource+0x172>
 80038fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003900:	d87f      	bhi.n	8003a02 <HAL_TIM_ConfigClockSource+0x16c>
 8003902:	2b70      	cmp	r3, #112	@ 0x70
 8003904:	d01a      	beq.n	800393c <HAL_TIM_ConfigClockSource+0xa6>
 8003906:	2b70      	cmp	r3, #112	@ 0x70
 8003908:	d87b      	bhi.n	8003a02 <HAL_TIM_ConfigClockSource+0x16c>
 800390a:	2b60      	cmp	r3, #96	@ 0x60
 800390c:	d050      	beq.n	80039b0 <HAL_TIM_ConfigClockSource+0x11a>
 800390e:	2b60      	cmp	r3, #96	@ 0x60
 8003910:	d877      	bhi.n	8003a02 <HAL_TIM_ConfigClockSource+0x16c>
 8003912:	2b50      	cmp	r3, #80	@ 0x50
 8003914:	d03c      	beq.n	8003990 <HAL_TIM_ConfigClockSource+0xfa>
 8003916:	2b50      	cmp	r3, #80	@ 0x50
 8003918:	d873      	bhi.n	8003a02 <HAL_TIM_ConfigClockSource+0x16c>
 800391a:	2b40      	cmp	r3, #64	@ 0x40
 800391c:	d058      	beq.n	80039d0 <HAL_TIM_ConfigClockSource+0x13a>
 800391e:	2b40      	cmp	r3, #64	@ 0x40
 8003920:	d86f      	bhi.n	8003a02 <HAL_TIM_ConfigClockSource+0x16c>
 8003922:	2b30      	cmp	r3, #48	@ 0x30
 8003924:	d064      	beq.n	80039f0 <HAL_TIM_ConfigClockSource+0x15a>
 8003926:	2b30      	cmp	r3, #48	@ 0x30
 8003928:	d86b      	bhi.n	8003a02 <HAL_TIM_ConfigClockSource+0x16c>
 800392a:	2b20      	cmp	r3, #32
 800392c:	d060      	beq.n	80039f0 <HAL_TIM_ConfigClockSource+0x15a>
 800392e:	2b20      	cmp	r3, #32
 8003930:	d867      	bhi.n	8003a02 <HAL_TIM_ConfigClockSource+0x16c>
 8003932:	2b00      	cmp	r3, #0
 8003934:	d05c      	beq.n	80039f0 <HAL_TIM_ConfigClockSource+0x15a>
 8003936:	2b10      	cmp	r3, #16
 8003938:	d05a      	beq.n	80039f0 <HAL_TIM_ConfigClockSource+0x15a>
 800393a:	e062      	b.n	8003a02 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800394c:	f000 f990 	bl	8003c70 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800395e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	68ba      	ldr	r2, [r7, #8]
 8003966:	609a      	str	r2, [r3, #8]
      break;
 8003968:	e04f      	b.n	8003a0a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800397a:	f000 f979 	bl	8003c70 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	689a      	ldr	r2, [r3, #8]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800398c:	609a      	str	r2, [r3, #8]
      break;
 800398e:	e03c      	b.n	8003a0a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800399c:	461a      	mov	r2, r3
 800399e:	f000 f8ed 	bl	8003b7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2150      	movs	r1, #80	@ 0x50
 80039a8:	4618      	mov	r0, r3
 80039aa:	f000 f946 	bl	8003c3a <TIM_ITRx_SetConfig>
      break;
 80039ae:	e02c      	b.n	8003a0a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80039bc:	461a      	mov	r2, r3
 80039be:	f000 f90c 	bl	8003bda <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2160      	movs	r1, #96	@ 0x60
 80039c8:	4618      	mov	r0, r3
 80039ca:	f000 f936 	bl	8003c3a <TIM_ITRx_SetConfig>
      break;
 80039ce:	e01c      	b.n	8003a0a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039dc:	461a      	mov	r2, r3
 80039de:	f000 f8cd 	bl	8003b7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2140      	movs	r1, #64	@ 0x40
 80039e8:	4618      	mov	r0, r3
 80039ea:	f000 f926 	bl	8003c3a <TIM_ITRx_SetConfig>
      break;
 80039ee:	e00c      	b.n	8003a0a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4619      	mov	r1, r3
 80039fa:	4610      	mov	r0, r2
 80039fc:	f000 f91d 	bl	8003c3a <TIM_ITRx_SetConfig>
      break;
 8003a00:	e003      	b.n	8003a0a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	73fb      	strb	r3, [r7, #15]
      break;
 8003a06:	e000      	b.n	8003a0a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003a08:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003a1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3710      	adds	r7, #16
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b085      	sub	sp, #20
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	4a46      	ldr	r2, [pc, #280]	@ (8003b50 <TIM_Base_SetConfig+0x12c>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d013      	beq.n	8003a64 <TIM_Base_SetConfig+0x40>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a42:	d00f      	beq.n	8003a64 <TIM_Base_SetConfig+0x40>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4a43      	ldr	r2, [pc, #268]	@ (8003b54 <TIM_Base_SetConfig+0x130>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d00b      	beq.n	8003a64 <TIM_Base_SetConfig+0x40>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	4a42      	ldr	r2, [pc, #264]	@ (8003b58 <TIM_Base_SetConfig+0x134>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d007      	beq.n	8003a64 <TIM_Base_SetConfig+0x40>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	4a41      	ldr	r2, [pc, #260]	@ (8003b5c <TIM_Base_SetConfig+0x138>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d003      	beq.n	8003a64 <TIM_Base_SetConfig+0x40>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4a40      	ldr	r2, [pc, #256]	@ (8003b60 <TIM_Base_SetConfig+0x13c>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d108      	bne.n	8003a76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	68fa      	ldr	r2, [r7, #12]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a35      	ldr	r2, [pc, #212]	@ (8003b50 <TIM_Base_SetConfig+0x12c>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d02b      	beq.n	8003ad6 <TIM_Base_SetConfig+0xb2>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a84:	d027      	beq.n	8003ad6 <TIM_Base_SetConfig+0xb2>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a32      	ldr	r2, [pc, #200]	@ (8003b54 <TIM_Base_SetConfig+0x130>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d023      	beq.n	8003ad6 <TIM_Base_SetConfig+0xb2>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a31      	ldr	r2, [pc, #196]	@ (8003b58 <TIM_Base_SetConfig+0x134>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d01f      	beq.n	8003ad6 <TIM_Base_SetConfig+0xb2>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a30      	ldr	r2, [pc, #192]	@ (8003b5c <TIM_Base_SetConfig+0x138>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d01b      	beq.n	8003ad6 <TIM_Base_SetConfig+0xb2>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a2f      	ldr	r2, [pc, #188]	@ (8003b60 <TIM_Base_SetConfig+0x13c>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d017      	beq.n	8003ad6 <TIM_Base_SetConfig+0xb2>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a2e      	ldr	r2, [pc, #184]	@ (8003b64 <TIM_Base_SetConfig+0x140>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d013      	beq.n	8003ad6 <TIM_Base_SetConfig+0xb2>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a2d      	ldr	r2, [pc, #180]	@ (8003b68 <TIM_Base_SetConfig+0x144>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d00f      	beq.n	8003ad6 <TIM_Base_SetConfig+0xb2>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a2c      	ldr	r2, [pc, #176]	@ (8003b6c <TIM_Base_SetConfig+0x148>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d00b      	beq.n	8003ad6 <TIM_Base_SetConfig+0xb2>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a2b      	ldr	r2, [pc, #172]	@ (8003b70 <TIM_Base_SetConfig+0x14c>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d007      	beq.n	8003ad6 <TIM_Base_SetConfig+0xb2>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4a2a      	ldr	r2, [pc, #168]	@ (8003b74 <TIM_Base_SetConfig+0x150>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d003      	beq.n	8003ad6 <TIM_Base_SetConfig+0xb2>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a29      	ldr	r2, [pc, #164]	@ (8003b78 <TIM_Base_SetConfig+0x154>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d108      	bne.n	8003ae8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003adc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	68fa      	ldr	r2, [r7, #12]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	695b      	ldr	r3, [r3, #20]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	68fa      	ldr	r2, [r7, #12]
 8003afa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	689a      	ldr	r2, [r3, #8]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	4a10      	ldr	r2, [pc, #64]	@ (8003b50 <TIM_Base_SetConfig+0x12c>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d003      	beq.n	8003b1c <TIM_Base_SetConfig+0xf8>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	4a12      	ldr	r2, [pc, #72]	@ (8003b60 <TIM_Base_SetConfig+0x13c>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d103      	bne.n	8003b24 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	691a      	ldr	r2, [r3, #16]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	f003 0301 	and.w	r3, r3, #1
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d105      	bne.n	8003b42 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	f023 0201 	bic.w	r2, r3, #1
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	611a      	str	r2, [r3, #16]
  }
}
 8003b42:	bf00      	nop
 8003b44:	3714      	adds	r7, #20
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	40010000 	.word	0x40010000
 8003b54:	40000400 	.word	0x40000400
 8003b58:	40000800 	.word	0x40000800
 8003b5c:	40000c00 	.word	0x40000c00
 8003b60:	40010400 	.word	0x40010400
 8003b64:	40014000 	.word	0x40014000
 8003b68:	40014400 	.word	0x40014400
 8003b6c:	40014800 	.word	0x40014800
 8003b70:	40001800 	.word	0x40001800
 8003b74:	40001c00 	.word	0x40001c00
 8003b78:	40002000 	.word	0x40002000

08003b7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b087      	sub	sp, #28
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	60f8      	str	r0, [r7, #12]
 8003b84:	60b9      	str	r1, [r7, #8]
 8003b86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6a1b      	ldr	r3, [r3, #32]
 8003b8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6a1b      	ldr	r3, [r3, #32]
 8003b92:	f023 0201 	bic.w	r2, r3, #1
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003ba6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	011b      	lsls	r3, r3, #4
 8003bac:	693a      	ldr	r2, [r7, #16]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	f023 030a 	bic.w	r3, r3, #10
 8003bb8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003bba:	697a      	ldr	r2, [r7, #20]
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	693a      	ldr	r2, [r7, #16]
 8003bc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	697a      	ldr	r2, [r7, #20]
 8003bcc:	621a      	str	r2, [r3, #32]
}
 8003bce:	bf00      	nop
 8003bd0:	371c      	adds	r7, #28
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr

08003bda <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bda:	b480      	push	{r7}
 8003bdc:	b087      	sub	sp, #28
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	60f8      	str	r0, [r7, #12]
 8003be2:	60b9      	str	r1, [r7, #8]
 8003be4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6a1b      	ldr	r3, [r3, #32]
 8003bea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6a1b      	ldr	r3, [r3, #32]
 8003bf0:	f023 0210 	bic.w	r2, r3, #16
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	699b      	ldr	r3, [r3, #24]
 8003bfc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003c04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	031b      	lsls	r3, r3, #12
 8003c0a:	693a      	ldr	r2, [r7, #16]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003c16:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	011b      	lsls	r3, r3, #4
 8003c1c:	697a      	ldr	r2, [r7, #20]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	693a      	ldr	r2, [r7, #16]
 8003c26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	697a      	ldr	r2, [r7, #20]
 8003c2c:	621a      	str	r2, [r3, #32]
}
 8003c2e:	bf00      	nop
 8003c30:	371c      	adds	r7, #28
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr

08003c3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c3a:	b480      	push	{r7}
 8003c3c:	b085      	sub	sp, #20
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
 8003c42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c52:	683a      	ldr	r2, [r7, #0]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	f043 0307 	orr.w	r3, r3, #7
 8003c5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	68fa      	ldr	r2, [r7, #12]
 8003c62:	609a      	str	r2, [r3, #8]
}
 8003c64:	bf00      	nop
 8003c66:	3714      	adds	r7, #20
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr

08003c70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b087      	sub	sp, #28
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	60b9      	str	r1, [r7, #8]
 8003c7a:	607a      	str	r2, [r7, #4]
 8003c7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003c8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	021a      	lsls	r2, r3, #8
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	431a      	orrs	r2, r3
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	697a      	ldr	r2, [r7, #20]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	697a      	ldr	r2, [r7, #20]
 8003ca2:	609a      	str	r2, [r3, #8]
}
 8003ca4:	bf00      	nop
 8003ca6:	371c      	adds	r7, #28
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr

08003cb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b085      	sub	sp, #20
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d101      	bne.n	8003cc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003cc4:	2302      	movs	r3, #2
 8003cc6:	e05a      	b.n	8003d7e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2202      	movs	r2, #2
 8003cd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68fa      	ldr	r2, [r7, #12]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	68fa      	ldr	r2, [r7, #12]
 8003d00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a21      	ldr	r2, [pc, #132]	@ (8003d8c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d022      	beq.n	8003d52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d14:	d01d      	beq.n	8003d52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a1d      	ldr	r2, [pc, #116]	@ (8003d90 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d018      	beq.n	8003d52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a1b      	ldr	r2, [pc, #108]	@ (8003d94 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d013      	beq.n	8003d52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a1a      	ldr	r2, [pc, #104]	@ (8003d98 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d00e      	beq.n	8003d52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a18      	ldr	r2, [pc, #96]	@ (8003d9c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d009      	beq.n	8003d52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a17      	ldr	r2, [pc, #92]	@ (8003da0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d004      	beq.n	8003d52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a15      	ldr	r2, [pc, #84]	@ (8003da4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d10c      	bne.n	8003d6c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	68ba      	ldr	r2, [r7, #8]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	68ba      	ldr	r2, [r7, #8]
 8003d6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3714      	adds	r7, #20
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	40010000 	.word	0x40010000
 8003d90:	40000400 	.word	0x40000400
 8003d94:	40000800 	.word	0x40000800
 8003d98:	40000c00 	.word	0x40000c00
 8003d9c:	40010400 	.word	0x40010400
 8003da0:	40014000 	.word	0x40014000
 8003da4:	40001800 	.word	0x40001800

08003da8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d101      	bne.n	8003dba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e042      	b.n	8003e40 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d106      	bne.n	8003dd4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f7fd fb26 	bl	8001420 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2224      	movs	r2, #36	@ 0x24
 8003dd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	68da      	ldr	r2, [r3, #12]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003dea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f000 f973 	bl	80040d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	691a      	ldr	r2, [r3, #16]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003e00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	695a      	ldr	r2, [r3, #20]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003e10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68da      	ldr	r2, [r3, #12]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2220      	movs	r2, #32
 8003e2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2220      	movs	r2, #32
 8003e34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003e3e:	2300      	movs	r3, #0
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3708      	adds	r7, #8
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}

08003e48 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b08a      	sub	sp, #40	@ 0x28
 8003e4c:	af02      	add	r7, sp, #8
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	60b9      	str	r1, [r7, #8]
 8003e52:	603b      	str	r3, [r7, #0]
 8003e54:	4613      	mov	r3, r2
 8003e56:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	2b20      	cmp	r3, #32
 8003e66:	d175      	bne.n	8003f54 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d002      	beq.n	8003e74 <HAL_UART_Transmit+0x2c>
 8003e6e:	88fb      	ldrh	r3, [r7, #6]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d101      	bne.n	8003e78 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e06e      	b.n	8003f56 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2221      	movs	r2, #33	@ 0x21
 8003e82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e86:	f7fd fc87 	bl	8001798 <HAL_GetTick>
 8003e8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	88fa      	ldrh	r2, [r7, #6]
 8003e90:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	88fa      	ldrh	r2, [r7, #6]
 8003e96:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ea0:	d108      	bne.n	8003eb4 <HAL_UART_Transmit+0x6c>
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	691b      	ldr	r3, [r3, #16]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d104      	bne.n	8003eb4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	61bb      	str	r3, [r7, #24]
 8003eb2:	e003      	b.n	8003ebc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003ebc:	e02e      	b.n	8003f1c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	9300      	str	r3, [sp, #0]
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	2180      	movs	r1, #128	@ 0x80
 8003ec8:	68f8      	ldr	r0, [r7, #12]
 8003eca:	f000 f848 	bl	8003f5e <UART_WaitOnFlagUntilTimeout>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d005      	beq.n	8003ee0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2220      	movs	r2, #32
 8003ed8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003edc:	2303      	movs	r3, #3
 8003ede:	e03a      	b.n	8003f56 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d10b      	bne.n	8003efe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ee6:	69bb      	ldr	r3, [r7, #24]
 8003ee8:	881b      	ldrh	r3, [r3, #0]
 8003eea:	461a      	mov	r2, r3
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ef4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	3302      	adds	r3, #2
 8003efa:	61bb      	str	r3, [r7, #24]
 8003efc:	e007      	b.n	8003f0e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	781a      	ldrb	r2, [r3, #0]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	3301      	adds	r3, #1
 8003f0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	3b01      	subs	r3, #1
 8003f16:	b29a      	uxth	r2, r3
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d1cb      	bne.n	8003ebe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	9300      	str	r3, [sp, #0]
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	2140      	movs	r1, #64	@ 0x40
 8003f30:	68f8      	ldr	r0, [r7, #12]
 8003f32:	f000 f814 	bl	8003f5e <UART_WaitOnFlagUntilTimeout>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d005      	beq.n	8003f48 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2220      	movs	r2, #32
 8003f40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e006      	b.n	8003f56 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2220      	movs	r2, #32
 8003f4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003f50:	2300      	movs	r3, #0
 8003f52:	e000      	b.n	8003f56 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003f54:	2302      	movs	r3, #2
  }
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3720      	adds	r7, #32
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}

08003f5e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003f5e:	b580      	push	{r7, lr}
 8003f60:	b086      	sub	sp, #24
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	60f8      	str	r0, [r7, #12]
 8003f66:	60b9      	str	r1, [r7, #8]
 8003f68:	603b      	str	r3, [r7, #0]
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f6e:	e03b      	b.n	8003fe8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f70:	6a3b      	ldr	r3, [r7, #32]
 8003f72:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003f76:	d037      	beq.n	8003fe8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f78:	f7fd fc0e 	bl	8001798 <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	6a3a      	ldr	r2, [r7, #32]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d302      	bcc.n	8003f8e <UART_WaitOnFlagUntilTimeout+0x30>
 8003f88:	6a3b      	ldr	r3, [r7, #32]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d101      	bne.n	8003f92 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e03a      	b.n	8004008 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	f003 0304 	and.w	r3, r3, #4
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d023      	beq.n	8003fe8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	2b80      	cmp	r3, #128	@ 0x80
 8003fa4:	d020      	beq.n	8003fe8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	2b40      	cmp	r3, #64	@ 0x40
 8003faa:	d01d      	beq.n	8003fe8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0308 	and.w	r3, r3, #8
 8003fb6:	2b08      	cmp	r3, #8
 8003fb8:	d116      	bne.n	8003fe8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003fba:	2300      	movs	r3, #0
 8003fbc:	617b      	str	r3, [r7, #20]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	617b      	str	r3, [r7, #20]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	617b      	str	r3, [r7, #20]
 8003fce:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003fd0:	68f8      	ldr	r0, [r7, #12]
 8003fd2:	f000 f81d 	bl	8004010 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2208      	movs	r2, #8
 8003fda:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e00f      	b.n	8004008 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	68ba      	ldr	r2, [r7, #8]
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	bf0c      	ite	eq
 8003ff8:	2301      	moveq	r3, #1
 8003ffa:	2300      	movne	r3, #0
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	461a      	mov	r2, r3
 8004000:	79fb      	ldrb	r3, [r7, #7]
 8004002:	429a      	cmp	r2, r3
 8004004:	d0b4      	beq.n	8003f70 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004006:	2300      	movs	r3, #0
}
 8004008:	4618      	mov	r0, r3
 800400a:	3718      	adds	r7, #24
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}

08004010 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004010:	b480      	push	{r7}
 8004012:	b095      	sub	sp, #84	@ 0x54
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	330c      	adds	r3, #12
 800401e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004020:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004022:	e853 3f00 	ldrex	r3, [r3]
 8004026:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800402a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800402e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	330c      	adds	r3, #12
 8004036:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004038:	643a      	str	r2, [r7, #64]	@ 0x40
 800403a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800403c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800403e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004040:	e841 2300 	strex	r3, r2, [r1]
 8004044:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004046:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004048:	2b00      	cmp	r3, #0
 800404a:	d1e5      	bne.n	8004018 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	3314      	adds	r3, #20
 8004052:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004054:	6a3b      	ldr	r3, [r7, #32]
 8004056:	e853 3f00 	ldrex	r3, [r3]
 800405a:	61fb      	str	r3, [r7, #28]
   return(result);
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	f023 0301 	bic.w	r3, r3, #1
 8004062:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	3314      	adds	r3, #20
 800406a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800406c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800406e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004070:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004072:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004074:	e841 2300 	strex	r3, r2, [r1]
 8004078:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800407a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800407c:	2b00      	cmp	r3, #0
 800407e:	d1e5      	bne.n	800404c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004084:	2b01      	cmp	r3, #1
 8004086:	d119      	bne.n	80040bc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	330c      	adds	r3, #12
 800408e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	e853 3f00 	ldrex	r3, [r3]
 8004096:	60bb      	str	r3, [r7, #8]
   return(result);
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	f023 0310 	bic.w	r3, r3, #16
 800409e:	647b      	str	r3, [r7, #68]	@ 0x44
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	330c      	adds	r3, #12
 80040a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80040a8:	61ba      	str	r2, [r7, #24]
 80040aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ac:	6979      	ldr	r1, [r7, #20]
 80040ae:	69ba      	ldr	r2, [r7, #24]
 80040b0:	e841 2300 	strex	r3, r2, [r1]
 80040b4:	613b      	str	r3, [r7, #16]
   return(result);
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d1e5      	bne.n	8004088 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2220      	movs	r2, #32
 80040c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80040ca:	bf00      	nop
 80040cc:	3754      	adds	r7, #84	@ 0x54
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr
	...

080040d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040dc:	b0c0      	sub	sp, #256	@ 0x100
 80040de:	af00      	add	r7, sp, #0
 80040e0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	691b      	ldr	r3, [r3, #16]
 80040ec:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80040f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040f4:	68d9      	ldr	r1, [r3, #12]
 80040f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	ea40 0301 	orr.w	r3, r0, r1
 8004100:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004106:	689a      	ldr	r2, [r3, #8]
 8004108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	431a      	orrs	r2, r3
 8004110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004114:	695b      	ldr	r3, [r3, #20]
 8004116:	431a      	orrs	r2, r3
 8004118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800411c:	69db      	ldr	r3, [r3, #28]
 800411e:	4313      	orrs	r3, r2
 8004120:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004130:	f021 010c 	bic.w	r1, r1, #12
 8004134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800413e:	430b      	orrs	r3, r1
 8004140:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	695b      	ldr	r3, [r3, #20]
 800414a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800414e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004152:	6999      	ldr	r1, [r3, #24]
 8004154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	ea40 0301 	orr.w	r3, r0, r1
 800415e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	4b8f      	ldr	r3, [pc, #572]	@ (80043a4 <UART_SetConfig+0x2cc>)
 8004168:	429a      	cmp	r2, r3
 800416a:	d005      	beq.n	8004178 <UART_SetConfig+0xa0>
 800416c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	4b8d      	ldr	r3, [pc, #564]	@ (80043a8 <UART_SetConfig+0x2d0>)
 8004174:	429a      	cmp	r2, r3
 8004176:	d104      	bne.n	8004182 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004178:	f7ff fb2a 	bl	80037d0 <HAL_RCC_GetPCLK2Freq>
 800417c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004180:	e003      	b.n	800418a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004182:	f7ff fb11 	bl	80037a8 <HAL_RCC_GetPCLK1Freq>
 8004186:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800418a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800418e:	69db      	ldr	r3, [r3, #28]
 8004190:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004194:	f040 810c 	bne.w	80043b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004198:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800419c:	2200      	movs	r2, #0
 800419e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80041a2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80041a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80041aa:	4622      	mov	r2, r4
 80041ac:	462b      	mov	r3, r5
 80041ae:	1891      	adds	r1, r2, r2
 80041b0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80041b2:	415b      	adcs	r3, r3
 80041b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80041b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80041ba:	4621      	mov	r1, r4
 80041bc:	eb12 0801 	adds.w	r8, r2, r1
 80041c0:	4629      	mov	r1, r5
 80041c2:	eb43 0901 	adc.w	r9, r3, r1
 80041c6:	f04f 0200 	mov.w	r2, #0
 80041ca:	f04f 0300 	mov.w	r3, #0
 80041ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041da:	4690      	mov	r8, r2
 80041dc:	4699      	mov	r9, r3
 80041de:	4623      	mov	r3, r4
 80041e0:	eb18 0303 	adds.w	r3, r8, r3
 80041e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80041e8:	462b      	mov	r3, r5
 80041ea:	eb49 0303 	adc.w	r3, r9, r3
 80041ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80041f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80041fe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004202:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004206:	460b      	mov	r3, r1
 8004208:	18db      	adds	r3, r3, r3
 800420a:	653b      	str	r3, [r7, #80]	@ 0x50
 800420c:	4613      	mov	r3, r2
 800420e:	eb42 0303 	adc.w	r3, r2, r3
 8004212:	657b      	str	r3, [r7, #84]	@ 0x54
 8004214:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004218:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800421c:	f7fc f838 	bl	8000290 <__aeabi_uldivmod>
 8004220:	4602      	mov	r2, r0
 8004222:	460b      	mov	r3, r1
 8004224:	4b61      	ldr	r3, [pc, #388]	@ (80043ac <UART_SetConfig+0x2d4>)
 8004226:	fba3 2302 	umull	r2, r3, r3, r2
 800422a:	095b      	lsrs	r3, r3, #5
 800422c:	011c      	lsls	r4, r3, #4
 800422e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004232:	2200      	movs	r2, #0
 8004234:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004238:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800423c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004240:	4642      	mov	r2, r8
 8004242:	464b      	mov	r3, r9
 8004244:	1891      	adds	r1, r2, r2
 8004246:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004248:	415b      	adcs	r3, r3
 800424a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800424c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004250:	4641      	mov	r1, r8
 8004252:	eb12 0a01 	adds.w	sl, r2, r1
 8004256:	4649      	mov	r1, r9
 8004258:	eb43 0b01 	adc.w	fp, r3, r1
 800425c:	f04f 0200 	mov.w	r2, #0
 8004260:	f04f 0300 	mov.w	r3, #0
 8004264:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004268:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800426c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004270:	4692      	mov	sl, r2
 8004272:	469b      	mov	fp, r3
 8004274:	4643      	mov	r3, r8
 8004276:	eb1a 0303 	adds.w	r3, sl, r3
 800427a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800427e:	464b      	mov	r3, r9
 8004280:	eb4b 0303 	adc.w	r3, fp, r3
 8004284:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004294:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004298:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800429c:	460b      	mov	r3, r1
 800429e:	18db      	adds	r3, r3, r3
 80042a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80042a2:	4613      	mov	r3, r2
 80042a4:	eb42 0303 	adc.w	r3, r2, r3
 80042a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80042aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80042ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80042b2:	f7fb ffed 	bl	8000290 <__aeabi_uldivmod>
 80042b6:	4602      	mov	r2, r0
 80042b8:	460b      	mov	r3, r1
 80042ba:	4611      	mov	r1, r2
 80042bc:	4b3b      	ldr	r3, [pc, #236]	@ (80043ac <UART_SetConfig+0x2d4>)
 80042be:	fba3 2301 	umull	r2, r3, r3, r1
 80042c2:	095b      	lsrs	r3, r3, #5
 80042c4:	2264      	movs	r2, #100	@ 0x64
 80042c6:	fb02 f303 	mul.w	r3, r2, r3
 80042ca:	1acb      	subs	r3, r1, r3
 80042cc:	00db      	lsls	r3, r3, #3
 80042ce:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80042d2:	4b36      	ldr	r3, [pc, #216]	@ (80043ac <UART_SetConfig+0x2d4>)
 80042d4:	fba3 2302 	umull	r2, r3, r3, r2
 80042d8:	095b      	lsrs	r3, r3, #5
 80042da:	005b      	lsls	r3, r3, #1
 80042dc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80042e0:	441c      	add	r4, r3
 80042e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042e6:	2200      	movs	r2, #0
 80042e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80042ec:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80042f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80042f4:	4642      	mov	r2, r8
 80042f6:	464b      	mov	r3, r9
 80042f8:	1891      	adds	r1, r2, r2
 80042fa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80042fc:	415b      	adcs	r3, r3
 80042fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004300:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004304:	4641      	mov	r1, r8
 8004306:	1851      	adds	r1, r2, r1
 8004308:	6339      	str	r1, [r7, #48]	@ 0x30
 800430a:	4649      	mov	r1, r9
 800430c:	414b      	adcs	r3, r1
 800430e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004310:	f04f 0200 	mov.w	r2, #0
 8004314:	f04f 0300 	mov.w	r3, #0
 8004318:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800431c:	4659      	mov	r1, fp
 800431e:	00cb      	lsls	r3, r1, #3
 8004320:	4651      	mov	r1, sl
 8004322:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004326:	4651      	mov	r1, sl
 8004328:	00ca      	lsls	r2, r1, #3
 800432a:	4610      	mov	r0, r2
 800432c:	4619      	mov	r1, r3
 800432e:	4603      	mov	r3, r0
 8004330:	4642      	mov	r2, r8
 8004332:	189b      	adds	r3, r3, r2
 8004334:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004338:	464b      	mov	r3, r9
 800433a:	460a      	mov	r2, r1
 800433c:	eb42 0303 	adc.w	r3, r2, r3
 8004340:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004350:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004354:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004358:	460b      	mov	r3, r1
 800435a:	18db      	adds	r3, r3, r3
 800435c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800435e:	4613      	mov	r3, r2
 8004360:	eb42 0303 	adc.w	r3, r2, r3
 8004364:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004366:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800436a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800436e:	f7fb ff8f 	bl	8000290 <__aeabi_uldivmod>
 8004372:	4602      	mov	r2, r0
 8004374:	460b      	mov	r3, r1
 8004376:	4b0d      	ldr	r3, [pc, #52]	@ (80043ac <UART_SetConfig+0x2d4>)
 8004378:	fba3 1302 	umull	r1, r3, r3, r2
 800437c:	095b      	lsrs	r3, r3, #5
 800437e:	2164      	movs	r1, #100	@ 0x64
 8004380:	fb01 f303 	mul.w	r3, r1, r3
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	00db      	lsls	r3, r3, #3
 8004388:	3332      	adds	r3, #50	@ 0x32
 800438a:	4a08      	ldr	r2, [pc, #32]	@ (80043ac <UART_SetConfig+0x2d4>)
 800438c:	fba2 2303 	umull	r2, r3, r2, r3
 8004390:	095b      	lsrs	r3, r3, #5
 8004392:	f003 0207 	and.w	r2, r3, #7
 8004396:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4422      	add	r2, r4
 800439e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80043a0:	e106      	b.n	80045b0 <UART_SetConfig+0x4d8>
 80043a2:	bf00      	nop
 80043a4:	40011000 	.word	0x40011000
 80043a8:	40011400 	.word	0x40011400
 80043ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043b4:	2200      	movs	r2, #0
 80043b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80043ba:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80043be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80043c2:	4642      	mov	r2, r8
 80043c4:	464b      	mov	r3, r9
 80043c6:	1891      	adds	r1, r2, r2
 80043c8:	6239      	str	r1, [r7, #32]
 80043ca:	415b      	adcs	r3, r3
 80043cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80043ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80043d2:	4641      	mov	r1, r8
 80043d4:	1854      	adds	r4, r2, r1
 80043d6:	4649      	mov	r1, r9
 80043d8:	eb43 0501 	adc.w	r5, r3, r1
 80043dc:	f04f 0200 	mov.w	r2, #0
 80043e0:	f04f 0300 	mov.w	r3, #0
 80043e4:	00eb      	lsls	r3, r5, #3
 80043e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043ea:	00e2      	lsls	r2, r4, #3
 80043ec:	4614      	mov	r4, r2
 80043ee:	461d      	mov	r5, r3
 80043f0:	4643      	mov	r3, r8
 80043f2:	18e3      	adds	r3, r4, r3
 80043f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80043f8:	464b      	mov	r3, r9
 80043fa:	eb45 0303 	adc.w	r3, r5, r3
 80043fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800440e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004412:	f04f 0200 	mov.w	r2, #0
 8004416:	f04f 0300 	mov.w	r3, #0
 800441a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800441e:	4629      	mov	r1, r5
 8004420:	008b      	lsls	r3, r1, #2
 8004422:	4621      	mov	r1, r4
 8004424:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004428:	4621      	mov	r1, r4
 800442a:	008a      	lsls	r2, r1, #2
 800442c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004430:	f7fb ff2e 	bl	8000290 <__aeabi_uldivmod>
 8004434:	4602      	mov	r2, r0
 8004436:	460b      	mov	r3, r1
 8004438:	4b60      	ldr	r3, [pc, #384]	@ (80045bc <UART_SetConfig+0x4e4>)
 800443a:	fba3 2302 	umull	r2, r3, r3, r2
 800443e:	095b      	lsrs	r3, r3, #5
 8004440:	011c      	lsls	r4, r3, #4
 8004442:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004446:	2200      	movs	r2, #0
 8004448:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800444c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004450:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004454:	4642      	mov	r2, r8
 8004456:	464b      	mov	r3, r9
 8004458:	1891      	adds	r1, r2, r2
 800445a:	61b9      	str	r1, [r7, #24]
 800445c:	415b      	adcs	r3, r3
 800445e:	61fb      	str	r3, [r7, #28]
 8004460:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004464:	4641      	mov	r1, r8
 8004466:	1851      	adds	r1, r2, r1
 8004468:	6139      	str	r1, [r7, #16]
 800446a:	4649      	mov	r1, r9
 800446c:	414b      	adcs	r3, r1
 800446e:	617b      	str	r3, [r7, #20]
 8004470:	f04f 0200 	mov.w	r2, #0
 8004474:	f04f 0300 	mov.w	r3, #0
 8004478:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800447c:	4659      	mov	r1, fp
 800447e:	00cb      	lsls	r3, r1, #3
 8004480:	4651      	mov	r1, sl
 8004482:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004486:	4651      	mov	r1, sl
 8004488:	00ca      	lsls	r2, r1, #3
 800448a:	4610      	mov	r0, r2
 800448c:	4619      	mov	r1, r3
 800448e:	4603      	mov	r3, r0
 8004490:	4642      	mov	r2, r8
 8004492:	189b      	adds	r3, r3, r2
 8004494:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004498:	464b      	mov	r3, r9
 800449a:	460a      	mov	r2, r1
 800449c:	eb42 0303 	adc.w	r3, r2, r3
 80044a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80044a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	67bb      	str	r3, [r7, #120]	@ 0x78
 80044ae:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80044b0:	f04f 0200 	mov.w	r2, #0
 80044b4:	f04f 0300 	mov.w	r3, #0
 80044b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80044bc:	4649      	mov	r1, r9
 80044be:	008b      	lsls	r3, r1, #2
 80044c0:	4641      	mov	r1, r8
 80044c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044c6:	4641      	mov	r1, r8
 80044c8:	008a      	lsls	r2, r1, #2
 80044ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80044ce:	f7fb fedf 	bl	8000290 <__aeabi_uldivmod>
 80044d2:	4602      	mov	r2, r0
 80044d4:	460b      	mov	r3, r1
 80044d6:	4611      	mov	r1, r2
 80044d8:	4b38      	ldr	r3, [pc, #224]	@ (80045bc <UART_SetConfig+0x4e4>)
 80044da:	fba3 2301 	umull	r2, r3, r3, r1
 80044de:	095b      	lsrs	r3, r3, #5
 80044e0:	2264      	movs	r2, #100	@ 0x64
 80044e2:	fb02 f303 	mul.w	r3, r2, r3
 80044e6:	1acb      	subs	r3, r1, r3
 80044e8:	011b      	lsls	r3, r3, #4
 80044ea:	3332      	adds	r3, #50	@ 0x32
 80044ec:	4a33      	ldr	r2, [pc, #204]	@ (80045bc <UART_SetConfig+0x4e4>)
 80044ee:	fba2 2303 	umull	r2, r3, r2, r3
 80044f2:	095b      	lsrs	r3, r3, #5
 80044f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80044f8:	441c      	add	r4, r3
 80044fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044fe:	2200      	movs	r2, #0
 8004500:	673b      	str	r3, [r7, #112]	@ 0x70
 8004502:	677a      	str	r2, [r7, #116]	@ 0x74
 8004504:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004508:	4642      	mov	r2, r8
 800450a:	464b      	mov	r3, r9
 800450c:	1891      	adds	r1, r2, r2
 800450e:	60b9      	str	r1, [r7, #8]
 8004510:	415b      	adcs	r3, r3
 8004512:	60fb      	str	r3, [r7, #12]
 8004514:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004518:	4641      	mov	r1, r8
 800451a:	1851      	adds	r1, r2, r1
 800451c:	6039      	str	r1, [r7, #0]
 800451e:	4649      	mov	r1, r9
 8004520:	414b      	adcs	r3, r1
 8004522:	607b      	str	r3, [r7, #4]
 8004524:	f04f 0200 	mov.w	r2, #0
 8004528:	f04f 0300 	mov.w	r3, #0
 800452c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004530:	4659      	mov	r1, fp
 8004532:	00cb      	lsls	r3, r1, #3
 8004534:	4651      	mov	r1, sl
 8004536:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800453a:	4651      	mov	r1, sl
 800453c:	00ca      	lsls	r2, r1, #3
 800453e:	4610      	mov	r0, r2
 8004540:	4619      	mov	r1, r3
 8004542:	4603      	mov	r3, r0
 8004544:	4642      	mov	r2, r8
 8004546:	189b      	adds	r3, r3, r2
 8004548:	66bb      	str	r3, [r7, #104]	@ 0x68
 800454a:	464b      	mov	r3, r9
 800454c:	460a      	mov	r2, r1
 800454e:	eb42 0303 	adc.w	r3, r2, r3
 8004552:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	663b      	str	r3, [r7, #96]	@ 0x60
 800455e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004560:	f04f 0200 	mov.w	r2, #0
 8004564:	f04f 0300 	mov.w	r3, #0
 8004568:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800456c:	4649      	mov	r1, r9
 800456e:	008b      	lsls	r3, r1, #2
 8004570:	4641      	mov	r1, r8
 8004572:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004576:	4641      	mov	r1, r8
 8004578:	008a      	lsls	r2, r1, #2
 800457a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800457e:	f7fb fe87 	bl	8000290 <__aeabi_uldivmod>
 8004582:	4602      	mov	r2, r0
 8004584:	460b      	mov	r3, r1
 8004586:	4b0d      	ldr	r3, [pc, #52]	@ (80045bc <UART_SetConfig+0x4e4>)
 8004588:	fba3 1302 	umull	r1, r3, r3, r2
 800458c:	095b      	lsrs	r3, r3, #5
 800458e:	2164      	movs	r1, #100	@ 0x64
 8004590:	fb01 f303 	mul.w	r3, r1, r3
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	011b      	lsls	r3, r3, #4
 8004598:	3332      	adds	r3, #50	@ 0x32
 800459a:	4a08      	ldr	r2, [pc, #32]	@ (80045bc <UART_SetConfig+0x4e4>)
 800459c:	fba2 2303 	umull	r2, r3, r2, r3
 80045a0:	095b      	lsrs	r3, r3, #5
 80045a2:	f003 020f 	and.w	r2, r3, #15
 80045a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4422      	add	r2, r4
 80045ae:	609a      	str	r2, [r3, #8]
}
 80045b0:	bf00      	nop
 80045b2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80045b6:	46bd      	mov	sp, r7
 80045b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045bc:	51eb851f 	.word	0x51eb851f

080045c0 <std>:
 80045c0:	2300      	movs	r3, #0
 80045c2:	b510      	push	{r4, lr}
 80045c4:	4604      	mov	r4, r0
 80045c6:	e9c0 3300 	strd	r3, r3, [r0]
 80045ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80045ce:	6083      	str	r3, [r0, #8]
 80045d0:	8181      	strh	r1, [r0, #12]
 80045d2:	6643      	str	r3, [r0, #100]	@ 0x64
 80045d4:	81c2      	strh	r2, [r0, #14]
 80045d6:	6183      	str	r3, [r0, #24]
 80045d8:	4619      	mov	r1, r3
 80045da:	2208      	movs	r2, #8
 80045dc:	305c      	adds	r0, #92	@ 0x5c
 80045de:	f000 f906 	bl	80047ee <memset>
 80045e2:	4b0d      	ldr	r3, [pc, #52]	@ (8004618 <std+0x58>)
 80045e4:	6263      	str	r3, [r4, #36]	@ 0x24
 80045e6:	4b0d      	ldr	r3, [pc, #52]	@ (800461c <std+0x5c>)
 80045e8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80045ea:	4b0d      	ldr	r3, [pc, #52]	@ (8004620 <std+0x60>)
 80045ec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80045ee:	4b0d      	ldr	r3, [pc, #52]	@ (8004624 <std+0x64>)
 80045f0:	6323      	str	r3, [r4, #48]	@ 0x30
 80045f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004628 <std+0x68>)
 80045f4:	6224      	str	r4, [r4, #32]
 80045f6:	429c      	cmp	r4, r3
 80045f8:	d006      	beq.n	8004608 <std+0x48>
 80045fa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80045fe:	4294      	cmp	r4, r2
 8004600:	d002      	beq.n	8004608 <std+0x48>
 8004602:	33d0      	adds	r3, #208	@ 0xd0
 8004604:	429c      	cmp	r4, r3
 8004606:	d105      	bne.n	8004614 <std+0x54>
 8004608:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800460c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004610:	f000 b966 	b.w	80048e0 <__retarget_lock_init_recursive>
 8004614:	bd10      	pop	{r4, pc}
 8004616:	bf00      	nop
 8004618:	08004769 	.word	0x08004769
 800461c:	0800478b 	.word	0x0800478b
 8004620:	080047c3 	.word	0x080047c3
 8004624:	080047e7 	.word	0x080047e7
 8004628:	200001f4 	.word	0x200001f4

0800462c <stdio_exit_handler>:
 800462c:	4a02      	ldr	r2, [pc, #8]	@ (8004638 <stdio_exit_handler+0xc>)
 800462e:	4903      	ldr	r1, [pc, #12]	@ (800463c <stdio_exit_handler+0x10>)
 8004630:	4803      	ldr	r0, [pc, #12]	@ (8004640 <stdio_exit_handler+0x14>)
 8004632:	f000 b869 	b.w	8004708 <_fwalk_sglue>
 8004636:	bf00      	nop
 8004638:	2000000c 	.word	0x2000000c
 800463c:	08005181 	.word	0x08005181
 8004640:	2000001c 	.word	0x2000001c

08004644 <cleanup_stdio>:
 8004644:	6841      	ldr	r1, [r0, #4]
 8004646:	4b0c      	ldr	r3, [pc, #48]	@ (8004678 <cleanup_stdio+0x34>)
 8004648:	4299      	cmp	r1, r3
 800464a:	b510      	push	{r4, lr}
 800464c:	4604      	mov	r4, r0
 800464e:	d001      	beq.n	8004654 <cleanup_stdio+0x10>
 8004650:	f000 fd96 	bl	8005180 <_fflush_r>
 8004654:	68a1      	ldr	r1, [r4, #8]
 8004656:	4b09      	ldr	r3, [pc, #36]	@ (800467c <cleanup_stdio+0x38>)
 8004658:	4299      	cmp	r1, r3
 800465a:	d002      	beq.n	8004662 <cleanup_stdio+0x1e>
 800465c:	4620      	mov	r0, r4
 800465e:	f000 fd8f 	bl	8005180 <_fflush_r>
 8004662:	68e1      	ldr	r1, [r4, #12]
 8004664:	4b06      	ldr	r3, [pc, #24]	@ (8004680 <cleanup_stdio+0x3c>)
 8004666:	4299      	cmp	r1, r3
 8004668:	d004      	beq.n	8004674 <cleanup_stdio+0x30>
 800466a:	4620      	mov	r0, r4
 800466c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004670:	f000 bd86 	b.w	8005180 <_fflush_r>
 8004674:	bd10      	pop	{r4, pc}
 8004676:	bf00      	nop
 8004678:	200001f4 	.word	0x200001f4
 800467c:	2000025c 	.word	0x2000025c
 8004680:	200002c4 	.word	0x200002c4

08004684 <global_stdio_init.part.0>:
 8004684:	b510      	push	{r4, lr}
 8004686:	4b0b      	ldr	r3, [pc, #44]	@ (80046b4 <global_stdio_init.part.0+0x30>)
 8004688:	4c0b      	ldr	r4, [pc, #44]	@ (80046b8 <global_stdio_init.part.0+0x34>)
 800468a:	4a0c      	ldr	r2, [pc, #48]	@ (80046bc <global_stdio_init.part.0+0x38>)
 800468c:	601a      	str	r2, [r3, #0]
 800468e:	4620      	mov	r0, r4
 8004690:	2200      	movs	r2, #0
 8004692:	2104      	movs	r1, #4
 8004694:	f7ff ff94 	bl	80045c0 <std>
 8004698:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800469c:	2201      	movs	r2, #1
 800469e:	2109      	movs	r1, #9
 80046a0:	f7ff ff8e 	bl	80045c0 <std>
 80046a4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80046a8:	2202      	movs	r2, #2
 80046aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046ae:	2112      	movs	r1, #18
 80046b0:	f7ff bf86 	b.w	80045c0 <std>
 80046b4:	2000032c 	.word	0x2000032c
 80046b8:	200001f4 	.word	0x200001f4
 80046bc:	0800462d 	.word	0x0800462d

080046c0 <__sfp_lock_acquire>:
 80046c0:	4801      	ldr	r0, [pc, #4]	@ (80046c8 <__sfp_lock_acquire+0x8>)
 80046c2:	f000 b90e 	b.w	80048e2 <__retarget_lock_acquire_recursive>
 80046c6:	bf00      	nop
 80046c8:	20000335 	.word	0x20000335

080046cc <__sfp_lock_release>:
 80046cc:	4801      	ldr	r0, [pc, #4]	@ (80046d4 <__sfp_lock_release+0x8>)
 80046ce:	f000 b909 	b.w	80048e4 <__retarget_lock_release_recursive>
 80046d2:	bf00      	nop
 80046d4:	20000335 	.word	0x20000335

080046d8 <__sinit>:
 80046d8:	b510      	push	{r4, lr}
 80046da:	4604      	mov	r4, r0
 80046dc:	f7ff fff0 	bl	80046c0 <__sfp_lock_acquire>
 80046e0:	6a23      	ldr	r3, [r4, #32]
 80046e2:	b11b      	cbz	r3, 80046ec <__sinit+0x14>
 80046e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046e8:	f7ff bff0 	b.w	80046cc <__sfp_lock_release>
 80046ec:	4b04      	ldr	r3, [pc, #16]	@ (8004700 <__sinit+0x28>)
 80046ee:	6223      	str	r3, [r4, #32]
 80046f0:	4b04      	ldr	r3, [pc, #16]	@ (8004704 <__sinit+0x2c>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d1f5      	bne.n	80046e4 <__sinit+0xc>
 80046f8:	f7ff ffc4 	bl	8004684 <global_stdio_init.part.0>
 80046fc:	e7f2      	b.n	80046e4 <__sinit+0xc>
 80046fe:	bf00      	nop
 8004700:	08004645 	.word	0x08004645
 8004704:	2000032c 	.word	0x2000032c

08004708 <_fwalk_sglue>:
 8004708:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800470c:	4607      	mov	r7, r0
 800470e:	4688      	mov	r8, r1
 8004710:	4614      	mov	r4, r2
 8004712:	2600      	movs	r6, #0
 8004714:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004718:	f1b9 0901 	subs.w	r9, r9, #1
 800471c:	d505      	bpl.n	800472a <_fwalk_sglue+0x22>
 800471e:	6824      	ldr	r4, [r4, #0]
 8004720:	2c00      	cmp	r4, #0
 8004722:	d1f7      	bne.n	8004714 <_fwalk_sglue+0xc>
 8004724:	4630      	mov	r0, r6
 8004726:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800472a:	89ab      	ldrh	r3, [r5, #12]
 800472c:	2b01      	cmp	r3, #1
 800472e:	d907      	bls.n	8004740 <_fwalk_sglue+0x38>
 8004730:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004734:	3301      	adds	r3, #1
 8004736:	d003      	beq.n	8004740 <_fwalk_sglue+0x38>
 8004738:	4629      	mov	r1, r5
 800473a:	4638      	mov	r0, r7
 800473c:	47c0      	blx	r8
 800473e:	4306      	orrs	r6, r0
 8004740:	3568      	adds	r5, #104	@ 0x68
 8004742:	e7e9      	b.n	8004718 <_fwalk_sglue+0x10>

08004744 <iprintf>:
 8004744:	b40f      	push	{r0, r1, r2, r3}
 8004746:	b507      	push	{r0, r1, r2, lr}
 8004748:	4906      	ldr	r1, [pc, #24]	@ (8004764 <iprintf+0x20>)
 800474a:	ab04      	add	r3, sp, #16
 800474c:	6808      	ldr	r0, [r1, #0]
 800474e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004752:	6881      	ldr	r1, [r0, #8]
 8004754:	9301      	str	r3, [sp, #4]
 8004756:	f000 f9e9 	bl	8004b2c <_vfiprintf_r>
 800475a:	b003      	add	sp, #12
 800475c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004760:	b004      	add	sp, #16
 8004762:	4770      	bx	lr
 8004764:	20000018 	.word	0x20000018

08004768 <__sread>:
 8004768:	b510      	push	{r4, lr}
 800476a:	460c      	mov	r4, r1
 800476c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004770:	f000 f868 	bl	8004844 <_read_r>
 8004774:	2800      	cmp	r0, #0
 8004776:	bfab      	itete	ge
 8004778:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800477a:	89a3      	ldrhlt	r3, [r4, #12]
 800477c:	181b      	addge	r3, r3, r0
 800477e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004782:	bfac      	ite	ge
 8004784:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004786:	81a3      	strhlt	r3, [r4, #12]
 8004788:	bd10      	pop	{r4, pc}

0800478a <__swrite>:
 800478a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800478e:	461f      	mov	r7, r3
 8004790:	898b      	ldrh	r3, [r1, #12]
 8004792:	05db      	lsls	r3, r3, #23
 8004794:	4605      	mov	r5, r0
 8004796:	460c      	mov	r4, r1
 8004798:	4616      	mov	r6, r2
 800479a:	d505      	bpl.n	80047a8 <__swrite+0x1e>
 800479c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047a0:	2302      	movs	r3, #2
 80047a2:	2200      	movs	r2, #0
 80047a4:	f000 f83c 	bl	8004820 <_lseek_r>
 80047a8:	89a3      	ldrh	r3, [r4, #12]
 80047aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80047ae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80047b2:	81a3      	strh	r3, [r4, #12]
 80047b4:	4632      	mov	r2, r6
 80047b6:	463b      	mov	r3, r7
 80047b8:	4628      	mov	r0, r5
 80047ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80047be:	f000 b853 	b.w	8004868 <_write_r>

080047c2 <__sseek>:
 80047c2:	b510      	push	{r4, lr}
 80047c4:	460c      	mov	r4, r1
 80047c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047ca:	f000 f829 	bl	8004820 <_lseek_r>
 80047ce:	1c43      	adds	r3, r0, #1
 80047d0:	89a3      	ldrh	r3, [r4, #12]
 80047d2:	bf15      	itete	ne
 80047d4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80047d6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80047da:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80047de:	81a3      	strheq	r3, [r4, #12]
 80047e0:	bf18      	it	ne
 80047e2:	81a3      	strhne	r3, [r4, #12]
 80047e4:	bd10      	pop	{r4, pc}

080047e6 <__sclose>:
 80047e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047ea:	f000 b809 	b.w	8004800 <_close_r>

080047ee <memset>:
 80047ee:	4402      	add	r2, r0
 80047f0:	4603      	mov	r3, r0
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d100      	bne.n	80047f8 <memset+0xa>
 80047f6:	4770      	bx	lr
 80047f8:	f803 1b01 	strb.w	r1, [r3], #1
 80047fc:	e7f9      	b.n	80047f2 <memset+0x4>
	...

08004800 <_close_r>:
 8004800:	b538      	push	{r3, r4, r5, lr}
 8004802:	4d06      	ldr	r5, [pc, #24]	@ (800481c <_close_r+0x1c>)
 8004804:	2300      	movs	r3, #0
 8004806:	4604      	mov	r4, r0
 8004808:	4608      	mov	r0, r1
 800480a:	602b      	str	r3, [r5, #0]
 800480c:	f7fc feb8 	bl	8001580 <_close>
 8004810:	1c43      	adds	r3, r0, #1
 8004812:	d102      	bne.n	800481a <_close_r+0x1a>
 8004814:	682b      	ldr	r3, [r5, #0]
 8004816:	b103      	cbz	r3, 800481a <_close_r+0x1a>
 8004818:	6023      	str	r3, [r4, #0]
 800481a:	bd38      	pop	{r3, r4, r5, pc}
 800481c:	20000330 	.word	0x20000330

08004820 <_lseek_r>:
 8004820:	b538      	push	{r3, r4, r5, lr}
 8004822:	4d07      	ldr	r5, [pc, #28]	@ (8004840 <_lseek_r+0x20>)
 8004824:	4604      	mov	r4, r0
 8004826:	4608      	mov	r0, r1
 8004828:	4611      	mov	r1, r2
 800482a:	2200      	movs	r2, #0
 800482c:	602a      	str	r2, [r5, #0]
 800482e:	461a      	mov	r2, r3
 8004830:	f7fc fecd 	bl	80015ce <_lseek>
 8004834:	1c43      	adds	r3, r0, #1
 8004836:	d102      	bne.n	800483e <_lseek_r+0x1e>
 8004838:	682b      	ldr	r3, [r5, #0]
 800483a:	b103      	cbz	r3, 800483e <_lseek_r+0x1e>
 800483c:	6023      	str	r3, [r4, #0]
 800483e:	bd38      	pop	{r3, r4, r5, pc}
 8004840:	20000330 	.word	0x20000330

08004844 <_read_r>:
 8004844:	b538      	push	{r3, r4, r5, lr}
 8004846:	4d07      	ldr	r5, [pc, #28]	@ (8004864 <_read_r+0x20>)
 8004848:	4604      	mov	r4, r0
 800484a:	4608      	mov	r0, r1
 800484c:	4611      	mov	r1, r2
 800484e:	2200      	movs	r2, #0
 8004850:	602a      	str	r2, [r5, #0]
 8004852:	461a      	mov	r2, r3
 8004854:	f7fc fe5b 	bl	800150e <_read>
 8004858:	1c43      	adds	r3, r0, #1
 800485a:	d102      	bne.n	8004862 <_read_r+0x1e>
 800485c:	682b      	ldr	r3, [r5, #0]
 800485e:	b103      	cbz	r3, 8004862 <_read_r+0x1e>
 8004860:	6023      	str	r3, [r4, #0]
 8004862:	bd38      	pop	{r3, r4, r5, pc}
 8004864:	20000330 	.word	0x20000330

08004868 <_write_r>:
 8004868:	b538      	push	{r3, r4, r5, lr}
 800486a:	4d07      	ldr	r5, [pc, #28]	@ (8004888 <_write_r+0x20>)
 800486c:	4604      	mov	r4, r0
 800486e:	4608      	mov	r0, r1
 8004870:	4611      	mov	r1, r2
 8004872:	2200      	movs	r2, #0
 8004874:	602a      	str	r2, [r5, #0]
 8004876:	461a      	mov	r2, r3
 8004878:	f7fc fe66 	bl	8001548 <_write>
 800487c:	1c43      	adds	r3, r0, #1
 800487e:	d102      	bne.n	8004886 <_write_r+0x1e>
 8004880:	682b      	ldr	r3, [r5, #0]
 8004882:	b103      	cbz	r3, 8004886 <_write_r+0x1e>
 8004884:	6023      	str	r3, [r4, #0]
 8004886:	bd38      	pop	{r3, r4, r5, pc}
 8004888:	20000330 	.word	0x20000330

0800488c <__errno>:
 800488c:	4b01      	ldr	r3, [pc, #4]	@ (8004894 <__errno+0x8>)
 800488e:	6818      	ldr	r0, [r3, #0]
 8004890:	4770      	bx	lr
 8004892:	bf00      	nop
 8004894:	20000018 	.word	0x20000018

08004898 <__libc_init_array>:
 8004898:	b570      	push	{r4, r5, r6, lr}
 800489a:	4d0d      	ldr	r5, [pc, #52]	@ (80048d0 <__libc_init_array+0x38>)
 800489c:	4c0d      	ldr	r4, [pc, #52]	@ (80048d4 <__libc_init_array+0x3c>)
 800489e:	1b64      	subs	r4, r4, r5
 80048a0:	10a4      	asrs	r4, r4, #2
 80048a2:	2600      	movs	r6, #0
 80048a4:	42a6      	cmp	r6, r4
 80048a6:	d109      	bne.n	80048bc <__libc_init_array+0x24>
 80048a8:	4d0b      	ldr	r5, [pc, #44]	@ (80048d8 <__libc_init_array+0x40>)
 80048aa:	4c0c      	ldr	r4, [pc, #48]	@ (80048dc <__libc_init_array+0x44>)
 80048ac:	f000 fdb8 	bl	8005420 <_init>
 80048b0:	1b64      	subs	r4, r4, r5
 80048b2:	10a4      	asrs	r4, r4, #2
 80048b4:	2600      	movs	r6, #0
 80048b6:	42a6      	cmp	r6, r4
 80048b8:	d105      	bne.n	80048c6 <__libc_init_array+0x2e>
 80048ba:	bd70      	pop	{r4, r5, r6, pc}
 80048bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80048c0:	4798      	blx	r3
 80048c2:	3601      	adds	r6, #1
 80048c4:	e7ee      	b.n	80048a4 <__libc_init_array+0xc>
 80048c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80048ca:	4798      	blx	r3
 80048cc:	3601      	adds	r6, #1
 80048ce:	e7f2      	b.n	80048b6 <__libc_init_array+0x1e>
 80048d0:	080054e4 	.word	0x080054e4
 80048d4:	080054e4 	.word	0x080054e4
 80048d8:	080054e4 	.word	0x080054e4
 80048dc:	080054e8 	.word	0x080054e8

080048e0 <__retarget_lock_init_recursive>:
 80048e0:	4770      	bx	lr

080048e2 <__retarget_lock_acquire_recursive>:
 80048e2:	4770      	bx	lr

080048e4 <__retarget_lock_release_recursive>:
 80048e4:	4770      	bx	lr
	...

080048e8 <_free_r>:
 80048e8:	b538      	push	{r3, r4, r5, lr}
 80048ea:	4605      	mov	r5, r0
 80048ec:	2900      	cmp	r1, #0
 80048ee:	d041      	beq.n	8004974 <_free_r+0x8c>
 80048f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048f4:	1f0c      	subs	r4, r1, #4
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	bfb8      	it	lt
 80048fa:	18e4      	addlt	r4, r4, r3
 80048fc:	f000 f8e0 	bl	8004ac0 <__malloc_lock>
 8004900:	4a1d      	ldr	r2, [pc, #116]	@ (8004978 <_free_r+0x90>)
 8004902:	6813      	ldr	r3, [r2, #0]
 8004904:	b933      	cbnz	r3, 8004914 <_free_r+0x2c>
 8004906:	6063      	str	r3, [r4, #4]
 8004908:	6014      	str	r4, [r2, #0]
 800490a:	4628      	mov	r0, r5
 800490c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004910:	f000 b8dc 	b.w	8004acc <__malloc_unlock>
 8004914:	42a3      	cmp	r3, r4
 8004916:	d908      	bls.n	800492a <_free_r+0x42>
 8004918:	6820      	ldr	r0, [r4, #0]
 800491a:	1821      	adds	r1, r4, r0
 800491c:	428b      	cmp	r3, r1
 800491e:	bf01      	itttt	eq
 8004920:	6819      	ldreq	r1, [r3, #0]
 8004922:	685b      	ldreq	r3, [r3, #4]
 8004924:	1809      	addeq	r1, r1, r0
 8004926:	6021      	streq	r1, [r4, #0]
 8004928:	e7ed      	b.n	8004906 <_free_r+0x1e>
 800492a:	461a      	mov	r2, r3
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	b10b      	cbz	r3, 8004934 <_free_r+0x4c>
 8004930:	42a3      	cmp	r3, r4
 8004932:	d9fa      	bls.n	800492a <_free_r+0x42>
 8004934:	6811      	ldr	r1, [r2, #0]
 8004936:	1850      	adds	r0, r2, r1
 8004938:	42a0      	cmp	r0, r4
 800493a:	d10b      	bne.n	8004954 <_free_r+0x6c>
 800493c:	6820      	ldr	r0, [r4, #0]
 800493e:	4401      	add	r1, r0
 8004940:	1850      	adds	r0, r2, r1
 8004942:	4283      	cmp	r3, r0
 8004944:	6011      	str	r1, [r2, #0]
 8004946:	d1e0      	bne.n	800490a <_free_r+0x22>
 8004948:	6818      	ldr	r0, [r3, #0]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	6053      	str	r3, [r2, #4]
 800494e:	4408      	add	r0, r1
 8004950:	6010      	str	r0, [r2, #0]
 8004952:	e7da      	b.n	800490a <_free_r+0x22>
 8004954:	d902      	bls.n	800495c <_free_r+0x74>
 8004956:	230c      	movs	r3, #12
 8004958:	602b      	str	r3, [r5, #0]
 800495a:	e7d6      	b.n	800490a <_free_r+0x22>
 800495c:	6820      	ldr	r0, [r4, #0]
 800495e:	1821      	adds	r1, r4, r0
 8004960:	428b      	cmp	r3, r1
 8004962:	bf04      	itt	eq
 8004964:	6819      	ldreq	r1, [r3, #0]
 8004966:	685b      	ldreq	r3, [r3, #4]
 8004968:	6063      	str	r3, [r4, #4]
 800496a:	bf04      	itt	eq
 800496c:	1809      	addeq	r1, r1, r0
 800496e:	6021      	streq	r1, [r4, #0]
 8004970:	6054      	str	r4, [r2, #4]
 8004972:	e7ca      	b.n	800490a <_free_r+0x22>
 8004974:	bd38      	pop	{r3, r4, r5, pc}
 8004976:	bf00      	nop
 8004978:	2000033c 	.word	0x2000033c

0800497c <sbrk_aligned>:
 800497c:	b570      	push	{r4, r5, r6, lr}
 800497e:	4e0f      	ldr	r6, [pc, #60]	@ (80049bc <sbrk_aligned+0x40>)
 8004980:	460c      	mov	r4, r1
 8004982:	6831      	ldr	r1, [r6, #0]
 8004984:	4605      	mov	r5, r0
 8004986:	b911      	cbnz	r1, 800498e <sbrk_aligned+0x12>
 8004988:	f000 fcb6 	bl	80052f8 <_sbrk_r>
 800498c:	6030      	str	r0, [r6, #0]
 800498e:	4621      	mov	r1, r4
 8004990:	4628      	mov	r0, r5
 8004992:	f000 fcb1 	bl	80052f8 <_sbrk_r>
 8004996:	1c43      	adds	r3, r0, #1
 8004998:	d103      	bne.n	80049a2 <sbrk_aligned+0x26>
 800499a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800499e:	4620      	mov	r0, r4
 80049a0:	bd70      	pop	{r4, r5, r6, pc}
 80049a2:	1cc4      	adds	r4, r0, #3
 80049a4:	f024 0403 	bic.w	r4, r4, #3
 80049a8:	42a0      	cmp	r0, r4
 80049aa:	d0f8      	beq.n	800499e <sbrk_aligned+0x22>
 80049ac:	1a21      	subs	r1, r4, r0
 80049ae:	4628      	mov	r0, r5
 80049b0:	f000 fca2 	bl	80052f8 <_sbrk_r>
 80049b4:	3001      	adds	r0, #1
 80049b6:	d1f2      	bne.n	800499e <sbrk_aligned+0x22>
 80049b8:	e7ef      	b.n	800499a <sbrk_aligned+0x1e>
 80049ba:	bf00      	nop
 80049bc:	20000338 	.word	0x20000338

080049c0 <_malloc_r>:
 80049c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049c4:	1ccd      	adds	r5, r1, #3
 80049c6:	f025 0503 	bic.w	r5, r5, #3
 80049ca:	3508      	adds	r5, #8
 80049cc:	2d0c      	cmp	r5, #12
 80049ce:	bf38      	it	cc
 80049d0:	250c      	movcc	r5, #12
 80049d2:	2d00      	cmp	r5, #0
 80049d4:	4606      	mov	r6, r0
 80049d6:	db01      	blt.n	80049dc <_malloc_r+0x1c>
 80049d8:	42a9      	cmp	r1, r5
 80049da:	d904      	bls.n	80049e6 <_malloc_r+0x26>
 80049dc:	230c      	movs	r3, #12
 80049de:	6033      	str	r3, [r6, #0]
 80049e0:	2000      	movs	r0, #0
 80049e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004abc <_malloc_r+0xfc>
 80049ea:	f000 f869 	bl	8004ac0 <__malloc_lock>
 80049ee:	f8d8 3000 	ldr.w	r3, [r8]
 80049f2:	461c      	mov	r4, r3
 80049f4:	bb44      	cbnz	r4, 8004a48 <_malloc_r+0x88>
 80049f6:	4629      	mov	r1, r5
 80049f8:	4630      	mov	r0, r6
 80049fa:	f7ff ffbf 	bl	800497c <sbrk_aligned>
 80049fe:	1c43      	adds	r3, r0, #1
 8004a00:	4604      	mov	r4, r0
 8004a02:	d158      	bne.n	8004ab6 <_malloc_r+0xf6>
 8004a04:	f8d8 4000 	ldr.w	r4, [r8]
 8004a08:	4627      	mov	r7, r4
 8004a0a:	2f00      	cmp	r7, #0
 8004a0c:	d143      	bne.n	8004a96 <_malloc_r+0xd6>
 8004a0e:	2c00      	cmp	r4, #0
 8004a10:	d04b      	beq.n	8004aaa <_malloc_r+0xea>
 8004a12:	6823      	ldr	r3, [r4, #0]
 8004a14:	4639      	mov	r1, r7
 8004a16:	4630      	mov	r0, r6
 8004a18:	eb04 0903 	add.w	r9, r4, r3
 8004a1c:	f000 fc6c 	bl	80052f8 <_sbrk_r>
 8004a20:	4581      	cmp	r9, r0
 8004a22:	d142      	bne.n	8004aaa <_malloc_r+0xea>
 8004a24:	6821      	ldr	r1, [r4, #0]
 8004a26:	1a6d      	subs	r5, r5, r1
 8004a28:	4629      	mov	r1, r5
 8004a2a:	4630      	mov	r0, r6
 8004a2c:	f7ff ffa6 	bl	800497c <sbrk_aligned>
 8004a30:	3001      	adds	r0, #1
 8004a32:	d03a      	beq.n	8004aaa <_malloc_r+0xea>
 8004a34:	6823      	ldr	r3, [r4, #0]
 8004a36:	442b      	add	r3, r5
 8004a38:	6023      	str	r3, [r4, #0]
 8004a3a:	f8d8 3000 	ldr.w	r3, [r8]
 8004a3e:	685a      	ldr	r2, [r3, #4]
 8004a40:	bb62      	cbnz	r2, 8004a9c <_malloc_r+0xdc>
 8004a42:	f8c8 7000 	str.w	r7, [r8]
 8004a46:	e00f      	b.n	8004a68 <_malloc_r+0xa8>
 8004a48:	6822      	ldr	r2, [r4, #0]
 8004a4a:	1b52      	subs	r2, r2, r5
 8004a4c:	d420      	bmi.n	8004a90 <_malloc_r+0xd0>
 8004a4e:	2a0b      	cmp	r2, #11
 8004a50:	d917      	bls.n	8004a82 <_malloc_r+0xc2>
 8004a52:	1961      	adds	r1, r4, r5
 8004a54:	42a3      	cmp	r3, r4
 8004a56:	6025      	str	r5, [r4, #0]
 8004a58:	bf18      	it	ne
 8004a5a:	6059      	strne	r1, [r3, #4]
 8004a5c:	6863      	ldr	r3, [r4, #4]
 8004a5e:	bf08      	it	eq
 8004a60:	f8c8 1000 	streq.w	r1, [r8]
 8004a64:	5162      	str	r2, [r4, r5]
 8004a66:	604b      	str	r3, [r1, #4]
 8004a68:	4630      	mov	r0, r6
 8004a6a:	f000 f82f 	bl	8004acc <__malloc_unlock>
 8004a6e:	f104 000b 	add.w	r0, r4, #11
 8004a72:	1d23      	adds	r3, r4, #4
 8004a74:	f020 0007 	bic.w	r0, r0, #7
 8004a78:	1ac2      	subs	r2, r0, r3
 8004a7a:	bf1c      	itt	ne
 8004a7c:	1a1b      	subne	r3, r3, r0
 8004a7e:	50a3      	strne	r3, [r4, r2]
 8004a80:	e7af      	b.n	80049e2 <_malloc_r+0x22>
 8004a82:	6862      	ldr	r2, [r4, #4]
 8004a84:	42a3      	cmp	r3, r4
 8004a86:	bf0c      	ite	eq
 8004a88:	f8c8 2000 	streq.w	r2, [r8]
 8004a8c:	605a      	strne	r2, [r3, #4]
 8004a8e:	e7eb      	b.n	8004a68 <_malloc_r+0xa8>
 8004a90:	4623      	mov	r3, r4
 8004a92:	6864      	ldr	r4, [r4, #4]
 8004a94:	e7ae      	b.n	80049f4 <_malloc_r+0x34>
 8004a96:	463c      	mov	r4, r7
 8004a98:	687f      	ldr	r7, [r7, #4]
 8004a9a:	e7b6      	b.n	8004a0a <_malloc_r+0x4a>
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	42a3      	cmp	r3, r4
 8004aa2:	d1fb      	bne.n	8004a9c <_malloc_r+0xdc>
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	6053      	str	r3, [r2, #4]
 8004aa8:	e7de      	b.n	8004a68 <_malloc_r+0xa8>
 8004aaa:	230c      	movs	r3, #12
 8004aac:	6033      	str	r3, [r6, #0]
 8004aae:	4630      	mov	r0, r6
 8004ab0:	f000 f80c 	bl	8004acc <__malloc_unlock>
 8004ab4:	e794      	b.n	80049e0 <_malloc_r+0x20>
 8004ab6:	6005      	str	r5, [r0, #0]
 8004ab8:	e7d6      	b.n	8004a68 <_malloc_r+0xa8>
 8004aba:	bf00      	nop
 8004abc:	2000033c 	.word	0x2000033c

08004ac0 <__malloc_lock>:
 8004ac0:	4801      	ldr	r0, [pc, #4]	@ (8004ac8 <__malloc_lock+0x8>)
 8004ac2:	f7ff bf0e 	b.w	80048e2 <__retarget_lock_acquire_recursive>
 8004ac6:	bf00      	nop
 8004ac8:	20000334 	.word	0x20000334

08004acc <__malloc_unlock>:
 8004acc:	4801      	ldr	r0, [pc, #4]	@ (8004ad4 <__malloc_unlock+0x8>)
 8004ace:	f7ff bf09 	b.w	80048e4 <__retarget_lock_release_recursive>
 8004ad2:	bf00      	nop
 8004ad4:	20000334 	.word	0x20000334

08004ad8 <__sfputc_r>:
 8004ad8:	6893      	ldr	r3, [r2, #8]
 8004ada:	3b01      	subs	r3, #1
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	b410      	push	{r4}
 8004ae0:	6093      	str	r3, [r2, #8]
 8004ae2:	da08      	bge.n	8004af6 <__sfputc_r+0x1e>
 8004ae4:	6994      	ldr	r4, [r2, #24]
 8004ae6:	42a3      	cmp	r3, r4
 8004ae8:	db01      	blt.n	8004aee <__sfputc_r+0x16>
 8004aea:	290a      	cmp	r1, #10
 8004aec:	d103      	bne.n	8004af6 <__sfputc_r+0x1e>
 8004aee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004af2:	f000 bb6d 	b.w	80051d0 <__swbuf_r>
 8004af6:	6813      	ldr	r3, [r2, #0]
 8004af8:	1c58      	adds	r0, r3, #1
 8004afa:	6010      	str	r0, [r2, #0]
 8004afc:	7019      	strb	r1, [r3, #0]
 8004afe:	4608      	mov	r0, r1
 8004b00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b04:	4770      	bx	lr

08004b06 <__sfputs_r>:
 8004b06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b08:	4606      	mov	r6, r0
 8004b0a:	460f      	mov	r7, r1
 8004b0c:	4614      	mov	r4, r2
 8004b0e:	18d5      	adds	r5, r2, r3
 8004b10:	42ac      	cmp	r4, r5
 8004b12:	d101      	bne.n	8004b18 <__sfputs_r+0x12>
 8004b14:	2000      	movs	r0, #0
 8004b16:	e007      	b.n	8004b28 <__sfputs_r+0x22>
 8004b18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b1c:	463a      	mov	r2, r7
 8004b1e:	4630      	mov	r0, r6
 8004b20:	f7ff ffda 	bl	8004ad8 <__sfputc_r>
 8004b24:	1c43      	adds	r3, r0, #1
 8004b26:	d1f3      	bne.n	8004b10 <__sfputs_r+0xa>
 8004b28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004b2c <_vfiprintf_r>:
 8004b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b30:	460d      	mov	r5, r1
 8004b32:	b09d      	sub	sp, #116	@ 0x74
 8004b34:	4614      	mov	r4, r2
 8004b36:	4698      	mov	r8, r3
 8004b38:	4606      	mov	r6, r0
 8004b3a:	b118      	cbz	r0, 8004b44 <_vfiprintf_r+0x18>
 8004b3c:	6a03      	ldr	r3, [r0, #32]
 8004b3e:	b90b      	cbnz	r3, 8004b44 <_vfiprintf_r+0x18>
 8004b40:	f7ff fdca 	bl	80046d8 <__sinit>
 8004b44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004b46:	07d9      	lsls	r1, r3, #31
 8004b48:	d405      	bmi.n	8004b56 <_vfiprintf_r+0x2a>
 8004b4a:	89ab      	ldrh	r3, [r5, #12]
 8004b4c:	059a      	lsls	r2, r3, #22
 8004b4e:	d402      	bmi.n	8004b56 <_vfiprintf_r+0x2a>
 8004b50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004b52:	f7ff fec6 	bl	80048e2 <__retarget_lock_acquire_recursive>
 8004b56:	89ab      	ldrh	r3, [r5, #12]
 8004b58:	071b      	lsls	r3, r3, #28
 8004b5a:	d501      	bpl.n	8004b60 <_vfiprintf_r+0x34>
 8004b5c:	692b      	ldr	r3, [r5, #16]
 8004b5e:	b99b      	cbnz	r3, 8004b88 <_vfiprintf_r+0x5c>
 8004b60:	4629      	mov	r1, r5
 8004b62:	4630      	mov	r0, r6
 8004b64:	f000 fb72 	bl	800524c <__swsetup_r>
 8004b68:	b170      	cbz	r0, 8004b88 <_vfiprintf_r+0x5c>
 8004b6a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004b6c:	07dc      	lsls	r4, r3, #31
 8004b6e:	d504      	bpl.n	8004b7a <_vfiprintf_r+0x4e>
 8004b70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004b74:	b01d      	add	sp, #116	@ 0x74
 8004b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b7a:	89ab      	ldrh	r3, [r5, #12]
 8004b7c:	0598      	lsls	r0, r3, #22
 8004b7e:	d4f7      	bmi.n	8004b70 <_vfiprintf_r+0x44>
 8004b80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004b82:	f7ff feaf 	bl	80048e4 <__retarget_lock_release_recursive>
 8004b86:	e7f3      	b.n	8004b70 <_vfiprintf_r+0x44>
 8004b88:	2300      	movs	r3, #0
 8004b8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b8c:	2320      	movs	r3, #32
 8004b8e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004b92:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b96:	2330      	movs	r3, #48	@ 0x30
 8004b98:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004d48 <_vfiprintf_r+0x21c>
 8004b9c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004ba0:	f04f 0901 	mov.w	r9, #1
 8004ba4:	4623      	mov	r3, r4
 8004ba6:	469a      	mov	sl, r3
 8004ba8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004bac:	b10a      	cbz	r2, 8004bb2 <_vfiprintf_r+0x86>
 8004bae:	2a25      	cmp	r2, #37	@ 0x25
 8004bb0:	d1f9      	bne.n	8004ba6 <_vfiprintf_r+0x7a>
 8004bb2:	ebba 0b04 	subs.w	fp, sl, r4
 8004bb6:	d00b      	beq.n	8004bd0 <_vfiprintf_r+0xa4>
 8004bb8:	465b      	mov	r3, fp
 8004bba:	4622      	mov	r2, r4
 8004bbc:	4629      	mov	r1, r5
 8004bbe:	4630      	mov	r0, r6
 8004bc0:	f7ff ffa1 	bl	8004b06 <__sfputs_r>
 8004bc4:	3001      	adds	r0, #1
 8004bc6:	f000 80a7 	beq.w	8004d18 <_vfiprintf_r+0x1ec>
 8004bca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004bcc:	445a      	add	r2, fp
 8004bce:	9209      	str	r2, [sp, #36]	@ 0x24
 8004bd0:	f89a 3000 	ldrb.w	r3, [sl]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	f000 809f 	beq.w	8004d18 <_vfiprintf_r+0x1ec>
 8004bda:	2300      	movs	r3, #0
 8004bdc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004be0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004be4:	f10a 0a01 	add.w	sl, sl, #1
 8004be8:	9304      	str	r3, [sp, #16]
 8004bea:	9307      	str	r3, [sp, #28]
 8004bec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004bf0:	931a      	str	r3, [sp, #104]	@ 0x68
 8004bf2:	4654      	mov	r4, sl
 8004bf4:	2205      	movs	r2, #5
 8004bf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bfa:	4853      	ldr	r0, [pc, #332]	@ (8004d48 <_vfiprintf_r+0x21c>)
 8004bfc:	f7fb faf8 	bl	80001f0 <memchr>
 8004c00:	9a04      	ldr	r2, [sp, #16]
 8004c02:	b9d8      	cbnz	r0, 8004c3c <_vfiprintf_r+0x110>
 8004c04:	06d1      	lsls	r1, r2, #27
 8004c06:	bf44      	itt	mi
 8004c08:	2320      	movmi	r3, #32
 8004c0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004c0e:	0713      	lsls	r3, r2, #28
 8004c10:	bf44      	itt	mi
 8004c12:	232b      	movmi	r3, #43	@ 0x2b
 8004c14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004c18:	f89a 3000 	ldrb.w	r3, [sl]
 8004c1c:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c1e:	d015      	beq.n	8004c4c <_vfiprintf_r+0x120>
 8004c20:	9a07      	ldr	r2, [sp, #28]
 8004c22:	4654      	mov	r4, sl
 8004c24:	2000      	movs	r0, #0
 8004c26:	f04f 0c0a 	mov.w	ip, #10
 8004c2a:	4621      	mov	r1, r4
 8004c2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c30:	3b30      	subs	r3, #48	@ 0x30
 8004c32:	2b09      	cmp	r3, #9
 8004c34:	d94b      	bls.n	8004cce <_vfiprintf_r+0x1a2>
 8004c36:	b1b0      	cbz	r0, 8004c66 <_vfiprintf_r+0x13a>
 8004c38:	9207      	str	r2, [sp, #28]
 8004c3a:	e014      	b.n	8004c66 <_vfiprintf_r+0x13a>
 8004c3c:	eba0 0308 	sub.w	r3, r0, r8
 8004c40:	fa09 f303 	lsl.w	r3, r9, r3
 8004c44:	4313      	orrs	r3, r2
 8004c46:	9304      	str	r3, [sp, #16]
 8004c48:	46a2      	mov	sl, r4
 8004c4a:	e7d2      	b.n	8004bf2 <_vfiprintf_r+0xc6>
 8004c4c:	9b03      	ldr	r3, [sp, #12]
 8004c4e:	1d19      	adds	r1, r3, #4
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	9103      	str	r1, [sp, #12]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	bfbb      	ittet	lt
 8004c58:	425b      	neglt	r3, r3
 8004c5a:	f042 0202 	orrlt.w	r2, r2, #2
 8004c5e:	9307      	strge	r3, [sp, #28]
 8004c60:	9307      	strlt	r3, [sp, #28]
 8004c62:	bfb8      	it	lt
 8004c64:	9204      	strlt	r2, [sp, #16]
 8004c66:	7823      	ldrb	r3, [r4, #0]
 8004c68:	2b2e      	cmp	r3, #46	@ 0x2e
 8004c6a:	d10a      	bne.n	8004c82 <_vfiprintf_r+0x156>
 8004c6c:	7863      	ldrb	r3, [r4, #1]
 8004c6e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c70:	d132      	bne.n	8004cd8 <_vfiprintf_r+0x1ac>
 8004c72:	9b03      	ldr	r3, [sp, #12]
 8004c74:	1d1a      	adds	r2, r3, #4
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	9203      	str	r2, [sp, #12]
 8004c7a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004c7e:	3402      	adds	r4, #2
 8004c80:	9305      	str	r3, [sp, #20]
 8004c82:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004d58 <_vfiprintf_r+0x22c>
 8004c86:	7821      	ldrb	r1, [r4, #0]
 8004c88:	2203      	movs	r2, #3
 8004c8a:	4650      	mov	r0, sl
 8004c8c:	f7fb fab0 	bl	80001f0 <memchr>
 8004c90:	b138      	cbz	r0, 8004ca2 <_vfiprintf_r+0x176>
 8004c92:	9b04      	ldr	r3, [sp, #16]
 8004c94:	eba0 000a 	sub.w	r0, r0, sl
 8004c98:	2240      	movs	r2, #64	@ 0x40
 8004c9a:	4082      	lsls	r2, r0
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	3401      	adds	r4, #1
 8004ca0:	9304      	str	r3, [sp, #16]
 8004ca2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ca6:	4829      	ldr	r0, [pc, #164]	@ (8004d4c <_vfiprintf_r+0x220>)
 8004ca8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004cac:	2206      	movs	r2, #6
 8004cae:	f7fb fa9f 	bl	80001f0 <memchr>
 8004cb2:	2800      	cmp	r0, #0
 8004cb4:	d03f      	beq.n	8004d36 <_vfiprintf_r+0x20a>
 8004cb6:	4b26      	ldr	r3, [pc, #152]	@ (8004d50 <_vfiprintf_r+0x224>)
 8004cb8:	bb1b      	cbnz	r3, 8004d02 <_vfiprintf_r+0x1d6>
 8004cba:	9b03      	ldr	r3, [sp, #12]
 8004cbc:	3307      	adds	r3, #7
 8004cbe:	f023 0307 	bic.w	r3, r3, #7
 8004cc2:	3308      	adds	r3, #8
 8004cc4:	9303      	str	r3, [sp, #12]
 8004cc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004cc8:	443b      	add	r3, r7
 8004cca:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ccc:	e76a      	b.n	8004ba4 <_vfiprintf_r+0x78>
 8004cce:	fb0c 3202 	mla	r2, ip, r2, r3
 8004cd2:	460c      	mov	r4, r1
 8004cd4:	2001      	movs	r0, #1
 8004cd6:	e7a8      	b.n	8004c2a <_vfiprintf_r+0xfe>
 8004cd8:	2300      	movs	r3, #0
 8004cda:	3401      	adds	r4, #1
 8004cdc:	9305      	str	r3, [sp, #20]
 8004cde:	4619      	mov	r1, r3
 8004ce0:	f04f 0c0a 	mov.w	ip, #10
 8004ce4:	4620      	mov	r0, r4
 8004ce6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004cea:	3a30      	subs	r2, #48	@ 0x30
 8004cec:	2a09      	cmp	r2, #9
 8004cee:	d903      	bls.n	8004cf8 <_vfiprintf_r+0x1cc>
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d0c6      	beq.n	8004c82 <_vfiprintf_r+0x156>
 8004cf4:	9105      	str	r1, [sp, #20]
 8004cf6:	e7c4      	b.n	8004c82 <_vfiprintf_r+0x156>
 8004cf8:	fb0c 2101 	mla	r1, ip, r1, r2
 8004cfc:	4604      	mov	r4, r0
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e7f0      	b.n	8004ce4 <_vfiprintf_r+0x1b8>
 8004d02:	ab03      	add	r3, sp, #12
 8004d04:	9300      	str	r3, [sp, #0]
 8004d06:	462a      	mov	r2, r5
 8004d08:	4b12      	ldr	r3, [pc, #72]	@ (8004d54 <_vfiprintf_r+0x228>)
 8004d0a:	a904      	add	r1, sp, #16
 8004d0c:	4630      	mov	r0, r6
 8004d0e:	f3af 8000 	nop.w
 8004d12:	4607      	mov	r7, r0
 8004d14:	1c78      	adds	r0, r7, #1
 8004d16:	d1d6      	bne.n	8004cc6 <_vfiprintf_r+0x19a>
 8004d18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004d1a:	07d9      	lsls	r1, r3, #31
 8004d1c:	d405      	bmi.n	8004d2a <_vfiprintf_r+0x1fe>
 8004d1e:	89ab      	ldrh	r3, [r5, #12]
 8004d20:	059a      	lsls	r2, r3, #22
 8004d22:	d402      	bmi.n	8004d2a <_vfiprintf_r+0x1fe>
 8004d24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004d26:	f7ff fddd 	bl	80048e4 <__retarget_lock_release_recursive>
 8004d2a:	89ab      	ldrh	r3, [r5, #12]
 8004d2c:	065b      	lsls	r3, r3, #25
 8004d2e:	f53f af1f 	bmi.w	8004b70 <_vfiprintf_r+0x44>
 8004d32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004d34:	e71e      	b.n	8004b74 <_vfiprintf_r+0x48>
 8004d36:	ab03      	add	r3, sp, #12
 8004d38:	9300      	str	r3, [sp, #0]
 8004d3a:	462a      	mov	r2, r5
 8004d3c:	4b05      	ldr	r3, [pc, #20]	@ (8004d54 <_vfiprintf_r+0x228>)
 8004d3e:	a904      	add	r1, sp, #16
 8004d40:	4630      	mov	r0, r6
 8004d42:	f000 f879 	bl	8004e38 <_printf_i>
 8004d46:	e7e4      	b.n	8004d12 <_vfiprintf_r+0x1e6>
 8004d48:	080054a8 	.word	0x080054a8
 8004d4c:	080054b2 	.word	0x080054b2
 8004d50:	00000000 	.word	0x00000000
 8004d54:	08004b07 	.word	0x08004b07
 8004d58:	080054ae 	.word	0x080054ae

08004d5c <_printf_common>:
 8004d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d60:	4616      	mov	r6, r2
 8004d62:	4698      	mov	r8, r3
 8004d64:	688a      	ldr	r2, [r1, #8]
 8004d66:	690b      	ldr	r3, [r1, #16]
 8004d68:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	bfb8      	it	lt
 8004d70:	4613      	movlt	r3, r2
 8004d72:	6033      	str	r3, [r6, #0]
 8004d74:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004d78:	4607      	mov	r7, r0
 8004d7a:	460c      	mov	r4, r1
 8004d7c:	b10a      	cbz	r2, 8004d82 <_printf_common+0x26>
 8004d7e:	3301      	adds	r3, #1
 8004d80:	6033      	str	r3, [r6, #0]
 8004d82:	6823      	ldr	r3, [r4, #0]
 8004d84:	0699      	lsls	r1, r3, #26
 8004d86:	bf42      	ittt	mi
 8004d88:	6833      	ldrmi	r3, [r6, #0]
 8004d8a:	3302      	addmi	r3, #2
 8004d8c:	6033      	strmi	r3, [r6, #0]
 8004d8e:	6825      	ldr	r5, [r4, #0]
 8004d90:	f015 0506 	ands.w	r5, r5, #6
 8004d94:	d106      	bne.n	8004da4 <_printf_common+0x48>
 8004d96:	f104 0a19 	add.w	sl, r4, #25
 8004d9a:	68e3      	ldr	r3, [r4, #12]
 8004d9c:	6832      	ldr	r2, [r6, #0]
 8004d9e:	1a9b      	subs	r3, r3, r2
 8004da0:	42ab      	cmp	r3, r5
 8004da2:	dc26      	bgt.n	8004df2 <_printf_common+0x96>
 8004da4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004da8:	6822      	ldr	r2, [r4, #0]
 8004daa:	3b00      	subs	r3, #0
 8004dac:	bf18      	it	ne
 8004dae:	2301      	movne	r3, #1
 8004db0:	0692      	lsls	r2, r2, #26
 8004db2:	d42b      	bmi.n	8004e0c <_printf_common+0xb0>
 8004db4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004db8:	4641      	mov	r1, r8
 8004dba:	4638      	mov	r0, r7
 8004dbc:	47c8      	blx	r9
 8004dbe:	3001      	adds	r0, #1
 8004dc0:	d01e      	beq.n	8004e00 <_printf_common+0xa4>
 8004dc2:	6823      	ldr	r3, [r4, #0]
 8004dc4:	6922      	ldr	r2, [r4, #16]
 8004dc6:	f003 0306 	and.w	r3, r3, #6
 8004dca:	2b04      	cmp	r3, #4
 8004dcc:	bf02      	ittt	eq
 8004dce:	68e5      	ldreq	r5, [r4, #12]
 8004dd0:	6833      	ldreq	r3, [r6, #0]
 8004dd2:	1aed      	subeq	r5, r5, r3
 8004dd4:	68a3      	ldr	r3, [r4, #8]
 8004dd6:	bf0c      	ite	eq
 8004dd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ddc:	2500      	movne	r5, #0
 8004dde:	4293      	cmp	r3, r2
 8004de0:	bfc4      	itt	gt
 8004de2:	1a9b      	subgt	r3, r3, r2
 8004de4:	18ed      	addgt	r5, r5, r3
 8004de6:	2600      	movs	r6, #0
 8004de8:	341a      	adds	r4, #26
 8004dea:	42b5      	cmp	r5, r6
 8004dec:	d11a      	bne.n	8004e24 <_printf_common+0xc8>
 8004dee:	2000      	movs	r0, #0
 8004df0:	e008      	b.n	8004e04 <_printf_common+0xa8>
 8004df2:	2301      	movs	r3, #1
 8004df4:	4652      	mov	r2, sl
 8004df6:	4641      	mov	r1, r8
 8004df8:	4638      	mov	r0, r7
 8004dfa:	47c8      	blx	r9
 8004dfc:	3001      	adds	r0, #1
 8004dfe:	d103      	bne.n	8004e08 <_printf_common+0xac>
 8004e00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e08:	3501      	adds	r5, #1
 8004e0a:	e7c6      	b.n	8004d9a <_printf_common+0x3e>
 8004e0c:	18e1      	adds	r1, r4, r3
 8004e0e:	1c5a      	adds	r2, r3, #1
 8004e10:	2030      	movs	r0, #48	@ 0x30
 8004e12:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004e16:	4422      	add	r2, r4
 8004e18:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004e1c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004e20:	3302      	adds	r3, #2
 8004e22:	e7c7      	b.n	8004db4 <_printf_common+0x58>
 8004e24:	2301      	movs	r3, #1
 8004e26:	4622      	mov	r2, r4
 8004e28:	4641      	mov	r1, r8
 8004e2a:	4638      	mov	r0, r7
 8004e2c:	47c8      	blx	r9
 8004e2e:	3001      	adds	r0, #1
 8004e30:	d0e6      	beq.n	8004e00 <_printf_common+0xa4>
 8004e32:	3601      	adds	r6, #1
 8004e34:	e7d9      	b.n	8004dea <_printf_common+0x8e>
	...

08004e38 <_printf_i>:
 8004e38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e3c:	7e0f      	ldrb	r7, [r1, #24]
 8004e3e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004e40:	2f78      	cmp	r7, #120	@ 0x78
 8004e42:	4691      	mov	r9, r2
 8004e44:	4680      	mov	r8, r0
 8004e46:	460c      	mov	r4, r1
 8004e48:	469a      	mov	sl, r3
 8004e4a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004e4e:	d807      	bhi.n	8004e60 <_printf_i+0x28>
 8004e50:	2f62      	cmp	r7, #98	@ 0x62
 8004e52:	d80a      	bhi.n	8004e6a <_printf_i+0x32>
 8004e54:	2f00      	cmp	r7, #0
 8004e56:	f000 80d2 	beq.w	8004ffe <_printf_i+0x1c6>
 8004e5a:	2f58      	cmp	r7, #88	@ 0x58
 8004e5c:	f000 80b9 	beq.w	8004fd2 <_printf_i+0x19a>
 8004e60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004e64:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004e68:	e03a      	b.n	8004ee0 <_printf_i+0xa8>
 8004e6a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004e6e:	2b15      	cmp	r3, #21
 8004e70:	d8f6      	bhi.n	8004e60 <_printf_i+0x28>
 8004e72:	a101      	add	r1, pc, #4	@ (adr r1, 8004e78 <_printf_i+0x40>)
 8004e74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e78:	08004ed1 	.word	0x08004ed1
 8004e7c:	08004ee5 	.word	0x08004ee5
 8004e80:	08004e61 	.word	0x08004e61
 8004e84:	08004e61 	.word	0x08004e61
 8004e88:	08004e61 	.word	0x08004e61
 8004e8c:	08004e61 	.word	0x08004e61
 8004e90:	08004ee5 	.word	0x08004ee5
 8004e94:	08004e61 	.word	0x08004e61
 8004e98:	08004e61 	.word	0x08004e61
 8004e9c:	08004e61 	.word	0x08004e61
 8004ea0:	08004e61 	.word	0x08004e61
 8004ea4:	08004fe5 	.word	0x08004fe5
 8004ea8:	08004f0f 	.word	0x08004f0f
 8004eac:	08004f9f 	.word	0x08004f9f
 8004eb0:	08004e61 	.word	0x08004e61
 8004eb4:	08004e61 	.word	0x08004e61
 8004eb8:	08005007 	.word	0x08005007
 8004ebc:	08004e61 	.word	0x08004e61
 8004ec0:	08004f0f 	.word	0x08004f0f
 8004ec4:	08004e61 	.word	0x08004e61
 8004ec8:	08004e61 	.word	0x08004e61
 8004ecc:	08004fa7 	.word	0x08004fa7
 8004ed0:	6833      	ldr	r3, [r6, #0]
 8004ed2:	1d1a      	adds	r2, r3, #4
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	6032      	str	r2, [r6, #0]
 8004ed8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004edc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e09d      	b.n	8005020 <_printf_i+0x1e8>
 8004ee4:	6833      	ldr	r3, [r6, #0]
 8004ee6:	6820      	ldr	r0, [r4, #0]
 8004ee8:	1d19      	adds	r1, r3, #4
 8004eea:	6031      	str	r1, [r6, #0]
 8004eec:	0606      	lsls	r6, r0, #24
 8004eee:	d501      	bpl.n	8004ef4 <_printf_i+0xbc>
 8004ef0:	681d      	ldr	r5, [r3, #0]
 8004ef2:	e003      	b.n	8004efc <_printf_i+0xc4>
 8004ef4:	0645      	lsls	r5, r0, #25
 8004ef6:	d5fb      	bpl.n	8004ef0 <_printf_i+0xb8>
 8004ef8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004efc:	2d00      	cmp	r5, #0
 8004efe:	da03      	bge.n	8004f08 <_printf_i+0xd0>
 8004f00:	232d      	movs	r3, #45	@ 0x2d
 8004f02:	426d      	negs	r5, r5
 8004f04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f08:	4859      	ldr	r0, [pc, #356]	@ (8005070 <_printf_i+0x238>)
 8004f0a:	230a      	movs	r3, #10
 8004f0c:	e011      	b.n	8004f32 <_printf_i+0xfa>
 8004f0e:	6821      	ldr	r1, [r4, #0]
 8004f10:	6833      	ldr	r3, [r6, #0]
 8004f12:	0608      	lsls	r0, r1, #24
 8004f14:	f853 5b04 	ldr.w	r5, [r3], #4
 8004f18:	d402      	bmi.n	8004f20 <_printf_i+0xe8>
 8004f1a:	0649      	lsls	r1, r1, #25
 8004f1c:	bf48      	it	mi
 8004f1e:	b2ad      	uxthmi	r5, r5
 8004f20:	2f6f      	cmp	r7, #111	@ 0x6f
 8004f22:	4853      	ldr	r0, [pc, #332]	@ (8005070 <_printf_i+0x238>)
 8004f24:	6033      	str	r3, [r6, #0]
 8004f26:	bf14      	ite	ne
 8004f28:	230a      	movne	r3, #10
 8004f2a:	2308      	moveq	r3, #8
 8004f2c:	2100      	movs	r1, #0
 8004f2e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004f32:	6866      	ldr	r6, [r4, #4]
 8004f34:	60a6      	str	r6, [r4, #8]
 8004f36:	2e00      	cmp	r6, #0
 8004f38:	bfa2      	ittt	ge
 8004f3a:	6821      	ldrge	r1, [r4, #0]
 8004f3c:	f021 0104 	bicge.w	r1, r1, #4
 8004f40:	6021      	strge	r1, [r4, #0]
 8004f42:	b90d      	cbnz	r5, 8004f48 <_printf_i+0x110>
 8004f44:	2e00      	cmp	r6, #0
 8004f46:	d04b      	beq.n	8004fe0 <_printf_i+0x1a8>
 8004f48:	4616      	mov	r6, r2
 8004f4a:	fbb5 f1f3 	udiv	r1, r5, r3
 8004f4e:	fb03 5711 	mls	r7, r3, r1, r5
 8004f52:	5dc7      	ldrb	r7, [r0, r7]
 8004f54:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004f58:	462f      	mov	r7, r5
 8004f5a:	42bb      	cmp	r3, r7
 8004f5c:	460d      	mov	r5, r1
 8004f5e:	d9f4      	bls.n	8004f4a <_printf_i+0x112>
 8004f60:	2b08      	cmp	r3, #8
 8004f62:	d10b      	bne.n	8004f7c <_printf_i+0x144>
 8004f64:	6823      	ldr	r3, [r4, #0]
 8004f66:	07df      	lsls	r7, r3, #31
 8004f68:	d508      	bpl.n	8004f7c <_printf_i+0x144>
 8004f6a:	6923      	ldr	r3, [r4, #16]
 8004f6c:	6861      	ldr	r1, [r4, #4]
 8004f6e:	4299      	cmp	r1, r3
 8004f70:	bfde      	ittt	le
 8004f72:	2330      	movle	r3, #48	@ 0x30
 8004f74:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004f78:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004f7c:	1b92      	subs	r2, r2, r6
 8004f7e:	6122      	str	r2, [r4, #16]
 8004f80:	f8cd a000 	str.w	sl, [sp]
 8004f84:	464b      	mov	r3, r9
 8004f86:	aa03      	add	r2, sp, #12
 8004f88:	4621      	mov	r1, r4
 8004f8a:	4640      	mov	r0, r8
 8004f8c:	f7ff fee6 	bl	8004d5c <_printf_common>
 8004f90:	3001      	adds	r0, #1
 8004f92:	d14a      	bne.n	800502a <_printf_i+0x1f2>
 8004f94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004f98:	b004      	add	sp, #16
 8004f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f9e:	6823      	ldr	r3, [r4, #0]
 8004fa0:	f043 0320 	orr.w	r3, r3, #32
 8004fa4:	6023      	str	r3, [r4, #0]
 8004fa6:	4833      	ldr	r0, [pc, #204]	@ (8005074 <_printf_i+0x23c>)
 8004fa8:	2778      	movs	r7, #120	@ 0x78
 8004faa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004fae:	6823      	ldr	r3, [r4, #0]
 8004fb0:	6831      	ldr	r1, [r6, #0]
 8004fb2:	061f      	lsls	r7, r3, #24
 8004fb4:	f851 5b04 	ldr.w	r5, [r1], #4
 8004fb8:	d402      	bmi.n	8004fc0 <_printf_i+0x188>
 8004fba:	065f      	lsls	r7, r3, #25
 8004fbc:	bf48      	it	mi
 8004fbe:	b2ad      	uxthmi	r5, r5
 8004fc0:	6031      	str	r1, [r6, #0]
 8004fc2:	07d9      	lsls	r1, r3, #31
 8004fc4:	bf44      	itt	mi
 8004fc6:	f043 0320 	orrmi.w	r3, r3, #32
 8004fca:	6023      	strmi	r3, [r4, #0]
 8004fcc:	b11d      	cbz	r5, 8004fd6 <_printf_i+0x19e>
 8004fce:	2310      	movs	r3, #16
 8004fd0:	e7ac      	b.n	8004f2c <_printf_i+0xf4>
 8004fd2:	4827      	ldr	r0, [pc, #156]	@ (8005070 <_printf_i+0x238>)
 8004fd4:	e7e9      	b.n	8004faa <_printf_i+0x172>
 8004fd6:	6823      	ldr	r3, [r4, #0]
 8004fd8:	f023 0320 	bic.w	r3, r3, #32
 8004fdc:	6023      	str	r3, [r4, #0]
 8004fde:	e7f6      	b.n	8004fce <_printf_i+0x196>
 8004fe0:	4616      	mov	r6, r2
 8004fe2:	e7bd      	b.n	8004f60 <_printf_i+0x128>
 8004fe4:	6833      	ldr	r3, [r6, #0]
 8004fe6:	6825      	ldr	r5, [r4, #0]
 8004fe8:	6961      	ldr	r1, [r4, #20]
 8004fea:	1d18      	adds	r0, r3, #4
 8004fec:	6030      	str	r0, [r6, #0]
 8004fee:	062e      	lsls	r6, r5, #24
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	d501      	bpl.n	8004ff8 <_printf_i+0x1c0>
 8004ff4:	6019      	str	r1, [r3, #0]
 8004ff6:	e002      	b.n	8004ffe <_printf_i+0x1c6>
 8004ff8:	0668      	lsls	r0, r5, #25
 8004ffa:	d5fb      	bpl.n	8004ff4 <_printf_i+0x1bc>
 8004ffc:	8019      	strh	r1, [r3, #0]
 8004ffe:	2300      	movs	r3, #0
 8005000:	6123      	str	r3, [r4, #16]
 8005002:	4616      	mov	r6, r2
 8005004:	e7bc      	b.n	8004f80 <_printf_i+0x148>
 8005006:	6833      	ldr	r3, [r6, #0]
 8005008:	1d1a      	adds	r2, r3, #4
 800500a:	6032      	str	r2, [r6, #0]
 800500c:	681e      	ldr	r6, [r3, #0]
 800500e:	6862      	ldr	r2, [r4, #4]
 8005010:	2100      	movs	r1, #0
 8005012:	4630      	mov	r0, r6
 8005014:	f7fb f8ec 	bl	80001f0 <memchr>
 8005018:	b108      	cbz	r0, 800501e <_printf_i+0x1e6>
 800501a:	1b80      	subs	r0, r0, r6
 800501c:	6060      	str	r0, [r4, #4]
 800501e:	6863      	ldr	r3, [r4, #4]
 8005020:	6123      	str	r3, [r4, #16]
 8005022:	2300      	movs	r3, #0
 8005024:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005028:	e7aa      	b.n	8004f80 <_printf_i+0x148>
 800502a:	6923      	ldr	r3, [r4, #16]
 800502c:	4632      	mov	r2, r6
 800502e:	4649      	mov	r1, r9
 8005030:	4640      	mov	r0, r8
 8005032:	47d0      	blx	sl
 8005034:	3001      	adds	r0, #1
 8005036:	d0ad      	beq.n	8004f94 <_printf_i+0x15c>
 8005038:	6823      	ldr	r3, [r4, #0]
 800503a:	079b      	lsls	r3, r3, #30
 800503c:	d413      	bmi.n	8005066 <_printf_i+0x22e>
 800503e:	68e0      	ldr	r0, [r4, #12]
 8005040:	9b03      	ldr	r3, [sp, #12]
 8005042:	4298      	cmp	r0, r3
 8005044:	bfb8      	it	lt
 8005046:	4618      	movlt	r0, r3
 8005048:	e7a6      	b.n	8004f98 <_printf_i+0x160>
 800504a:	2301      	movs	r3, #1
 800504c:	4632      	mov	r2, r6
 800504e:	4649      	mov	r1, r9
 8005050:	4640      	mov	r0, r8
 8005052:	47d0      	blx	sl
 8005054:	3001      	adds	r0, #1
 8005056:	d09d      	beq.n	8004f94 <_printf_i+0x15c>
 8005058:	3501      	adds	r5, #1
 800505a:	68e3      	ldr	r3, [r4, #12]
 800505c:	9903      	ldr	r1, [sp, #12]
 800505e:	1a5b      	subs	r3, r3, r1
 8005060:	42ab      	cmp	r3, r5
 8005062:	dcf2      	bgt.n	800504a <_printf_i+0x212>
 8005064:	e7eb      	b.n	800503e <_printf_i+0x206>
 8005066:	2500      	movs	r5, #0
 8005068:	f104 0619 	add.w	r6, r4, #25
 800506c:	e7f5      	b.n	800505a <_printf_i+0x222>
 800506e:	bf00      	nop
 8005070:	080054b9 	.word	0x080054b9
 8005074:	080054ca 	.word	0x080054ca

08005078 <__sflush_r>:
 8005078:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800507c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005080:	0716      	lsls	r6, r2, #28
 8005082:	4605      	mov	r5, r0
 8005084:	460c      	mov	r4, r1
 8005086:	d454      	bmi.n	8005132 <__sflush_r+0xba>
 8005088:	684b      	ldr	r3, [r1, #4]
 800508a:	2b00      	cmp	r3, #0
 800508c:	dc02      	bgt.n	8005094 <__sflush_r+0x1c>
 800508e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005090:	2b00      	cmp	r3, #0
 8005092:	dd48      	ble.n	8005126 <__sflush_r+0xae>
 8005094:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005096:	2e00      	cmp	r6, #0
 8005098:	d045      	beq.n	8005126 <__sflush_r+0xae>
 800509a:	2300      	movs	r3, #0
 800509c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80050a0:	682f      	ldr	r7, [r5, #0]
 80050a2:	6a21      	ldr	r1, [r4, #32]
 80050a4:	602b      	str	r3, [r5, #0]
 80050a6:	d030      	beq.n	800510a <__sflush_r+0x92>
 80050a8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80050aa:	89a3      	ldrh	r3, [r4, #12]
 80050ac:	0759      	lsls	r1, r3, #29
 80050ae:	d505      	bpl.n	80050bc <__sflush_r+0x44>
 80050b0:	6863      	ldr	r3, [r4, #4]
 80050b2:	1ad2      	subs	r2, r2, r3
 80050b4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80050b6:	b10b      	cbz	r3, 80050bc <__sflush_r+0x44>
 80050b8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80050ba:	1ad2      	subs	r2, r2, r3
 80050bc:	2300      	movs	r3, #0
 80050be:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80050c0:	6a21      	ldr	r1, [r4, #32]
 80050c2:	4628      	mov	r0, r5
 80050c4:	47b0      	blx	r6
 80050c6:	1c43      	adds	r3, r0, #1
 80050c8:	89a3      	ldrh	r3, [r4, #12]
 80050ca:	d106      	bne.n	80050da <__sflush_r+0x62>
 80050cc:	6829      	ldr	r1, [r5, #0]
 80050ce:	291d      	cmp	r1, #29
 80050d0:	d82b      	bhi.n	800512a <__sflush_r+0xb2>
 80050d2:	4a2a      	ldr	r2, [pc, #168]	@ (800517c <__sflush_r+0x104>)
 80050d4:	410a      	asrs	r2, r1
 80050d6:	07d6      	lsls	r6, r2, #31
 80050d8:	d427      	bmi.n	800512a <__sflush_r+0xb2>
 80050da:	2200      	movs	r2, #0
 80050dc:	6062      	str	r2, [r4, #4]
 80050de:	04d9      	lsls	r1, r3, #19
 80050e0:	6922      	ldr	r2, [r4, #16]
 80050e2:	6022      	str	r2, [r4, #0]
 80050e4:	d504      	bpl.n	80050f0 <__sflush_r+0x78>
 80050e6:	1c42      	adds	r2, r0, #1
 80050e8:	d101      	bne.n	80050ee <__sflush_r+0x76>
 80050ea:	682b      	ldr	r3, [r5, #0]
 80050ec:	b903      	cbnz	r3, 80050f0 <__sflush_r+0x78>
 80050ee:	6560      	str	r0, [r4, #84]	@ 0x54
 80050f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80050f2:	602f      	str	r7, [r5, #0]
 80050f4:	b1b9      	cbz	r1, 8005126 <__sflush_r+0xae>
 80050f6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80050fa:	4299      	cmp	r1, r3
 80050fc:	d002      	beq.n	8005104 <__sflush_r+0x8c>
 80050fe:	4628      	mov	r0, r5
 8005100:	f7ff fbf2 	bl	80048e8 <_free_r>
 8005104:	2300      	movs	r3, #0
 8005106:	6363      	str	r3, [r4, #52]	@ 0x34
 8005108:	e00d      	b.n	8005126 <__sflush_r+0xae>
 800510a:	2301      	movs	r3, #1
 800510c:	4628      	mov	r0, r5
 800510e:	47b0      	blx	r6
 8005110:	4602      	mov	r2, r0
 8005112:	1c50      	adds	r0, r2, #1
 8005114:	d1c9      	bne.n	80050aa <__sflush_r+0x32>
 8005116:	682b      	ldr	r3, [r5, #0]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d0c6      	beq.n	80050aa <__sflush_r+0x32>
 800511c:	2b1d      	cmp	r3, #29
 800511e:	d001      	beq.n	8005124 <__sflush_r+0xac>
 8005120:	2b16      	cmp	r3, #22
 8005122:	d11e      	bne.n	8005162 <__sflush_r+0xea>
 8005124:	602f      	str	r7, [r5, #0]
 8005126:	2000      	movs	r0, #0
 8005128:	e022      	b.n	8005170 <__sflush_r+0xf8>
 800512a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800512e:	b21b      	sxth	r3, r3
 8005130:	e01b      	b.n	800516a <__sflush_r+0xf2>
 8005132:	690f      	ldr	r7, [r1, #16]
 8005134:	2f00      	cmp	r7, #0
 8005136:	d0f6      	beq.n	8005126 <__sflush_r+0xae>
 8005138:	0793      	lsls	r3, r2, #30
 800513a:	680e      	ldr	r6, [r1, #0]
 800513c:	bf08      	it	eq
 800513e:	694b      	ldreq	r3, [r1, #20]
 8005140:	600f      	str	r7, [r1, #0]
 8005142:	bf18      	it	ne
 8005144:	2300      	movne	r3, #0
 8005146:	eba6 0807 	sub.w	r8, r6, r7
 800514a:	608b      	str	r3, [r1, #8]
 800514c:	f1b8 0f00 	cmp.w	r8, #0
 8005150:	dde9      	ble.n	8005126 <__sflush_r+0xae>
 8005152:	6a21      	ldr	r1, [r4, #32]
 8005154:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005156:	4643      	mov	r3, r8
 8005158:	463a      	mov	r2, r7
 800515a:	4628      	mov	r0, r5
 800515c:	47b0      	blx	r6
 800515e:	2800      	cmp	r0, #0
 8005160:	dc08      	bgt.n	8005174 <__sflush_r+0xfc>
 8005162:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005166:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800516a:	81a3      	strh	r3, [r4, #12]
 800516c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005174:	4407      	add	r7, r0
 8005176:	eba8 0800 	sub.w	r8, r8, r0
 800517a:	e7e7      	b.n	800514c <__sflush_r+0xd4>
 800517c:	dfbffffe 	.word	0xdfbffffe

08005180 <_fflush_r>:
 8005180:	b538      	push	{r3, r4, r5, lr}
 8005182:	690b      	ldr	r3, [r1, #16]
 8005184:	4605      	mov	r5, r0
 8005186:	460c      	mov	r4, r1
 8005188:	b913      	cbnz	r3, 8005190 <_fflush_r+0x10>
 800518a:	2500      	movs	r5, #0
 800518c:	4628      	mov	r0, r5
 800518e:	bd38      	pop	{r3, r4, r5, pc}
 8005190:	b118      	cbz	r0, 800519a <_fflush_r+0x1a>
 8005192:	6a03      	ldr	r3, [r0, #32]
 8005194:	b90b      	cbnz	r3, 800519a <_fflush_r+0x1a>
 8005196:	f7ff fa9f 	bl	80046d8 <__sinit>
 800519a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d0f3      	beq.n	800518a <_fflush_r+0xa>
 80051a2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80051a4:	07d0      	lsls	r0, r2, #31
 80051a6:	d404      	bmi.n	80051b2 <_fflush_r+0x32>
 80051a8:	0599      	lsls	r1, r3, #22
 80051aa:	d402      	bmi.n	80051b2 <_fflush_r+0x32>
 80051ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80051ae:	f7ff fb98 	bl	80048e2 <__retarget_lock_acquire_recursive>
 80051b2:	4628      	mov	r0, r5
 80051b4:	4621      	mov	r1, r4
 80051b6:	f7ff ff5f 	bl	8005078 <__sflush_r>
 80051ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80051bc:	07da      	lsls	r2, r3, #31
 80051be:	4605      	mov	r5, r0
 80051c0:	d4e4      	bmi.n	800518c <_fflush_r+0xc>
 80051c2:	89a3      	ldrh	r3, [r4, #12]
 80051c4:	059b      	lsls	r3, r3, #22
 80051c6:	d4e1      	bmi.n	800518c <_fflush_r+0xc>
 80051c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80051ca:	f7ff fb8b 	bl	80048e4 <__retarget_lock_release_recursive>
 80051ce:	e7dd      	b.n	800518c <_fflush_r+0xc>

080051d0 <__swbuf_r>:
 80051d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051d2:	460e      	mov	r6, r1
 80051d4:	4614      	mov	r4, r2
 80051d6:	4605      	mov	r5, r0
 80051d8:	b118      	cbz	r0, 80051e2 <__swbuf_r+0x12>
 80051da:	6a03      	ldr	r3, [r0, #32]
 80051dc:	b90b      	cbnz	r3, 80051e2 <__swbuf_r+0x12>
 80051de:	f7ff fa7b 	bl	80046d8 <__sinit>
 80051e2:	69a3      	ldr	r3, [r4, #24]
 80051e4:	60a3      	str	r3, [r4, #8]
 80051e6:	89a3      	ldrh	r3, [r4, #12]
 80051e8:	071a      	lsls	r2, r3, #28
 80051ea:	d501      	bpl.n	80051f0 <__swbuf_r+0x20>
 80051ec:	6923      	ldr	r3, [r4, #16]
 80051ee:	b943      	cbnz	r3, 8005202 <__swbuf_r+0x32>
 80051f0:	4621      	mov	r1, r4
 80051f2:	4628      	mov	r0, r5
 80051f4:	f000 f82a 	bl	800524c <__swsetup_r>
 80051f8:	b118      	cbz	r0, 8005202 <__swbuf_r+0x32>
 80051fa:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80051fe:	4638      	mov	r0, r7
 8005200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005202:	6823      	ldr	r3, [r4, #0]
 8005204:	6922      	ldr	r2, [r4, #16]
 8005206:	1a98      	subs	r0, r3, r2
 8005208:	6963      	ldr	r3, [r4, #20]
 800520a:	b2f6      	uxtb	r6, r6
 800520c:	4283      	cmp	r3, r0
 800520e:	4637      	mov	r7, r6
 8005210:	dc05      	bgt.n	800521e <__swbuf_r+0x4e>
 8005212:	4621      	mov	r1, r4
 8005214:	4628      	mov	r0, r5
 8005216:	f7ff ffb3 	bl	8005180 <_fflush_r>
 800521a:	2800      	cmp	r0, #0
 800521c:	d1ed      	bne.n	80051fa <__swbuf_r+0x2a>
 800521e:	68a3      	ldr	r3, [r4, #8]
 8005220:	3b01      	subs	r3, #1
 8005222:	60a3      	str	r3, [r4, #8]
 8005224:	6823      	ldr	r3, [r4, #0]
 8005226:	1c5a      	adds	r2, r3, #1
 8005228:	6022      	str	r2, [r4, #0]
 800522a:	701e      	strb	r6, [r3, #0]
 800522c:	6962      	ldr	r2, [r4, #20]
 800522e:	1c43      	adds	r3, r0, #1
 8005230:	429a      	cmp	r2, r3
 8005232:	d004      	beq.n	800523e <__swbuf_r+0x6e>
 8005234:	89a3      	ldrh	r3, [r4, #12]
 8005236:	07db      	lsls	r3, r3, #31
 8005238:	d5e1      	bpl.n	80051fe <__swbuf_r+0x2e>
 800523a:	2e0a      	cmp	r6, #10
 800523c:	d1df      	bne.n	80051fe <__swbuf_r+0x2e>
 800523e:	4621      	mov	r1, r4
 8005240:	4628      	mov	r0, r5
 8005242:	f7ff ff9d 	bl	8005180 <_fflush_r>
 8005246:	2800      	cmp	r0, #0
 8005248:	d0d9      	beq.n	80051fe <__swbuf_r+0x2e>
 800524a:	e7d6      	b.n	80051fa <__swbuf_r+0x2a>

0800524c <__swsetup_r>:
 800524c:	b538      	push	{r3, r4, r5, lr}
 800524e:	4b29      	ldr	r3, [pc, #164]	@ (80052f4 <__swsetup_r+0xa8>)
 8005250:	4605      	mov	r5, r0
 8005252:	6818      	ldr	r0, [r3, #0]
 8005254:	460c      	mov	r4, r1
 8005256:	b118      	cbz	r0, 8005260 <__swsetup_r+0x14>
 8005258:	6a03      	ldr	r3, [r0, #32]
 800525a:	b90b      	cbnz	r3, 8005260 <__swsetup_r+0x14>
 800525c:	f7ff fa3c 	bl	80046d8 <__sinit>
 8005260:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005264:	0719      	lsls	r1, r3, #28
 8005266:	d422      	bmi.n	80052ae <__swsetup_r+0x62>
 8005268:	06da      	lsls	r2, r3, #27
 800526a:	d407      	bmi.n	800527c <__swsetup_r+0x30>
 800526c:	2209      	movs	r2, #9
 800526e:	602a      	str	r2, [r5, #0]
 8005270:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005274:	81a3      	strh	r3, [r4, #12]
 8005276:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800527a:	e033      	b.n	80052e4 <__swsetup_r+0x98>
 800527c:	0758      	lsls	r0, r3, #29
 800527e:	d512      	bpl.n	80052a6 <__swsetup_r+0x5a>
 8005280:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005282:	b141      	cbz	r1, 8005296 <__swsetup_r+0x4a>
 8005284:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005288:	4299      	cmp	r1, r3
 800528a:	d002      	beq.n	8005292 <__swsetup_r+0x46>
 800528c:	4628      	mov	r0, r5
 800528e:	f7ff fb2b 	bl	80048e8 <_free_r>
 8005292:	2300      	movs	r3, #0
 8005294:	6363      	str	r3, [r4, #52]	@ 0x34
 8005296:	89a3      	ldrh	r3, [r4, #12]
 8005298:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800529c:	81a3      	strh	r3, [r4, #12]
 800529e:	2300      	movs	r3, #0
 80052a0:	6063      	str	r3, [r4, #4]
 80052a2:	6923      	ldr	r3, [r4, #16]
 80052a4:	6023      	str	r3, [r4, #0]
 80052a6:	89a3      	ldrh	r3, [r4, #12]
 80052a8:	f043 0308 	orr.w	r3, r3, #8
 80052ac:	81a3      	strh	r3, [r4, #12]
 80052ae:	6923      	ldr	r3, [r4, #16]
 80052b0:	b94b      	cbnz	r3, 80052c6 <__swsetup_r+0x7a>
 80052b2:	89a3      	ldrh	r3, [r4, #12]
 80052b4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80052b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052bc:	d003      	beq.n	80052c6 <__swsetup_r+0x7a>
 80052be:	4621      	mov	r1, r4
 80052c0:	4628      	mov	r0, r5
 80052c2:	f000 f84f 	bl	8005364 <__smakebuf_r>
 80052c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052ca:	f013 0201 	ands.w	r2, r3, #1
 80052ce:	d00a      	beq.n	80052e6 <__swsetup_r+0x9a>
 80052d0:	2200      	movs	r2, #0
 80052d2:	60a2      	str	r2, [r4, #8]
 80052d4:	6962      	ldr	r2, [r4, #20]
 80052d6:	4252      	negs	r2, r2
 80052d8:	61a2      	str	r2, [r4, #24]
 80052da:	6922      	ldr	r2, [r4, #16]
 80052dc:	b942      	cbnz	r2, 80052f0 <__swsetup_r+0xa4>
 80052de:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80052e2:	d1c5      	bne.n	8005270 <__swsetup_r+0x24>
 80052e4:	bd38      	pop	{r3, r4, r5, pc}
 80052e6:	0799      	lsls	r1, r3, #30
 80052e8:	bf58      	it	pl
 80052ea:	6962      	ldrpl	r2, [r4, #20]
 80052ec:	60a2      	str	r2, [r4, #8]
 80052ee:	e7f4      	b.n	80052da <__swsetup_r+0x8e>
 80052f0:	2000      	movs	r0, #0
 80052f2:	e7f7      	b.n	80052e4 <__swsetup_r+0x98>
 80052f4:	20000018 	.word	0x20000018

080052f8 <_sbrk_r>:
 80052f8:	b538      	push	{r3, r4, r5, lr}
 80052fa:	4d06      	ldr	r5, [pc, #24]	@ (8005314 <_sbrk_r+0x1c>)
 80052fc:	2300      	movs	r3, #0
 80052fe:	4604      	mov	r4, r0
 8005300:	4608      	mov	r0, r1
 8005302:	602b      	str	r3, [r5, #0]
 8005304:	f7fc f970 	bl	80015e8 <_sbrk>
 8005308:	1c43      	adds	r3, r0, #1
 800530a:	d102      	bne.n	8005312 <_sbrk_r+0x1a>
 800530c:	682b      	ldr	r3, [r5, #0]
 800530e:	b103      	cbz	r3, 8005312 <_sbrk_r+0x1a>
 8005310:	6023      	str	r3, [r4, #0]
 8005312:	bd38      	pop	{r3, r4, r5, pc}
 8005314:	20000330 	.word	0x20000330

08005318 <__swhatbuf_r>:
 8005318:	b570      	push	{r4, r5, r6, lr}
 800531a:	460c      	mov	r4, r1
 800531c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005320:	2900      	cmp	r1, #0
 8005322:	b096      	sub	sp, #88	@ 0x58
 8005324:	4615      	mov	r5, r2
 8005326:	461e      	mov	r6, r3
 8005328:	da0d      	bge.n	8005346 <__swhatbuf_r+0x2e>
 800532a:	89a3      	ldrh	r3, [r4, #12]
 800532c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005330:	f04f 0100 	mov.w	r1, #0
 8005334:	bf14      	ite	ne
 8005336:	2340      	movne	r3, #64	@ 0x40
 8005338:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800533c:	2000      	movs	r0, #0
 800533e:	6031      	str	r1, [r6, #0]
 8005340:	602b      	str	r3, [r5, #0]
 8005342:	b016      	add	sp, #88	@ 0x58
 8005344:	bd70      	pop	{r4, r5, r6, pc}
 8005346:	466a      	mov	r2, sp
 8005348:	f000 f848 	bl	80053dc <_fstat_r>
 800534c:	2800      	cmp	r0, #0
 800534e:	dbec      	blt.n	800532a <__swhatbuf_r+0x12>
 8005350:	9901      	ldr	r1, [sp, #4]
 8005352:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005356:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800535a:	4259      	negs	r1, r3
 800535c:	4159      	adcs	r1, r3
 800535e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005362:	e7eb      	b.n	800533c <__swhatbuf_r+0x24>

08005364 <__smakebuf_r>:
 8005364:	898b      	ldrh	r3, [r1, #12]
 8005366:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005368:	079d      	lsls	r5, r3, #30
 800536a:	4606      	mov	r6, r0
 800536c:	460c      	mov	r4, r1
 800536e:	d507      	bpl.n	8005380 <__smakebuf_r+0x1c>
 8005370:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005374:	6023      	str	r3, [r4, #0]
 8005376:	6123      	str	r3, [r4, #16]
 8005378:	2301      	movs	r3, #1
 800537a:	6163      	str	r3, [r4, #20]
 800537c:	b003      	add	sp, #12
 800537e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005380:	ab01      	add	r3, sp, #4
 8005382:	466a      	mov	r2, sp
 8005384:	f7ff ffc8 	bl	8005318 <__swhatbuf_r>
 8005388:	9f00      	ldr	r7, [sp, #0]
 800538a:	4605      	mov	r5, r0
 800538c:	4639      	mov	r1, r7
 800538e:	4630      	mov	r0, r6
 8005390:	f7ff fb16 	bl	80049c0 <_malloc_r>
 8005394:	b948      	cbnz	r0, 80053aa <__smakebuf_r+0x46>
 8005396:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800539a:	059a      	lsls	r2, r3, #22
 800539c:	d4ee      	bmi.n	800537c <__smakebuf_r+0x18>
 800539e:	f023 0303 	bic.w	r3, r3, #3
 80053a2:	f043 0302 	orr.w	r3, r3, #2
 80053a6:	81a3      	strh	r3, [r4, #12]
 80053a8:	e7e2      	b.n	8005370 <__smakebuf_r+0xc>
 80053aa:	89a3      	ldrh	r3, [r4, #12]
 80053ac:	6020      	str	r0, [r4, #0]
 80053ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053b2:	81a3      	strh	r3, [r4, #12]
 80053b4:	9b01      	ldr	r3, [sp, #4]
 80053b6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80053ba:	b15b      	cbz	r3, 80053d4 <__smakebuf_r+0x70>
 80053bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80053c0:	4630      	mov	r0, r6
 80053c2:	f000 f81d 	bl	8005400 <_isatty_r>
 80053c6:	b128      	cbz	r0, 80053d4 <__smakebuf_r+0x70>
 80053c8:	89a3      	ldrh	r3, [r4, #12]
 80053ca:	f023 0303 	bic.w	r3, r3, #3
 80053ce:	f043 0301 	orr.w	r3, r3, #1
 80053d2:	81a3      	strh	r3, [r4, #12]
 80053d4:	89a3      	ldrh	r3, [r4, #12]
 80053d6:	431d      	orrs	r5, r3
 80053d8:	81a5      	strh	r5, [r4, #12]
 80053da:	e7cf      	b.n	800537c <__smakebuf_r+0x18>

080053dc <_fstat_r>:
 80053dc:	b538      	push	{r3, r4, r5, lr}
 80053de:	4d07      	ldr	r5, [pc, #28]	@ (80053fc <_fstat_r+0x20>)
 80053e0:	2300      	movs	r3, #0
 80053e2:	4604      	mov	r4, r0
 80053e4:	4608      	mov	r0, r1
 80053e6:	4611      	mov	r1, r2
 80053e8:	602b      	str	r3, [r5, #0]
 80053ea:	f7fc f8d5 	bl	8001598 <_fstat>
 80053ee:	1c43      	adds	r3, r0, #1
 80053f0:	d102      	bne.n	80053f8 <_fstat_r+0x1c>
 80053f2:	682b      	ldr	r3, [r5, #0]
 80053f4:	b103      	cbz	r3, 80053f8 <_fstat_r+0x1c>
 80053f6:	6023      	str	r3, [r4, #0]
 80053f8:	bd38      	pop	{r3, r4, r5, pc}
 80053fa:	bf00      	nop
 80053fc:	20000330 	.word	0x20000330

08005400 <_isatty_r>:
 8005400:	b538      	push	{r3, r4, r5, lr}
 8005402:	4d06      	ldr	r5, [pc, #24]	@ (800541c <_isatty_r+0x1c>)
 8005404:	2300      	movs	r3, #0
 8005406:	4604      	mov	r4, r0
 8005408:	4608      	mov	r0, r1
 800540a:	602b      	str	r3, [r5, #0]
 800540c:	f7fc f8d4 	bl	80015b8 <_isatty>
 8005410:	1c43      	adds	r3, r0, #1
 8005412:	d102      	bne.n	800541a <_isatty_r+0x1a>
 8005414:	682b      	ldr	r3, [r5, #0]
 8005416:	b103      	cbz	r3, 800541a <_isatty_r+0x1a>
 8005418:	6023      	str	r3, [r4, #0]
 800541a:	bd38      	pop	{r3, r4, r5, pc}
 800541c:	20000330 	.word	0x20000330

08005420 <_init>:
 8005420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005422:	bf00      	nop
 8005424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005426:	bc08      	pop	{r3}
 8005428:	469e      	mov	lr, r3
 800542a:	4770      	bx	lr

0800542c <_fini>:
 800542c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800542e:	bf00      	nop
 8005430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005432:	bc08      	pop	{r3}
 8005434:	469e      	mov	lr, r3
 8005436:	4770      	bx	lr
